cscope 15 $HOME/codecentral/uqembeddedsys/sourcelib/components/os/FreeRTOS               0000198173
	@croutine.c

29 
	~"FªeRTOS.h
"

30 
	~"èsk.h
"

31 
	~"¸outöe.h
"

34 #i‡–
c⁄figUSE_CO_ROUTINES
 != 0 )

40 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


41 

	)

46 
Li°_t
 
	gpxRódyCoRoutöeLi°s
[ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 ];

47 
Li°_t
 
	gxDñayedCoRoutöeLi°1
;

48 
Li°_t
 
	gxDñayedCoRoutöeLi°2
;

49 
Li°_t
 * 
	gpxDñayedCoRoutöeLi°
 = 
NULL
;

50 
Li°_t
 * 
	gpxOvîÊowDñayedCoRoutöeLi°
 = 
NULL
;

51 
Li°_t
 
	gxPídögRódyCoRoutöeLi°
;

54 
CRCB_t
 * 
	gpxCuºítCoRoutöe
 = 
NULL
;

55 
UBa£Ty≥_t
 
	guxT›CoRoutöeRódyPri‹ôy
 = 0;

56 
TickTy≥_t
 
	gxCoRoutöeTickCou¡
 = 0, 
	gxLa°TickCou¡
 = 0, 
	gxPas£dTicks
 = 0;

59 
	#c‹INITIAL_STATE
 ( 0 )

	)

68 
	#¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 ) \

	)

70 if–
	gpxCRCB
->
	guxPri‹ôy
 > 
	guxT›CoRoutöeRódyPri‹ôy
 ) \

72 
	guxT›CoRoutöeRódyPri‹ôy
 = 
pxCRCB
->
uxPri‹ôy
; \

74 
vLi°In£πEnd
––
Li°_t
 * ) &–
pxRódyCoRoutöeLi°s
[ 
pxCRCB
->
uxPri‹ôy
 ] ), &–pxCRCB->
xGíîicLi°Iãm
 ) ); \

81 
¥vInôüli£CoRoutöeLi°s
( );

89 
¥vCheckPídögRódyLi°
( );

99 
¥vCheckDñayedLi°
( );

103 
Ba£Ty≥_t
 
	$xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
,

104 
UBa£Ty≥_t
 
uxPri‹ôy
,

105 
UBa£Ty≥_t
 
uxIndex
 )

107 
Ba£Ty≥_t
 
xRëu∫
;

108 
CRCB_t
 * 
pxCoRoutöe
;

111 
pxCoRoutöe
 = ( 
CRCB_t
 * ) 
	`pvP‹tMÆloc
( ( CRCB_t ) );

113 if–
pxCoRoutöe
 )

117 if–
pxCuºítCoRoutöe
 =
NULL
 )

119 
pxCuºítCoRoutöe
 = 
pxCoRoutöe
;

120 
	`¥vInôüli£CoRoutöeLi°s
();

124 if–
uxPri‹ôy
 >
c⁄figMAX_CO_ROUTINE_PRIORITIES
 )

126 
uxPri‹ôy
 = 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - 1;

130 
pxCoRoutöe
->
uxSèã
 = 
c‹INITIAL_STATE
;

131 
pxCoRoutöe
->
uxPri‹ôy
 = uxPriority;

132 
pxCoRoutöe
->
uxIndex
 = uxIndex;

133 
pxCoRoutöe
->
pxCoRoutöeFun˘i⁄
 = 
pxCoRoutöeCode
;

136 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ) );

137 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ) );

142 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ),ÖxCoRoutine );

143 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ),ÖxCoRoutine );

146 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 ) );

150 
	`¥vAddCoRoutöeToRódyQueue
–
pxCoRoutöe
 );

152 
xRëu∫
 = 
pdPASS
;

156 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

159  
xRëu∫
;

160 
	}
}

163 
	$vCoRoutöeAddToDñayedLi°
–
TickTy≥_t
 
xTicksToDñay
,

164 
Li°_t
 * 
pxEvítLi°
 )

166 
TickTy≥_t
 
xTimeToWake
;

170 
xTimeToWake
 = 
xCoRoutöeTickCou¡
 + 
xTicksToDñay
;

175 –Ë
	`uxLi°Remove
––
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

178 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

180 if–
xTimeToWake
 < 
xCoRoutöeTickCou¡
 )

184 
	`vLi°In£π
––
Li°_t
 * ) 
pxOvîÊowDñayedCoRoutöeLi°
, ( 
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

190 
	`vLi°In£π
––
Li°_t
 * ) 
pxDñayedCoRoutöeLi°
, ( 
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

193 if–
pxEvítLi°
 )

197 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítCoRoutöe
->
xEvítLi°Iãm
 ) );

199 
	}
}

202 
	$¥vCheckPídögRódyLi°
( )

207  
	`li°LIST_IS_EMPTY
–&
xPídögRódyCoRoutöeLi°
 ) =
pdFALSE
 )

209 
CRCB_t
 * 
pxUnblockedCRCB
;

212 
	`p‹tDISABLE_INTERRUPTS
();

214 
pxUnblockedCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xPídögRódyCoRoutöeLi°
 ) );

215 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

217 
	`p‹tENABLE_INTERRUPTS
();

219 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xGíîicLi°Iãm
 ) );

220 
	`¥vAddCoRoutöeToRódyQueue
–
pxUnblockedCRCB
 );

222 
	}
}

225 
	$¥vCheckDñayedLi°
( )

227 
CRCB_t
 * 
pxCRCB
;

229 
xPas£dTicks
 = 
	`xTaskGëTickCou¡
(Ë- 
xLa°TickCou¡
;

231  
xPas£dTicks
 )

233 
xCoRoutöeTickCou¡
++;

234 
xPas£dTicks
--;

237 if–
xCoRoutöeTickCou¡
 == 0 )

239 
Li°_t
 * 
pxTemp
;

243 
pxTemp
 = 
pxDñayedCoRoutöeLi°
;

244 
pxDñayedCoRoutöeLi°
 = 
pxOvîÊowDñayedCoRoutöeLi°
;

245 
pxOvîÊowDñayedCoRoutöeLi°
 = 
pxTemp
;

249  
	`li°LIST_IS_EMPTY
–
pxDñayedCoRoutöeLi°
 ) =
pdFALSE
 )

251 
pxCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedCoRoutöeLi°
 );

253 if–
xCoRoutöeTickCou¡
 < 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) ) )

259 
	`p‹tDISABLE_INTERRUPTS
();

266 –Ë
	`uxLi°Remove
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) );

269 if–
pxCRCB
->
xEvítLi°Iãm
.
pxC⁄èöî
 )

271 –Ë
	`uxLi°Remove
–&–
pxCRCB
->
xEvítLi°Iãm
 ) );

274 
	`p‹tENABLE_INTERRUPTS
();

276 
	`¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 );

280 
xLa°TickCou¡
 = 
xCoRoutöeTickCou¡
;

281 
	}
}

284 
	$vCoRoutöeScheduÀ
( )

289 if–
pxDñayedCoRoutöeLi°
 !
NULL
 )

292 
	`¥vCheckPídögRódyLi°
();

295 
	`¥vCheckDñayedLi°
();

298  
	`li°LIST_IS_EMPTY
–&–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) ) )

300 if–
uxT›CoRoutöeRódyPri‹ôy
 == 0 )

306 --
uxT›CoRoutöeRódyPri‹ôy
;

311 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítCoRoutöe
, &–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) );

314 –
pxCuºítCoRoutöe
->
pxCoRoutöeFun˘i⁄
 )–pxCuºítCoRoutöe,ÖxCuºítCoRoutöe->
uxIndex
 );

316 
	}
}

319 
	$¥vInôüli£CoRoutöeLi°s
( )

321 
UBa£Ty≥_t
 
uxPri‹ôy
;

323  
uxPri‹ôy
 = 0; uxPri‹ôy < 
c⁄figMAX_CO_ROUTINE_PRIORITIES
; uxPriority++ )

325 
	`vLi°Inôüli£
––
Li°_t
 * ) &–
pxRódyCoRoutöeLi°s
[ 
uxPri‹ôy
 ] ) );

328 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xDñayedCoRoutöeLi°1
 );

329 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xDñayedCoRoutöeLi°2
 );

330 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xPídögRódyCoRoutöeLi°
 );

334 
pxDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°1
;

335 
pxOvîÊowDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°2
;

336 
	}
}

339 
Ba£Ty≥_t
 
	$xCoRoutöeRemoveFromEvítLi°
–c⁄° 
Li°_t
 * 
pxEvítLi°
 )

341 
CRCB_t
 * 
pxUnblockedCRCB
;

342 
Ba£Ty≥_t
 
xRëu∫
;

347 
pxUnblockedCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

348 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

349 
	`vLi°In£πEnd
––
Li°_t
 * ) &–
xPídögRódyCoRoutöeLi°
 ), &–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

351 if–
pxUnblockedCRCB
->
uxPri‹ôy
 >
pxCuºítCoRoutöe
->uxPriority )

353 
xRëu∫
 = 
pdTRUE
;

357 
xRëu∫
 = 
pdFALSE
;

360  
xRëu∫
;

361 
	}
}

	@event_groups.c

30 
	~<°dlib.h
>

35 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

38 
	~"FªeRTOS.h
"

39 
	~"èsk.h
"

40 
	~"timîs.h
"

41 
	~"evít_groups.h
"

47 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


52 #i‡
c⁄figUSE_16_BIT_TICKS
 == 1

53 
	#evítCLEAR_EVENTS_ON_EXIT_BIT
 0x0100U

	)

54 
	#evítUNBLOCKED_DUE_TO_BIT_SET
 0x0200U

	)

55 
	#evítWAIT_FOR_ALL_BITS
 0x0400U

	)

56 
	#evítEVENT_BITS_CONTROL_BYTES
 0xff00U

	)

58 
	#evítCLEAR_EVENTS_ON_EXIT_BIT
 0x01000000UL

	)

59 
	#evítUNBLOCKED_DUE_TO_BIT_SET
 0x02000000UL

	)

60 
	#evítWAIT_FOR_ALL_BITS
 0x04000000UL

	)

61 
	#evítEVENT_BITS_CONTROL_BYTES
 0xff000000UL

	)

64 
	sEvítGroupDef_t


66 
EvítBôs_t
 
	muxEvítBôs
;

67 
Li°_t
 
	mxTasksWaôögF‹Bôs
;

69 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

70 
UBa£Ty≥_t
 
	muxEvítGroupNumbî
;

73 #i‡––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

74 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

76 } 
	tEvítGroup_t
;

88 
Ba£Ty≥_t
 
	$¥vTe°WaôC⁄dôi⁄
–c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
,

89 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

90 c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
 ) 
PRIVILEGED_FUNCTION
;

94 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

96 
EvítGroupH™dÀ_t
 
	$xEvítGroupCª©eSètic
–
SèticEvítGroup_t
 * 
pxEvítGroupBuf„r
 )

98 
EvítGroup_t
 * 
pxEvítBôs
;

101 
	`c⁄figASSERT
–
pxEvítGroupBuf„r
 );

103 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

108 vﬁ©ûê
size_t
 
xSize
 = –
SèticEvítGroup_t
 );

109 
	`c⁄figASSERT
–
xSize
 =–
EvítGroup_t
 ) );

114 
pxEvítBôs
 = ( 
EvítGroup_t
 * ) 
pxEvítGroupBuf„r
;

116 if–
pxEvítBôs
 !
NULL
 )

118 
pxEvítBôs
->
uxEvítBôs
 = 0;

119 
	`vLi°Inôüli£
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ) );

121 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

126 
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 = 
pdTRUE
;

130 
	`åa˚EVENT_GROUP_CREATE
–
pxEvítBôs
 );

137 
	`åa˚EVENT_GROUP_CREATE_FAILED
();

140  
pxEvítBôs
;

141 
	}
}

146 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

148 
EvítGroupH™dÀ_t
 
	$xEvítGroupCª©e
( )

150 
EvítGroup_t
 * 
pxEvítBôs
;

165 
pxEvítBôs
 = ( 
EvítGroup_t
 * ) 
	`pvP‹tMÆloc
( ( EventGroup_t ) );

167 if–
pxEvítBôs
 !
NULL
 )

169 
pxEvítBôs
->
uxEvítBôs
 = 0;

170 
	`vLi°Inôüli£
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ) );

172 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

177 
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 = 
pdFALSE
;

181 
	`åa˚EVENT_GROUP_CREATE
–
pxEvítBôs
 );

185 
	`åa˚EVENT_GROUP_CREATE_FAILED
();

188  
pxEvítBôs
;

189 
	}
}

194 
EvítBôs_t
 
	$xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

195 c⁄° 
EvítBôs_t
 
uxBôsToSë
,

196 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

197 
TickTy≥_t
 
xTicksToWaô
 )

199 
EvítBôs_t
 
uxOrigöÆBôVÆue
, 
uxRëu∫
;

200 
EvítGroup_t
 * 
pxEvítBôs
 = 
xEvítGroup
;

201 
Ba£Ty≥_t
 
xAÃódyYõlded
;

202 
Ba£Ty≥_t
 
xTimeoutOccuºed
 = 
pdFALSE
;

204 
	`c⁄figASSERT
––
uxBôsToWaôF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

205 
	`c⁄figASSERT
–
uxBôsToWaôF‹
 != 0 );

206 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

208 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

212 
	`vTaskSu•ídAŒ
();

214 
uxOrigöÆBôVÆue
 = 
pxEvítBôs
->
uxEvítBôs
;

216 –Ë
	`xEvítGroupSëBôs
–
xEvítGroup
, 
uxBôsToSë
 );

218 if–––
uxOrigöÆBôVÆue
 | 
uxBôsToSë
 ) & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

221 
uxRëu∫
 = ( 
uxOrigöÆBôVÆue
 | 
uxBôsToSë
 );

225 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

227 
xTicksToWaô
 = 0;

231 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

233 
	`åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 );

238 
	`vTaskPœ˚OnUn‹dîedEvítLi°
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ), ( 
uxBôsToWaôF‹
 | 
evítCLEAR_EVENTS_ON_EXIT_BIT
 | 
evítWAIT_FOR_ALL_BITS
 ), 
xTicksToWaô
 );

244 
uxRëu∫
 = 0;

250 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

251 
xTimeoutOccuºed
 = 
pdTRUE
;

255 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

257 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

259 if–
xAÃódyYõlded
 =
pdFALSE
 )

261 
	`p‹tYIELD_WITHIN_API
();

265 
	`mtCOVERAGE_TEST_MARKER
();

272 
uxRëu∫
 = 
	`uxTaskRe£tEvítIãmVÆue
();

274 if––
uxRëu∫
 & 
evítUNBLOCKED_DUE_TO_BIT_SET
 ) =–
EvítBôs_t
 ) 0 )

277 
	`èskENTER_CRITICAL
();

279 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

285 if––
uxRëu∫
 & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

287 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

291 
	`mtCOVERAGE_TEST_MARKER
();

294 
	`èskEXIT_CRITICAL
();

296 
xTimeoutOccuºed
 = 
pdTRUE
;

305 
uxRëu∫
 &~
evítEVENT_BITS_CONTROL_BYTES
;

308 
	`åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 );

311 –Ë
xTimeoutOccuºed
;

313  
uxRëu∫
;

314 
	}
}

317 
EvítBôs_t
 
	$xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

318 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

319 c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
,

320 c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
,

321 
TickTy≥_t
 
xTicksToWaô
 )

323 
EvítGroup_t
 * 
pxEvítBôs
 = 
xEvítGroup
;

324 
EvítBôs_t
 
uxRëu∫
, 
uxC⁄åﬁBôs
 = 0;

325 
Ba£Ty≥_t
 
xWaôC⁄dôi⁄Më
, 
xAÃódyYõlded
;

326 
Ba£Ty≥_t
 
xTimeoutOccuºed
 = 
pdFALSE
;

330 
	`c⁄figASSERT
–
xEvítGroup
 );

331 
	`c⁄figASSERT
––
uxBôsToWaôF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

332 
	`c⁄figASSERT
–
uxBôsToWaôF‹
 != 0 );

333 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

335 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

339 
	`vTaskSu•ídAŒ
();

341 c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
 = 
pxEvítBôs
->
uxEvítBôs
;

344 
xWaôC⁄dôi⁄Më
 = 
	`¥vTe°WaôC⁄dôi⁄
–
uxCuºítEvítBôs
, 
uxBôsToWaôF‹
, 
xWaôF‹AŒBôs
 );

346 if–
xWaôC⁄dôi⁄Më
 !
pdFALSE
 )

350 
uxRëu∫
 = 
uxCuºítEvítBôs
;

351 
xTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

354 if–
xCÀ¨OnExô
 !
pdFALSE
 )

356 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

360 
	`mtCOVERAGE_TEST_MARKER
();

363 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

367 
uxRëu∫
 = 
uxCuºítEvítBôs
;

368 
xTimeoutOccuºed
 = 
pdTRUE
;

376 if–
xCÀ¨OnExô
 !
pdFALSE
 )

378 
uxC⁄åﬁBôs
 |
evítCLEAR_EVENTS_ON_EXIT_BIT
;

382 
	`mtCOVERAGE_TEST_MARKER
();

385 if–
xWaôF‹AŒBôs
 !
pdFALSE
 )

387 
uxC⁄åﬁBôs
 |
evítWAIT_FOR_ALL_BITS
;

391 
	`mtCOVERAGE_TEST_MARKER
();

397 
	`vTaskPœ˚OnUn‹dîedEvítLi°
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ), ( 
uxBôsToWaôF‹
 | 
uxC⁄åﬁBôs
 ), 
xTicksToWaô
 );

402 
uxRëu∫
 = 0;

404 
	`åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 );

407 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

409 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

411 if–
xAÃódyYõlded
 =
pdFALSE
 )

413 
	`p‹tYIELD_WITHIN_API
();

417 
	`mtCOVERAGE_TEST_MARKER
();

424 
uxRëu∫
 = 
	`uxTaskRe£tEvítIãmVÆue
();

426 if––
uxRëu∫
 & 
evítUNBLOCKED_DUE_TO_BIT_SET
 ) =–
EvítBôs_t
 ) 0 )

428 
	`èskENTER_CRITICAL
();

431 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

435 if–
	`¥vTe°WaôC⁄dôi⁄
–
uxRëu∫
, 
uxBôsToWaôF‹
, 
xWaôF‹AŒBôs
 ) !
pdFALSE
 )

437 if–
xCÀ¨OnExô
 !
pdFALSE
 )

439 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

443 
	`mtCOVERAGE_TEST_MARKER
();

448 
	`mtCOVERAGE_TEST_MARKER
();

451 
xTimeoutOccuºed
 = 
pdTRUE
;

453 
	`èskEXIT_CRITICAL
();

461 
uxRëu∫
 &~
evítEVENT_BITS_CONTROL_BYTES
;

464 
	`åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 );

467 –Ë
xTimeoutOccuºed
;

469  
uxRëu∫
;

470 
	}
}

473 
EvítBôs_t
 
	$xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

474 c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 )

476 
EvítGroup_t
 * 
pxEvítBôs
 = 
xEvítGroup
;

477 
EvítBôs_t
 
uxRëu∫
;

481 
	`c⁄figASSERT
–
xEvítGroup
 );

482 
	`c⁄figASSERT
––
uxBôsToCÀ¨
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

484 
	`èskENTER_CRITICAL
();

486 
	`åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 );

490 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

493 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToCÀ¨
;

495 
	`èskEXIT_CRITICAL
();

497  
uxRëu∫
;

498 
	}
}

501 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 1 ) )

503 
Ba£Ty≥_t
 
	$xEvítGroupCÀ¨BôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

504 c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 )

506 
Ba£Ty≥_t
 
xRëu∫
;

508 
	`åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 );

509 
xRëu∫
 = 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupCÀ¨BôsCÆlback
, ( * ) 
xEvítGroup
, ( 
uöt32_t
 ) 
uxBôsToCÀ¨
, 
NULL
 );

511  
xRëu∫
;

512 
	}
}

517 
EvítBôs_t
 
	$xEvítGroupGëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
 )

519 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

520 
EvítGroup_t
 c⁄° * c⁄° 
pxEvítBôs
 = 
xEvítGroup
;

521 
EvítBôs_t
 
uxRëu∫
;

523 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

525 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

527 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

529  
uxRëu∫
;

530 
	}
}

533 
EvítBôs_t
 
	$xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

534 c⁄° 
EvítBôs_t
 
uxBôsToSë
 )

536 
Li°Iãm_t
 * 
pxLi°Iãm
, * 
pxNext
;

537 
Li°Iãm_t
 c⁄° * 
pxLi°End
;

538 
Li°_t
 c⁄° * 
pxLi°
;

539 
EvítBôs_t
 
uxBôsToCÀ¨
 = 0, 
uxBôsWaôedF‹
, 
uxC⁄åﬁBôs
;

540 
EvítGroup_t
 * 
pxEvítBôs
 = 
xEvítGroup
;

541 
Ba£Ty≥_t
 
xM©chFound
 = 
pdFALSE
;

545 
	`c⁄figASSERT
–
xEvítGroup
 );

546 
	`c⁄figASSERT
––
uxBôsToSë
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

548 
pxLi°
 = &–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 );

549 
pxLi°End
 = 
	`li°GET_END_MARKER
–
pxLi°
 );

550 
	`vTaskSu•ídAŒ
();

552 
	`åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 );

554 
pxLi°Iãm
 = 
	`li°GET_HEAD_ENTRY
–
pxLi°
 );

557 
pxEvítBôs
->
uxEvítBôs
 |
uxBôsToSë
;

560  
pxLi°Iãm
 !
pxLi°End
 )

562 
pxNext
 = 
	`li°GET_NEXT
–
pxLi°Iãm
 );

563 
uxBôsWaôedF‹
 = 
	`li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 );

564 
xM©chFound
 = 
pdFALSE
;

567 
uxC⁄åﬁBôs
 = 
uxBôsWaôedF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
;

568 
uxBôsWaôedF‹
 &~
evítEVENT_BITS_CONTROL_BYTES
;

570 if––
uxC⁄åﬁBôs
 & 
evítWAIT_FOR_ALL_BITS
 ) =–
EvítBôs_t
 ) 0 )

573 if––
uxBôsWaôedF‹
 & 
pxEvítBôs
->
uxEvítBôs
 ) !–
EvítBôs_t
 ) 0 )

575 
xM©chFound
 = 
pdTRUE
;

579 
	`mtCOVERAGE_TEST_MARKER
();

582 if––
uxBôsWaôedF‹
 & 
pxEvítBôs
->
uxEvítBôs
 ) == uxBitsWaitedFor )

585 
xM©chFound
 = 
pdTRUE
;

592 if–
xM©chFound
 !
pdFALSE
 )

595 if––
uxC⁄åﬁBôs
 & 
evítCLEAR_EVENTS_ON_EXIT_BIT
 ) !–
EvítBôs_t
 ) 0 )

597 
uxBôsToCÀ¨
 |
uxBôsWaôedF‹
;

601 
	`mtCOVERAGE_TEST_MARKER
();

609 
	`vTaskRemoveFromUn‹dîedEvítLi°
–
pxLi°Iãm
, 
pxEvítBôs
->
uxEvítBôs
 | 
evítUNBLOCKED_DUE_TO_BIT_SET
 );

615 
pxLi°Iãm
 = 
pxNext
;

620 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToCÀ¨
;

622 –Ë
	`xTaskResumeAŒ
();

624  
pxEvítBôs
->
uxEvítBôs
;

625 
	}
}

628 
	$vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 )

630 
EvítGroup_t
 * 
pxEvítBôs
 = 
xEvítGroup
;

631 c⁄° 
Li°_t
 * 
pxTasksWaôögF‹Bôs
;

633 
	`c⁄figASSERT
–
pxEvítBôs
 );

635 
pxTasksWaôögF‹Bôs
 = &–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 );

637 
	`vTaskSu•ídAŒ
();

639 
	`åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 );

641  
	`li°CURRENT_LIST_LENGTH
–
pxTasksWaôögF‹Bôs
 ) > ( 
UBa£Ty≥_t
 ) 0 )

645 
	`c⁄figASSERT
–
pxTasksWaôögF‹Bôs
->
xLi°End
.
pxNext
 !–c⁄° 
Li°Iãm_t
 * ) &(ÖxTasksWaitingForBits->xListEnd ) );

646 
	`vTaskRemoveFromUn‹dîedEvítLi°
–
pxTasksWaôögF‹Bôs
->
xLi°End
.
pxNext
, 
evítUNBLOCKED_DUE_TO_BIT_SET
 );

649 –Ë
	`xTaskResumeAŒ
();

651 #i‡––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 0 ) )

655 
	`vP‹tFªe
–
pxEvítBôs
 );

657 #ñi‡––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

661 if–
pxEvítBôs
->
ucSètiˇŒyAŒoˇãd
 =–
uöt8_t
 ) 
pdFALSE
 )

663 
	`vP‹tFªe
–
pxEvítBôs
 );

667 
	`mtCOVERAGE_TEST_MARKER
();

671 
	}
}

676 
	$vEvítGroupSëBôsCÆlback
–* 
pvEvítGroup
,

677 c⁄° 
uöt32_t
 
ulBôsToSë
 )

679 –Ë
	`xEvítGroupSëBôs
–
pvEvítGroup
, ( 
EvítBôs_t
 ) 
ulBôsToSë
 );

680 
	}
}

685 
	$vEvítGroupCÀ¨BôsCÆlback
–* 
pvEvítGroup
,

686 c⁄° 
uöt32_t
 
ulBôsToCÀ¨
 )

688 –Ë
	`xEvítGroupCÀ¨Bôs
–
pvEvítGroup
, ( 
EvítBôs_t
 ) 
ulBôsToCÀ¨
 );

689 
	}
}

692 
Ba£Ty≥_t
 
	$¥vTe°WaôC⁄dôi⁄
–c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
,

693 c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
,

694 c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
 )

696 
Ba£Ty≥_t
 
xWaôC⁄dôi⁄Më
 = 
pdFALSE
;

698 if–
xWaôF‹AŒBôs
 =
pdFALSE
 )

702 if––
uxCuºítEvítBôs
 & 
uxBôsToWaôF‹
 ) !–
EvítBôs_t
 ) 0 )

704 
xWaôC⁄dôi⁄Më
 = 
pdTRUE
;

708 
	`mtCOVERAGE_TEST_MARKER
();

715 if––
uxCuºítEvítBôs
 & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

717 
xWaôC⁄dôi⁄Më
 = 
pdTRUE
;

721 
	`mtCOVERAGE_TEST_MARKER
();

725  
xWaôC⁄dôi⁄Më
;

726 
	}
}

729 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 1 ) )

731 
Ba£Ty≥_t
 
	$xEvítGroupSëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
,

732 c⁄° 
EvítBôs_t
 
uxBôsToSë
,

733 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

735 
Ba£Ty≥_t
 
xRëu∫
;

737 
	`åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 );

738 
xRëu∫
 = 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) 
xEvítGroup
, ( 
uöt32_t
 ) 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 );

740  
xRëu∫
;

741 
	}
}

746 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

748 
UBa£Ty≥_t
 
	$uxEvítGroupGëNumbî
–* 
xEvítGroup
 )

750 
UBa£Ty≥_t
 
xRëu∫
;

751 
EvítGroup_t
 c⁄° * 
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

753 if–
xEvítGroup
 =
NULL
 )

755 
xRëu∫
 = 0;

759 
xRëu∫
 = 
pxEvítBôs
->
uxEvítGroupNumbî
;

762  
xRëu∫
;

763 
	}
}

768 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

770 
	$vEvítGroupSëNumbî
–* 
xEvítGroup
,

771 
UBa£Ty≥_t
 
uxEvítGroupNumbî
 )

773 ––
EvítGroup_t
 * ) 
xEvítGroup
 )->
uxEvítGroupNumbî
 = uxEventGroupNumber;

774 
	}
}

	@list.c

30 
	~<°dlib.h
>

35 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

37 
	~"FªeRTOS.h
"

38 
	~"li°.h
"

44 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


50 
	$vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 )

55 
pxLi°
->
pxIndex
 = ( 
Li°Iãm_t
 * ) &–pxLi°->
xLi°End
 );

59 
pxLi°
->
xLi°End
.
xIãmVÆue
 = 
p‹tMAX_DELAY
;

63 
pxLi°
->
xLi°End
.
pxNext
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

64 
pxLi°
->
xLi°End
.
pxPªvious
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

66 
pxLi°
->
uxNumbîOfIãms
 = ( 
UBa£Ty≥_t
 ) 0U;

70 
	`li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 );

71 
	`li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 );

72 
	}
}

75 
	$vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 )

78 
pxIãm
->
pxC⁄èöî
 = 
NULL
;

82 
	`li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

83 
	`li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

84 
	}
}

87 
	$vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
,

88 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

90 
Li°Iãm_t
 * c⁄° 
pxIndex
 = 
pxLi°
->pxIndex;

95 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

96 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

101 
pxNewLi°Iãm
->
pxNext
 = 
pxIndex
;

102 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIndex
->pxPrevious;

105 
	`mtCOVERAGE_TEST_DELAY
();

107 
pxIndex
->
pxPªvious
->
pxNext
 = 
pxNewLi°Iãm
;

108 
pxIndex
->
pxPªvious
 = 
pxNewLi°Iãm
;

111 
pxNewLi°Iãm
->
pxC⁄èöî
 = 
pxLi°
;

113 –
pxLi°
->
uxNumbîOfIãms
 )++;

114 
	}
}

117 
	$vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
,

118 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

120 
Li°Iãm_t
 * 
pxIãøt‹
;

121 c⁄° 
TickTy≥_t
 
xVÆueOfIn£πi⁄
 = 
pxNewLi°Iãm
->
xIãmVÆue
;

126 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

127 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

137 if–
xVÆueOfIn£πi⁄
 =
p‹tMAX_DELAY
 )

139 
pxIãøt‹
 = 
pxLi°
->
xLi°End
.
pxPªvious
;

168  
pxIãøt‹
 = ( 
Li°Iãm_t
 * ) &–
pxLi°
->
xLi°End
 );ÖxIãøt‹->
pxNext
->
xIãmVÆue
 <
xVÆueOfIn£πi⁄
;ÖxIterator =ÖxIterator->pxNext )

175 
pxNewLi°Iãm
->
pxNext
 = 
pxIãøt‹
->pxNext;

176 
pxNewLi°Iãm
->
pxNext
->
pxPªvious
 =ÖxNewListItem;

177 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIãøt‹
;

178 
pxIãøt‹
->
pxNext
 = 
pxNewLi°Iãm
;

182 
pxNewLi°Iãm
->
pxC⁄èöî
 = 
pxLi°
;

184 –
pxLi°
->
uxNumbîOfIãms
 )++;

185 
	}
}

188 
UBa£Ty≥_t
 
	$uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 )

192 
Li°_t
 * c⁄° 
pxLi°
 = 
pxIãmToRemove
->
pxC⁄èöî
;

194 
pxIãmToRemove
->
pxNext
->
pxPªvious
 =ÖxItemToRemove->pxPrevious;

195 
pxIãmToRemove
->
pxPªvious
->
pxNext
 =ÖxItemToRemove->pxNext;

198 
	`mtCOVERAGE_TEST_DELAY
();

201 if–
pxLi°
->
pxIndex
 =
pxIãmToRemove
 )

203 
pxLi°
->
pxIndex
 = 
pxIãmToRemove
->
pxPªvious
;

207 
	`mtCOVERAGE_TEST_MARKER
();

210 
pxIãmToRemove
->
pxC⁄èöî
 = 
NULL
;

211 –
pxLi°
->
uxNumbîOfIãms
 )--;

213  
pxLi°
->
uxNumbîOfIãms
;

214 
	}
}

	@queue.c

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

35 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

37 
	~"FªeRTOS.h
"

38 
	~"èsk.h
"

39 
	~"queue.h
"

41 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

42 
	~"¸outöe.h
"

49 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


53 
	#queueUNLOCKED
 ( ( 
öt8_t
 ) -1 )

	)

54 
	#queueLOCKED_UNMODIFIED
 ( ( 
öt8_t
 ) 0 )

	)

55 
	#queueINT8_MAX
 ( ( 
öt8_t
 ) 127 )

	)

66 
	#uxQueueTy≥
 
pcHód


	)

67 
	#queueQUEUE_IS_MUTEX
 
NULL


	)

69 
	sQueuePoöãrs


71 
öt8_t
 * 
	mpcTaû
;

72 
öt8_t
 * 
	mpcRódFrom
;

73 } 
	tQueuePoöãrs_t
;

75 
	sSem≠h‹eD©a


77 
TaskH™dÀ_t
 
	mxMuãxHﬁdî
;

78 
UBa£Ty≥_t
 
	muxRecursiveCÆlCou¡
;

79 } 
	tSem≠h‹eD©a_t
;

83 
	#queueSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
UBa£Ty≥_t
 ) 0 )

	)

84 
	#queueMUTEX_GIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

86 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

90 
	#queueYIELD_IF_USING_PREEMPTION
()

	)

92 
	#queueYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

100 
	sQueueDeföôi⁄


102 
öt8_t
 * 
	mpcHód
;

103 
öt8_t
 * 
	mpcWrôeTo
;

107 
QueuePoöãrs_t
 
	mxQueue
;

108 
Sem≠h‹eD©a_t
 
	mxSem≠h‹e
;

109 } 
	mu
;

111 
Li°_t
 
	mxTasksWaôögToSíd
;

112 
Li°_t
 
	mxTasksWaôögToRe˚ive
;

114 vﬁ©ûê
UBa£Ty≥_t
 
	muxMesßgesWaôög
;

115 
UBa£Ty≥_t
 
	muxLígth
;

116 
UBa£Ty≥_t
 
	muxIãmSize
;

118 vﬁ©ûê
öt8_t
 
	mcRxLock
;

119 vﬁ©ûê
öt8_t
 
	mcTxLock
;

121 #i‡––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

122 
uöt8_t
 
	mucSètiˇŒyAŒoˇãd
;

125 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

126 
QueueDeföôi⁄
 * 
	mpxQueueSëC⁄èöî
;

129 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

130 
UBa£Ty≥_t
 
	muxQueueNumbî
;

131 
uöt8_t
 
	mucQueueTy≥
;

133 } 
	txQUEUE
;

137 
xQUEUE
 
	tQueue_t
;

145 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

150 
	sQUEUE_REGISTRY_ITEM


152 c⁄° * 
	mpcQueueName
;

153 
QueueH™dÀ_t
 
	mxH™dÀ
;

154 } 
	txQueueRegi°ryIãm
;

159 
xQueueRegi°ryIãm
 
	tQueueRegi°ryIãm_t
;

164 
PRIVILEGED_DATA
 
QueueRegi°ryIãm_t
 
	gxQueueRegi°ry
[ 
c⁄figQUEUE_REGISTRY_SIZE
 ];

176 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

183 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 * 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

190 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 * 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

196 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
,

197 c⁄° * 
pvIãmToQueue
,

198 c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

203 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
,

204 * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

206 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

212 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

219 
	$¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

220 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

221 
uöt8_t
 * 
pucQueueSt‹age
,

222 c⁄° 
uöt8_t
 
ucQueueTy≥
,

223 
Queue_t
 * 
pxNewQueue
 ) 
PRIVILEGED_FUNCTION
;

230 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

231 
	$¥vInôüli£Muãx
–
Queue_t
 * 
pxNewQueue
 ) 
PRIVILEGED_FUNCTION
;

234 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

243 
UBa£Ty≥_t
 
	$¥vGëDisöhîôPri‹ôyA·îTimeout
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

251 
	#¥vLockQueue
–
pxQueue
 ) \

	)

252 
	`èskENTER_CRITICAL
(); \

254 if––
pxQueue
 )->
cRxLock
 =
queueUNLOCKED
 ) \

256 –
pxQueue
 )->
cRxLock
 = 
queueLOCKED_UNMODIFIED
; \

258 if––
pxQueue
 )->
cTxLock
 =
queueUNLOCKED
 ) \

260 –
pxQueue
 )->
cTxLock
 = 
queueLOCKED_UNMODIFIED
; \

262 
	}
} \

263 
	$èskEXIT_CRITICAL
()

270 
	#¥vIn¸emítQueueTxLock
–
pxQueue
, 
cTxLock
 ) \

	)

272 c⁄° 
UBa£Ty≥_t
 
uxNumbîOfTasks
 = 
	`uxTaskGëNumbîOfTasks
(); \

273 if––
UBa£Ty≥_t
 ) ( 
cTxLock
 ) < 
uxNumbîOfTasks
 ) \

275 
	`c⁄figASSERT
––
cTxLock
 ) !
queueINT8_MAX
 ); \

276 –
pxQueue
 )->
cTxLock
 = ( 
öt8_t
 ) ( ( cTxLock ) + ( int8_t ) 1 ); \

278 
	}
}

285 
	#¥vIn¸emítQueueRxLock
–
pxQueue
, 
cRxLock
 ) \

	)

287 c⁄° 
UBa£Ty≥_t
 
	guxNumbîOfTasks
 = 
uxTaskGëNumbîOfTasks
(); \

288 if––
	gUBa£Ty≥_t
 ) ( 
	gcRxLock
 ) < 
	guxNumbîOfTasks
 ) \

290 
c⁄figASSERT
––
cRxLock
 ) !
queueINT8_MAX
 ); \

291 –
	gpxQueue
 )->
	gcRxLock
 = ( 
öt8_t
 ) ( ( 
cRxLock
 ) + ( int8_t ) 1 ); \

296 
Ba£Ty≥_t
 
	$xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
,

297 
Ba£Ty≥_t
 
xNewQueue
 )

299 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

300 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

302 
	`c⁄figASSERT
–
pxQueue
 );

304 if––
pxQueue
 !
NULL
 ) &&

305 –
pxQueue
->
uxLígth
 >= 1U ) &&

307 ––
SIZE_MAX
 / 
pxQueue
->
uxLígth
 ) >pxQueue->
uxIãmSize
 ) )

309 
	`èskENTER_CRITICAL
();

311 
pxQueue
->
u
.
xQueue
.
pcTaû
 =ÖxQueue->
pcHód
 + (ÖxQueue->
uxLígth
 *ÖxQueue->
uxIãmSize
 );

312 
pxQueue
->
uxMesßgesWaôög
 = ( 
UBa£Ty≥_t
 ) 0U;

313 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

314 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
 + ( (ÖxQueue->
uxLígth
 - 1U ) *ÖxQueue->
uxIãmSize
 );

315 
pxQueue
->
cRxLock
 = 
queueUNLOCKED
;

316 
pxQueue
->
cTxLock
 = 
queueUNLOCKED
;

318 if–
xNewQueue
 =
pdFALSE
 )

325 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

327 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

329 
	`queueYIELD_IF_USING_PREEMPTION
();

333 
	`mtCOVERAGE_TEST_MARKER
();

338 
	`mtCOVERAGE_TEST_MARKER
();

344 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToSíd
 ) );

345 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

348 
	`èskEXIT_CRITICAL
();

352 
xRëu∫
 = 
pdFAIL
;

355 
	`c⁄figASSERT
–
xRëu∫
 !
pdFAIL
 );

359  
xRëu∫
;

360 
	}
}

363 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

365 
QueueH™dÀ_t
 
	$xQueueGíîicCª©eSètic
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

366 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

367 
uöt8_t
 * 
pucQueueSt‹age
,

368 
SèticQueue_t
 * 
pxSèticQueue
,

369 c⁄° 
uöt8_t
 
ucQueueTy≥
 )

371 
Queue_t
 * 
pxNewQueue
 = 
NULL
;

375 
	`c⁄figASSERT
–
pxSèticQueue
 );

377 if––
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 ) &&

378 –
pxSèticQueue
 !
NULL
 ) &&

382 –!––
pucQueueSt‹age
 !
NULL
 ) && ( 
uxIãmSize
 == 0 ) ) ) &&

383 –!––
pucQueueSt‹age
 =
NULL
 ) && ( 
uxIãmSize
 != 0 ) ) ) )

385 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

390 vﬁ©ûê
size_t
 
xSize
 = –
SèticQueue_t
 );

393 
	`c⁄figASSERT
–
xSize
 =–
Queue_t
 ) );

394 –Ë
xSize
;

401 
pxNewQueue
 = ( 
Queue_t
 * ) 
pxSèticQueue
;

403 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

408 
pxNewQueue
->
ucSètiˇŒyAŒoˇãd
 = 
pdTRUE
;

412 
	`¥vInôüli£NewQueue
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
ucQueueTy≥
, 
pxNewQueue
 );

416 
	`c⁄figASSERT
–
pxNewQueue
 );

417 
	`mtCOVERAGE_TEST_MARKER
();

420  
pxNewQueue
;

421 
	}
}

426 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

428 
QueueH™dÀ_t
 
	$xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

429 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

430 c⁄° 
uöt8_t
 
ucQueueTy≥
 )

432 
Queue_t
 * 
pxNewQueue
 = 
NULL
;

433 
size_t
 
xQueueSizeInByãs
;

434 
uöt8_t
 * 
pucQueueSt‹age
;

436 if––
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 ) &&

438 ––
SIZE_MAX
 / 
uxQueueLígth
 ) >
uxIãmSize
 ) &&

440 ––
SIZE_MAX
 - –
Queue_t
 ) ) >–
uxQueueLígth
 * 
uxIãmSize
 ) ) )

445 
xQueueSizeInByãs
 = ( 
size_t
 ) ( 
uxQueueLígth
 * 
uxIãmSize
 );

456 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`pvP‹tMÆloc
––Queue_àË+ 
xQueueSizeInByãs
 );

458 if–
pxNewQueue
 !
NULL
 )

462 
pucQueueSt‹age
 = ( 
uöt8_t
 * ) 
pxNewQueue
;

463 
pucQueueSt‹age
 +–
Queue_t
 );

465 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

470 
pxNewQueue
->
ucSètiˇŒyAŒoˇãd
 = 
pdFALSE
;

474 
	`¥vInôüli£NewQueue
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
ucQueueTy≥
, 
pxNewQueue
 );

478 
	`åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 );

479 
	`mtCOVERAGE_TEST_MARKER
();

484 
	`c⁄figASSERT
–
pxNewQueue
 );

485 
	`mtCOVERAGE_TEST_MARKER
();

488  
pxNewQueue
;

489 
	}
}

494 
	$¥vInôüli£NewQueue
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
,

495 c⁄° 
UBa£Ty≥_t
 
uxIãmSize
,

496 
uöt8_t
 * 
pucQueueSt‹age
,

497 c⁄° 
uöt8_t
 
ucQueueTy≥
,

498 
Queue_t
 * 
pxNewQueue
 )

502 –Ë
ucQueueTy≥
;

504 if–
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

510 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * )ÖxNewQueue;

515 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * ) 
pucQueueSt‹age
;

520 
pxNewQueue
->
uxLígth
 = 
uxQueueLígth
;

521 
pxNewQueue
->
uxIãmSize
 = uxItemSize;

522 –Ë
	`xQueueGíîicRe£t
–
pxNewQueue
, 
pdTRUE
 );

524 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

526 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

530 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

532 
pxNewQueue
->
pxQueueSëC⁄èöî
 = 
NULL
;

536 
	`åa˚QUEUE_CREATE
–
pxNewQueue
 );

537 
	}
}

540 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

542 
	$¥vInôüli£Muãx
–
Queue_t
 * 
pxNewQueue
 )

544 if–
pxNewQueue
 !
NULL
 )

550 
pxNewQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 = 
NULL
;

551 
pxNewQueue
->
uxQueueTy≥
 = 
queueQUEUE_IS_MUTEX
;

554 
pxNewQueue
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 = 0;

556 
	`åa˚CREATE_MUTEX
–
pxNewQueue
 );

559 –Ë
	`xQueueGíîicSíd
–
pxNewQueue
, 
NULL
, ( 
TickTy≥_t
 ) 0U, 
queueSEND_TO_BACK
 );

563 
	`åa˚CREATE_MUTEX_FAILED
();

565 
	}
}

570 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

572 
QueueH™dÀ_t
 
	$xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 )

574 
QueueH™dÀ_t
 
xNewQueue
;

575 c⁄° 
UBa£Ty≥_t
 
uxMuãxLígth
 = ( UBa£Ty≥_àË1, 
uxMuãxSize
 = ( UBaseType_t ) 0;

577 
xNewQueue
 = 
	`xQueueGíîicCª©e
–
uxMuãxLígth
, 
uxMuãxSize
, 
ucQueueTy≥
 );

578 
	`¥vInôüli£Muãx
––
Queue_t
 * ) 
xNewQueue
 );

580  
xNewQueue
;

581 
	}
}

586 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

588 
QueueH™dÀ_t
 
	$xQueueCª©eMuãxSètic
–c⁄° 
uöt8_t
 
ucQueueTy≥
,

589 
SèticQueue_t
 * 
pxSèticQueue
 )

591 
QueueH™dÀ_t
 
xNewQueue
;

592 c⁄° 
UBa£Ty≥_t
 
uxMuãxLígth
 = ( UBa£Ty≥_àË1, 
uxMuãxSize
 = ( UBaseType_t ) 0;

596 –Ë
ucQueueTy≥
;

598 
xNewQueue
 = 
	`xQueueGíîicCª©eSètic
–
uxMuãxLígth
, 
uxMuãxSize
, 
NULL
, 
pxSèticQueue
, 
ucQueueTy≥
 );

599 
	`¥vInôüli£Muãx
––
Queue_t
 * ) 
xNewQueue
 );

601  
xNewQueue
;

602 
	}
}

607 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 == 1 ) )

609 
TaskH™dÀ_t
 
	$xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 )

611 
TaskH™dÀ_t
 
pxRëu∫
;

612 
Queue_t
 * c⁄° 
pxSem≠h‹e
 = ( Queue_à* ) 
xSem≠h‹e
;

614 
	`c⁄figASSERT
–
xSem≠h‹e
 );

621 
	`èskENTER_CRITICAL
();

623 if–
pxSem≠h‹e
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

625 
pxRëu∫
 = 
pxSem≠h‹e
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
;

629 
pxRëu∫
 = 
NULL
;

632 
	`èskEXIT_CRITICAL
();

634  
pxRëu∫
;

635 
	}
}

640 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 == 1 ) )

642 
TaskH™dÀ_t
 
	$xQueueGëMuãxHﬁdîFromISR
–
QueueH™dÀ_t
 
xSem≠h‹e
 )

644 
TaskH™dÀ_t
 
pxRëu∫
;

646 
	`c⁄figASSERT
–
xSem≠h‹e
 );

651 if–––
Queue_t
 * ) 
xSem≠h‹e
 )->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

653 
pxRëu∫
 = ( ( 
Queue_t
 * ) 
xSem≠h‹e
 )->
u
.xSem≠h‹e.
xMuãxHﬁdî
;

657 
pxRëu∫
 = 
NULL
;

660  
pxRëu∫
;

661 
	}
}

666 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

668 
Ba£Ty≥_t
 
	$xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
 )

670 
Ba£Ty≥_t
 
xRëu∫
;

671 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

673 
	`c⁄figASSERT
–
pxMuãx
 );

681 if–
pxMuãx
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

683 
	`åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 );

690 –
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 )--;

693 if–
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 =–
UBa£Ty≥_t
 ) 0 )

697 –Ë
	`xQueueGíîicSíd
–
pxMuãx
, 
NULL
, 
queueMUTEX_GIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 );

701 
	`mtCOVERAGE_TEST_MARKER
();

704 
xRëu∫
 = 
pdPASS
;

710 
xRëu∫
 = 
pdFAIL
;

712 
	`åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

715  
xRëu∫
;

716 
	}
}

721 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

723 
Ba£Ty≥_t
 
	$xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
,

724 
TickTy≥_t
 
xTicksToWaô
 )

726 
Ba£Ty≥_t
 
xRëu∫
;

727 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

729 
	`c⁄figASSERT
–
pxMuãx
 );

734 
	`åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 );

736 if–
pxMuãx
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

738 –
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 )++;

739 
xRëu∫
 = 
pdPASS
;

743 
xRëu∫
 = 
	`xQueueSem≠h‹eTake
–
pxMuãx
, 
xTicksToWaô
 );

748 if–
xRëu∫
 !
pdFAIL
 )

750 –
pxMuãx
->
u
.
xSem≠h‹e
.
uxRecursiveCÆlCou¡
 )++;

754 
	`åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

758  
xRëu∫
;

759 
	}
}

764 #i‡––
c⁄figUSE_COUNTING_SEMAPHORES
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

766 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹eSètic
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
,

767 c⁄° 
UBa£Ty≥_t
 
uxInôülCou¡
,

768 
SèticQueue_t
 * 
pxSèticQueue
 )

770 
QueueH™dÀ_t
 
xH™dÀ
 = 
NULL
;

772 if––
uxMaxCou¡
 != 0 ) &&

773 –
uxInôülCou¡
 <
uxMaxCou¡
 ) )

775 
xH™dÀ
 = 
	`xQueueGíîicCª©eSètic
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
NULL
, 
pxSèticQueue
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

777 if–
xH™dÀ
 !
NULL
 )

779 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

781 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

785 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

790 
	`c⁄figASSERT
–
xH™dÀ
 );

791 
	`mtCOVERAGE_TEST_MARKER
();

794  
xH™dÀ
;

795 
	}
}

800 #i‡––
c⁄figUSE_COUNTING_SEMAPHORES
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

802 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
,

803 c⁄° 
UBa£Ty≥_t
 
uxInôülCou¡
 )

805 
QueueH™dÀ_t
 
xH™dÀ
 = 
NULL
;

807 if––
uxMaxCou¡
 != 0 ) &&

808 –
uxInôülCou¡
 <
uxMaxCou¡
 ) )

810 
xH™dÀ
 = 
	`xQueueGíîicCª©e
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

812 if–
xH™dÀ
 !
NULL
 )

814 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

816 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

820 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

825 
	`c⁄figASSERT
–
xH™dÀ
 );

826 
	`mtCOVERAGE_TEST_MARKER
();

829  
xH™dÀ
;

830 
	}
}

835 
Ba£Ty≥_t
 
	$xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
,

836 c⁄° * c⁄° 
pvIãmToQueue
,

837 
TickTy≥_t
 
xTicksToWaô
,

838 c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

840 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
, 
xYõldRequúed
;

841 
TimeOut_t
 
xTimeOut
;

842 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

844 
	`c⁄figASSERT
–
pxQueue
 );

845 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

846 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

847 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

849 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

858 
	`èskENTER_CRITICAL
();

864 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

866 
	`åa˚QUEUE_SEND
–
pxQueue
 );

868 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

870 c⁄° 
UBa£Ty≥_t
 
uxPªviousMesßgesWaôög
 = 
pxQueue
->
uxMesßgesWaôög
;

872 
xYõldRequúed
 = 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

874 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

876 if––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
uxPªviousMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 ) )

881 
	`mtCOVERAGE_TEST_MARKER
();

883 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

888 
	`queueYIELD_IF_USING_PREEMPTION
();

892 
	`mtCOVERAGE_TEST_MARKER
();

899 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

901 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

907 
	`queueYIELD_IF_USING_PREEMPTION
();

911 
	`mtCOVERAGE_TEST_MARKER
();

914 if–
xYõldRequúed
 !
pdFALSE
 )

920 
	`queueYIELD_IF_USING_PREEMPTION
();

924 
	`mtCOVERAGE_TEST_MARKER
();

930 
xYõldRequúed
 = 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

934 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

936 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

942 
	`queueYIELD_IF_USING_PREEMPTION
();

946 
	`mtCOVERAGE_TEST_MARKER
();

949 if–
xYõldRequúed
 !
pdFALSE
 )

955 
	`queueYIELD_IF_USING_PREEMPTION
();

959 
	`mtCOVERAGE_TEST_MARKER
();

964 
	`èskEXIT_CRITICAL
();

965  
pdPASS
;

969 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

973 
	`èskEXIT_CRITICAL
();

977 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

978  
îrQUEUE_FULL
;

980 if–
xE¡ryTimeSë
 =
pdFALSE
 )

984 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

985 
xE¡ryTimeSë
 = 
pdTRUE
;

990 
	`mtCOVERAGE_TEST_MARKER
();

994 
	`èskEXIT_CRITICAL
();

999 
	`vTaskSu•ídAŒ
();

1000 
	`¥vLockQueue
–
pxQueue
 );

1003 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1005 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

1007 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

1008 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

1015 
	`¥vU∆ockQueue
–
pxQueue
 );

1022 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1024 
	`p‹tYIELD_WITHIN_API
();

1030 
	`¥vU∆ockQueue
–
pxQueue
 );

1031 –Ë
	`xTaskResumeAŒ
();

1037 
	`¥vU∆ockQueue
–
pxQueue
 );

1038 –Ë
	`xTaskResumeAŒ
();

1040 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

1041  
îrQUEUE_FULL
;

1044 
	}
}

1047 
Ba£Ty≥_t
 
	$xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
,

1048 c⁄° * c⁄° 
pvIãmToQueue
,

1049 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
,

1050 c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

1052 
Ba£Ty≥_t
 
xRëu∫
;

1053 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1054 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1056 
	`c⁄figASSERT
–
pxQueue
 );

1057 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1058 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

1074 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1081 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1083 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

1085 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

1086 c⁄° 
UBa£Ty≥_t
 
uxPªviousMesßgesWaôög
 = 
pxQueue
->
uxMesßgesWaôög
;

1088 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

1095 –Ë
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

1099 if–
cTxLock
 =
queueUNLOCKED
 )

1101 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1103 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1105 if––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
uxPªviousMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 ) )

1110 
	`mtCOVERAGE_TEST_MARKER
();

1112 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

1117 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1119 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1123 
	`mtCOVERAGE_TEST_MARKER
();

1128 
	`mtCOVERAGE_TEST_MARKER
();

1133 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1135 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1139 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1141 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1145 
	`mtCOVERAGE_TEST_MARKER
();

1150 
	`mtCOVERAGE_TEST_MARKER
();

1155 
	`mtCOVERAGE_TEST_MARKER
();

1161 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1163 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1167 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1169 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1173 
	`mtCOVERAGE_TEST_MARKER
();

1178 
	`mtCOVERAGE_TEST_MARKER
();

1183 
	`mtCOVERAGE_TEST_MARKER
();

1187 –Ë
uxPªviousMesßgesWaôög
;

1195 
	`¥vIn¸emítQueueTxLock
–
pxQueue
, 
cTxLock
 );

1198 
xRëu∫
 = 
pdPASS
;

1202 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1203 
xRëu∫
 = 
îrQUEUE_FULL
;

1206 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1208  
xRëu∫
;

1209 
	}
}

1212 
Ba£Ty≥_t
 
	$xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
,

1213 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1215 
Ba£Ty≥_t
 
xRëu∫
;

1216 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1217 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1225 
	`c⁄figASSERT
–
pxQueue
 );

1229 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 == 0 );

1234 
	`c⁄figASSERT
–!––
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 ) && (ÖxQueue->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 !
NULL
 ) ) );

1250 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1252 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1254 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1259 if–
uxMesßgesWaôög
 < 
pxQueue
->
uxLígth
 )

1261 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

1263 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

1271 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög + ( 
UBa£Ty≥_t
 ) 1;

1275 if–
cTxLock
 =
queueUNLOCKED
 )

1277 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1279 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1281 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

1286 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1288 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1292 
	`mtCOVERAGE_TEST_MARKER
();

1297 
	`mtCOVERAGE_TEST_MARKER
();

1302 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1304 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1308 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1310 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1314 
	`mtCOVERAGE_TEST_MARKER
();

1319 
	`mtCOVERAGE_TEST_MARKER
();

1324 
	`mtCOVERAGE_TEST_MARKER
();

1330 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1332 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1336 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1338 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1342 
	`mtCOVERAGE_TEST_MARKER
();

1347 
	`mtCOVERAGE_TEST_MARKER
();

1352 
	`mtCOVERAGE_TEST_MARKER
();

1361 
	`¥vIn¸emítQueueTxLock
–
pxQueue
, 
cTxLock
 );

1364 
xRëu∫
 = 
pdPASS
;

1368 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1369 
xRëu∫
 = 
îrQUEUE_FULL
;

1372 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1374  
xRëu∫
;

1375 
	}
}

1378 
Ba£Ty≥_t
 
	$xQueueRe˚ive
–
QueueH™dÀ_t
 
xQueue
,

1379 * c⁄° 
pvBuf„r
,

1380 
TickTy≥_t
 
xTicksToWaô
 )

1382 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1383 
TimeOut_t
 
xTimeOut
;

1384 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1387 
	`c⁄figASSERT
––
pxQueue
 ) );

1391 
	`c⁄figASSERT
–!–––
pvBuf„r
 ) =
NULL
 ) && ( ( 
pxQueue
 )->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1394 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1396 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1405 
	`èskENTER_CRITICAL
();

1407 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1411 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1414 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1415 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

1416 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög - ( 
UBa£Ty≥_t
 ) 1;

1421 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1423 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1425 
	`queueYIELD_IF_USING_PREEMPTION
();

1429 
	`mtCOVERAGE_TEST_MARKER
();

1434 
	`mtCOVERAGE_TEST_MARKER
();

1437 
	`èskEXIT_CRITICAL
();

1438  
pdPASS
;

1442 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1446 
	`èskEXIT_CRITICAL
();

1447 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1448  
îrQUEUE_EMPTY
;

1450 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1454 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1455 
xE¡ryTimeSë
 = 
pdTRUE
;

1460 
	`mtCOVERAGE_TEST_MARKER
();

1464 
	`èskEXIT_CRITICAL
();

1469 
	`vTaskSu•ídAŒ
();

1470 
	`¥vLockQueue
–
pxQueue
 );

1473 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1477 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1479 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1480 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1481 
	`¥vU∆ockQueue
–
pxQueue
 );

1483 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1485 
	`p‹tYIELD_WITHIN_API
();

1489 
	`mtCOVERAGE_TEST_MARKER
();

1496 
	`¥vU∆ockQueue
–
pxQueue
 );

1497 –Ë
	`xTaskResumeAŒ
();

1504 
	`¥vU∆ockQueue
–
pxQueue
 );

1505 –Ë
	`xTaskResumeAŒ
();

1507 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1509 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1510  
îrQUEUE_EMPTY
;

1514 
	`mtCOVERAGE_TEST_MARKER
();

1518 
	}
}

1521 
Ba£Ty≥_t
 
	$xQueueSem≠h‹eTake
–
QueueH™dÀ_t
 
xQueue
,

1522 
TickTy≥_t
 
xTicksToWaô
 )

1524 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1525 
TimeOut_t
 
xTimeOut
;

1526 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1528 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1529 
Ba£Ty≥_t
 
xInhîô™˚Occuºed
 = 
pdFALSE
;

1533 
	`c⁄figASSERT
––
pxQueue
 ) );

1537 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 == 0 );

1540 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1542 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1551 
	`èskENTER_CRITICAL
();

1555 c⁄° 
UBa£Ty≥_t
 
uxSem≠h‹eCou¡
 = 
pxQueue
->
uxMesßgesWaôög
;

1559 if–
uxSem≠h‹eCou¡
 > ( 
UBa£Ty≥_t
 ) 0 )

1561 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

1565 
pxQueue
->
uxMesßgesWaôög
 = 
uxSem≠h‹eCou¡
 - ( 
UBa£Ty≥_t
 ) 1;

1567 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1569 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1573 
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 = 
	`pvTaskIn¸emítMuãxHñdCou¡
();

1577 
	`mtCOVERAGE_TEST_MARKER
();

1584 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1586 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1588 
	`queueYIELD_IF_USING_PREEMPTION
();

1592 
	`mtCOVERAGE_TEST_MARKER
();

1597 
	`mtCOVERAGE_TEST_MARKER
();

1600 
	`èskEXIT_CRITICAL
();

1601  
pdPASS
;

1605 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1610 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1612 
	`c⁄figASSERT
–
xInhîô™˚Occuºed
 =
pdFALSE
 );

1618 
	`èskEXIT_CRITICAL
();

1619 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1620  
îrQUEUE_EMPTY
;

1622 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1626 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1627 
xE¡ryTimeSë
 = 
pdTRUE
;

1632 
	`mtCOVERAGE_TEST_MARKER
();

1636 
	`èskEXIT_CRITICAL
();

1641 
	`vTaskSu•ídAŒ
();

1642 
	`¥vLockQueue
–
pxQueue
 );

1645 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1651 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1653 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1655 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1657 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1659 
	`èskENTER_CRITICAL
();

1661 
xInhîô™˚Occuºed
 = 
	`xTaskPri‹ôyInhîô
–
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 );

1663 
	`èskEXIT_CRITICAL
();

1667 
	`mtCOVERAGE_TEST_MARKER
();

1672 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1673 
	`¥vU∆ockQueue
–
pxQueue
 );

1675 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1677 
	`p‹tYIELD_WITHIN_API
();

1681 
	`mtCOVERAGE_TEST_MARKER
();

1688 
	`¥vU∆ockQueue
–
pxQueue
 );

1689 –Ë
	`xTaskResumeAŒ
();

1695 
	`¥vU∆ockQueue
–
pxQueue
 );

1696 –Ë
	`xTaskResumeAŒ
();

1702 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1704 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1709 if–
xInhîô™˚Occuºed
 !
pdFALSE
 )

1711 
	`èskENTER_CRITICAL
();

1713 
UBa£Ty≥_t
 
uxHighe°WaôögPri‹ôy
;

1720 
uxHighe°WaôögPri‹ôy
 = 
	`¥vGëDisöhîôPri‹ôyA·îTimeout
–
pxQueue
 );

1721 
	`vTaskPri‹ôyDisöhîôA·îTimeout
–
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
, 
uxHighe°WaôögPri‹ôy
 );

1723 
	`èskEXIT_CRITICAL
();

1728 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1729  
îrQUEUE_EMPTY
;

1733 
	`mtCOVERAGE_TEST_MARKER
();

1737 
	}
}

1740 
Ba£Ty≥_t
 
	$xQueuePìk
–
QueueH™dÀ_t
 
xQueue
,

1741 * c⁄° 
pvBuf„r
,

1742 
TickTy≥_t
 
xTicksToWaô
 )

1744 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1745 
TimeOut_t
 
xTimeOut
;

1746 
öt8_t
 * 
pcOrigöÆRódPosôi⁄
;

1747 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1750 
	`c⁄figASSERT
––
pxQueue
 ) );

1754 
	`c⁄figASSERT
–!–––
pvBuf„r
 ) =
NULL
 ) && ( ( 
pxQueue
 )->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1757 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1759 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1768 
	`èskENTER_CRITICAL
();

1770 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1774 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1779 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
xQueue
.
pcRódFrom
;

1781 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1782 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

1785 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1789 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1791 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1794 
	`queueYIELD_IF_USING_PREEMPTION
();

1798 
	`mtCOVERAGE_TEST_MARKER
();

1803 
	`mtCOVERAGE_TEST_MARKER
();

1806 
	`èskEXIT_CRITICAL
();

1807  
pdPASS
;

1811 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1815 
	`èskEXIT_CRITICAL
();

1816 
	`åa˚QUEUE_PEEK_FAILED
–
pxQueue
 );

1817  
îrQUEUE_EMPTY
;

1819 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1824 
	`vTaskI¡î«lSëTimeOutSèã
–&
xTimeOut
 );

1825 
xE¡ryTimeSë
 = 
pdTRUE
;

1830 
	`mtCOVERAGE_TEST_MARKER
();

1834 
	`èskEXIT_CRITICAL
();

1839 
	`vTaskSu•ídAŒ
();

1840 
	`¥vLockQueue
–
pxQueue
 );

1843 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1847 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1849 
	`åa˚BLOCKING_ON_QUEUE_PEEK
–
pxQueue
 );

1850 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1851 
	`¥vU∆ockQueue
–
pxQueue
 );

1853 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1855 
	`p‹tYIELD_WITHIN_API
();

1859 
	`mtCOVERAGE_TEST_MARKER
();

1866 
	`¥vU∆ockQueue
–
pxQueue
 );

1867 –Ë
	`xTaskResumeAŒ
();

1874 
	`¥vU∆ockQueue
–
pxQueue
 );

1875 –Ë
	`xTaskResumeAŒ
();

1877 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1879 
	`åa˚QUEUE_PEEK_FAILED
–
pxQueue
 );

1880  
îrQUEUE_EMPTY
;

1884 
	`mtCOVERAGE_TEST_MARKER
();

1888 
	}
}

1891 
Ba£Ty≥_t
 
	$xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
,

1892 * c⁄° 
pvBuf„r
,

1893 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1895 
Ba£Ty≥_t
 
xRëu∫
;

1896 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1897 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1899 
	`c⁄figASSERT
–
pxQueue
 );

1900 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1916 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1918 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1920 c⁄° 
UBa£Ty≥_t
 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

1923 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1925 c⁄° 
öt8_t
 
cRxLock
 = 
pxQueue
->cRxLock;

1927 
	`åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 );

1929 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1930 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög - ( 
UBa£Ty≥_t
 ) 1;

1936 if–
cRxLock
 =
queueUNLOCKED
 )

1938 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1940 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1944 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1946 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1950 
	`mtCOVERAGE_TEST_MARKER
();

1955 
	`mtCOVERAGE_TEST_MARKER
();

1960 
	`mtCOVERAGE_TEST_MARKER
();

1967 
	`¥vIn¸emítQueueRxLock
–
pxQueue
, 
cRxLock
 );

1970 
xRëu∫
 = 
pdPASS
;

1974 
xRëu∫
 = 
pdFAIL
;

1975 
	`åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 );

1978 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1980  
xRëu∫
;

1981 
	}
}

1984 
Ba£Ty≥_t
 
	$xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
,

1985 * c⁄° 
pvBuf„r
 )

1987 
Ba£Ty≥_t
 
xRëu∫
;

1988 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1989 
öt8_t
 * 
pcOrigöÆRódPosôi⁄
;

1990 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

1992 
	`c⁄figASSERT
–
pxQueue
 );

1993 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1994 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 != 0 );

2010 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

2012 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

2015 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2017 
	`åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 );

2021 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
xQueue
.
pcRódFrom
;

2022 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

2023 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

2025 
xRëu∫
 = 
pdPASS
;

2029 
xRëu∫
 = 
pdFAIL
;

2030 
	`åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 );

2033 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

2035  
xRëu∫
;

2036 
	}
}

2039 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2041 
UBa£Ty≥_t
 
uxRëu∫
;

2043 
	`c⁄figASSERT
–
xQueue
 );

2045 
	`èskENTER_CRITICAL
();

2047 
uxRëu∫
 = ( ( 
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
;

2049 
	`èskEXIT_CRITICAL
();

2051  
uxRëu∫
;

2052 
	}
}

2055 
UBa£Ty≥_t
 
	$uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2057 
UBa£Ty≥_t
 
uxRëu∫
;

2058 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2060 
	`c⁄figASSERT
–
pxQueue
 );

2062 
	`èskENTER_CRITICAL
();

2064 
uxRëu∫
 = 
pxQueue
->
uxLígth
 -ÖxQueue->
uxMesßgesWaôög
;

2066 
	`èskEXIT_CRITICAL
();

2068  
uxRëu∫
;

2069 
	}
}

2072 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2074 
UBa£Ty≥_t
 
uxRëu∫
;

2075 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2077 
	`c⁄figASSERT
–
pxQueue
 );

2078 
uxRëu∫
 = 
pxQueue
->
uxMesßgesWaôög
;

2080  
uxRëu∫
;

2081 
	}
}

2084 
	$vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 )

2086 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2088 
	`c⁄figASSERT
–
pxQueue
 );

2089 
	`åa˚QUEUE_DELETE
–
pxQueue
 );

2091 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2093 
	`vQueueUƒegi°îQueue
–
pxQueue
 );

2097 #i‡––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 0 ) )

2101 
	`vP‹tFªe
–
pxQueue
 );

2103 #ñi‡––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

2107 if–
pxQueue
->
ucSètiˇŒyAŒoˇãd
 =–
uöt8_t
 ) 
pdFALSE
 )

2109 
	`vP‹tFªe
–
pxQueue
 );

2113 
	`mtCOVERAGE_TEST_MARKER
();

2120 –Ë
pxQueue
;

2123 
	}
}

2126 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2128 
UBa£Ty≥_t
 
	$uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 )

2130  ( ( 
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
;

2131 
	}
}

2136 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2138 
	$vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
,

2139 
UBa£Ty≥_t
 
uxQueueNumbî
 )

2141 ––
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
 = uxQueueNumber;

2142 
	}
}

2147 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2149 
uöt8_t
 
	$ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 )

2151  ( ( 
Queue_t
 * ) 
xQueue
 )->
ucQueueTy≥
;

2152 
	}
}

2157 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2159 
UBa£Ty≥_t
 
	$¥vGëDisöhîôPri‹ôyA·îTimeout
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 )

2161 
UBa£Ty≥_t
 
uxHighe°Pri‹ôyOfWaôögTasks
;

2169 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) > 0U )

2171 
uxHighe°Pri‹ôyOfWaôögTasks
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBa£Ty≥_àË
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

2175 
uxHighe°Pri‹ôyOfWaôögTasks
 = 
tskIDLE_PRIORITY
;

2178  
uxHighe°Pri‹ôyOfWaôögTasks
;

2179 
	}
}

2184 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
,

2185 c⁄° * 
pvIãmToQueue
,

2186 c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 )

2188 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

2189 
UBa£Ty≥_t
 
uxMesßgesWaôög
;

2193 
uxMesßgesWaôög
 = 
pxQueue
->uxMessagesWaiting;

2195 if–
pxQueue
->
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

2197 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2199 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

2202 
xRëu∫
 = 
	`xTaskPri‹ôyDisöhîô
–
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 );

2203 
pxQueue
->
u
.
xSem≠h‹e
.
xMuãxHﬁdî
 = 
NULL
;

2207 
	`mtCOVERAGE_TEST_MARKER
();

2212 if–
xPosôi⁄
 =
queueSEND_TO_BACK
 )

2214 –Ë
	`mem˝y
––* ) 
pxQueue
->
pcWrôeTo
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2215 
pxQueue
->
pcWrôeTo
 +pxQueue->
uxIãmSize
;

2217 if–
pxQueue
->
pcWrôeTo
 >pxQueue->
u
.
xQueue
.
pcTaû
 )

2219 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

2223 
	`mtCOVERAGE_TEST_MARKER
();

2228 –Ë
	`mem˝y
––* ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2229 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 -pxQueue->
uxIãmSize
;

2231 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 <ÖxQueue->
pcHód
 )

2233 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 = (ÖxQueue->u.xQueue.
pcTaû
 -ÖxQueue->
uxIãmSize
 );

2237 
	`mtCOVERAGE_TEST_MARKER
();

2240 if–
xPosôi⁄
 =
queueOVERWRITE
 )

2242 if–
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2248 --
uxMesßgesWaôög
;

2252 
	`mtCOVERAGE_TEST_MARKER
();

2257 
	`mtCOVERAGE_TEST_MARKER
();

2261 
pxQueue
->
uxMesßgesWaôög
 = uxMesßgesWaôög + ( 
UBa£Ty≥_t
 ) 1;

2263  
xRëu∫
;

2264 
	}
}

2267 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
,

2268 * c⁄° 
pvBuf„r
 )

2270 if–
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0 )

2272 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2274 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 >pxQueue->u.xQueue.
pcTaû
 )

2276 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2280 
	`mtCOVERAGE_TEST_MARKER
();

2283 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

2285 
	}
}

2288 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 )

2296 
	`èskENTER_CRITICAL
();

2298 
öt8_t
 
cTxLock
 = 
pxQueue
->cTxLock;

2301  
cTxLock
 > 
queueLOCKED_UNMODIFIED
 )

2305 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2307 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

2309 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
 ) !
pdFALSE
 )

2314 
	`vTaskMis£dYõld
();

2318 
	`mtCOVERAGE_TEST_MARKER
();

2326 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2328 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2332 
	`vTaskMis£dYõld
();

2336 
	`mtCOVERAGE_TEST_MARKER
();

2349 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2351 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2355 
	`vTaskMis£dYõld
();

2359 
	`mtCOVERAGE_TEST_MARKER
();

2369 --
cTxLock
;

2372 
pxQueue
->
cTxLock
 = 
queueUNLOCKED
;

2374 
	`èskEXIT_CRITICAL
();

2377 
	`èskENTER_CRITICAL
();

2379 
öt8_t
 
cRxLock
 = 
pxQueue
->cRxLock;

2381  
cRxLock
 > 
queueLOCKED_UNMODIFIED
 )

2383 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2385 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2387 
	`vTaskMis£dYõld
();

2391 
	`mtCOVERAGE_TEST_MARKER
();

2394 --
cRxLock
;

2402 
pxQueue
->
cRxLock
 = 
queueUNLOCKED
;

2404 
	`èskEXIT_CRITICAL
();

2405 
	}
}

2408 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 * 
pxQueue
 )

2410 
Ba£Ty≥_t
 
xRëu∫
;

2412 
	`èskENTER_CRITICAL
();

2414 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2416 
xRëu∫
 = 
pdTRUE
;

2420 
xRëu∫
 = 
pdFALSE
;

2423 
	`èskEXIT_CRITICAL
();

2425  
xRëu∫
;

2426 
	}
}

2429 
Ba£Ty≥_t
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2431 
Ba£Ty≥_t
 
xRëu∫
;

2432 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2434 
	`c⁄figASSERT
–
pxQueue
 );

2436 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2438 
xRëu∫
 = 
pdTRUE
;

2442 
xRëu∫
 = 
pdFALSE
;

2445  
xRëu∫
;

2446 
	}
}

2449 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 * 
pxQueue
 )

2451 
Ba£Ty≥_t
 
xRëu∫
;

2453 
	`èskENTER_CRITICAL
();

2455 if–
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 )

2457 
xRëu∫
 = 
pdTRUE
;

2461 
xRëu∫
 = 
pdFALSE
;

2464 
	`èskEXIT_CRITICAL
();

2466  
xRëu∫
;

2467 
	}
}

2470 
Ba£Ty≥_t
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2472 
Ba£Ty≥_t
 
xRëu∫
;

2473 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2475 
	`c⁄figASSERT
–
pxQueue
 );

2477 if–
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 )

2479 
xRëu∫
 = 
pdTRUE
;

2483 
xRëu∫
 = 
pdFALSE
;

2486  
xRëu∫
;

2487 
	}
}

2490 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2492 
Ba£Ty≥_t
 
	$xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
,

2493 c⁄° * 
pvIãmToQueue
,

2494 
TickTy≥_t
 
xTicksToWaô
 )

2496 
Ba£Ty≥_t
 
xRëu∫
;

2497 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2502 
	`p‹tDISABLE_INTERRUPTS
();

2504 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

2508 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2512 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToSíd
 ) );

2513 
	`p‹tENABLE_INTERRUPTS
();

2514  
îrQUEUE_BLOCKED
;

2518 
	`p‹tENABLE_INTERRUPTS
();

2519  
îrQUEUE_FULL
;

2523 
	`p‹tENABLE_INTERRUPTS
();

2525 
	`p‹tDISABLE_INTERRUPTS
();

2527 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2530 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2531 
xRëu∫
 = 
pdPASS
;

2534 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2540 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2544 
xRëu∫
 = 
îrQUEUE_YIELD
;

2548 
	`mtCOVERAGE_TEST_MARKER
();

2553 
	`mtCOVERAGE_TEST_MARKER
();

2558 
xRëu∫
 = 
îrQUEUE_FULL
;

2561 
	`p‹tENABLE_INTERRUPTS
();

2563  
xRëu∫
;

2564 
	}
}

2569 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2571 
Ba£Ty≥_t
 
	$xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
,

2572 * 
pvBuf„r
,

2573 
TickTy≥_t
 
xTicksToWaô
 )

2575 
Ba£Ty≥_t
 
xRëu∫
;

2576 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2581 
	`p‹tDISABLE_INTERRUPTS
();

2583 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2587 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2591 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

2592 
	`p‹tENABLE_INTERRUPTS
();

2593  
îrQUEUE_BLOCKED
;

2597 
	`p‹tENABLE_INTERRUPTS
();

2598  
îrQUEUE_FULL
;

2603 
	`mtCOVERAGE_TEST_MARKER
();

2606 
	`p‹tENABLE_INTERRUPTS
();

2608 
	`p‹tDISABLE_INTERRUPTS
();

2610 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2613 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2615 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 >pxQueue->u.xQueue.
pcTaû
 )

2617 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2621 
	`mtCOVERAGE_TEST_MARKER
();

2624 --–
pxQueue
->
uxMesßgesWaôög
 );

2625 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2627 
xRëu∫
 = 
pdPASS
;

2630 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2636 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2638 
xRëu∫
 = 
îrQUEUE_YIELD
;

2642 
	`mtCOVERAGE_TEST_MARKER
();

2647 
	`mtCOVERAGE_TEST_MARKER
();

2652 
xRëu∫
 = 
pdFAIL
;

2655 
	`p‹tENABLE_INTERRUPTS
();

2657  
xRëu∫
;

2658 
	}
}

2663 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2665 
Ba£Ty≥_t
 
	$xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
,

2666 c⁄° * 
pvIãmToQueue
,

2667 
Ba£Ty≥_t
 
xCoRoutöePªviou¶yWokí
 )

2669 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2673 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2675 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2679 if–
xCoRoutöePªviou¶yWokí
 =
pdFALSE
 )

2681 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2683 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2685  
pdTRUE
;

2689 
	`mtCOVERAGE_TEST_MARKER
();

2694 
	`mtCOVERAGE_TEST_MARKER
();

2699 
	`mtCOVERAGE_TEST_MARKER
();

2704 
	`mtCOVERAGE_TEST_MARKER
();

2707  
xCoRoutöePªviou¶yWokí
;

2708 
	}
}

2713 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2715 
Ba£Ty≥_t
 
	$xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
,

2716 * 
pvBuf„r
,

2717 
Ba£Ty≥_t
 * 
pxCoRoutöeWokí
 )

2719 
Ba£Ty≥_t
 
xRëu∫
;

2720 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2724 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2727 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2729 if–
pxQueue
->
u
.
xQueue
.
pcRódFrom
 >pxQueue->u.xQueue.
pcTaû
 )

2731 
pxQueue
->
u
.
xQueue
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2735 
	`mtCOVERAGE_TEST_MARKER
();

2738 --–
pxQueue
->
uxMesßgesWaôög
 );

2739 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
xQueue
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2741 if––*
pxCoRoutöeWokí
 ) =
pdFALSE
 )

2743 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2745 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2747 *
pxCoRoutöeWokí
 = 
pdTRUE
;

2751 
	`mtCOVERAGE_TEST_MARKER
();

2756 
	`mtCOVERAGE_TEST_MARKER
();

2761 
	`mtCOVERAGE_TEST_MARKER
();

2764 
xRëu∫
 = 
pdPASS
;

2768 
xRëu∫
 = 
pdFAIL
;

2771  
xRëu∫
;

2772 
	}
}

2777 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2779 
	$vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
,

2780 c⁄° * 
pcQueueName
 )

2782 
UBa£Ty≥_t
 
ux
;

2783 
QueueRegi°ryIãm_t
 * 
pxE¡ryToWrôe
 = 
NULL
;

2785 
	`c⁄figASSERT
–
xQueue
 );

2787 if–
pcQueueName
 !
NULL
 )

2791  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2794 if–
xQueue
 =
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 )

2796 
pxE¡ryToWrôe
 = &–
xQueueRegi°ry
[ 
ux
 ] );

2800 if––
pxE¡ryToWrôe
 =
NULL
 ) && ( 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 == NULL ) )

2802 
pxE¡ryToWrôe
 = &–
xQueueRegi°ry
[ 
ux
 ] );

2806 
	`mtCOVERAGE_TEST_MARKER
();

2811 if–
pxE¡ryToWrôe
 !
NULL
 )

2814 
pxE¡ryToWrôe
->
pcQueueName
 =ÖcQueueName;

2815 
pxE¡ryToWrôe
->
xH™dÀ
 = 
xQueue
;

2817 
	`åa˚QUEUE_REGISTRY_ADD
–
xQueue
, 
pcQueueName
 );

2819 
	}
}

2824 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2826 c⁄° * 
	$pcQueueGëName
–
QueueH™dÀ_t
 
xQueue
 )

2828 
UBa£Ty≥_t
 
ux
;

2829 c⁄° * 
pcRëu∫
 = 
NULL
;

2831 
	`c⁄figASSERT
–
xQueue
 );

2836  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2838 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2840 
pcRëu∫
 = 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
;

2845 
	`mtCOVERAGE_TEST_MARKER
();

2849  
pcRëu∫
;

2850 
	}
}

2855 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2857 
	$vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 )

2859 
UBa£Ty≥_t
 
ux
;

2861 
	`c⁄figASSERT
–
xQueue
 );

2865  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2867 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2870 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 = 
NULL
;

2875 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = ( 
QueueH™dÀ_t
 ) 0;

2880 
	`mtCOVERAGE_TEST_MARKER
();

2883 
	}
}

2888 #i‡–
c⁄figUSE_TIMERS
 == 1 )

2890 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
,

2891 
TickTy≥_t
 
xTicksToWaô
,

2892 c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

2894 
Queue_t
 * c⁄° 
pxQueue
 = 
xQueue
;

2910 
	`¥vLockQueue
–
pxQueue
 );

2912 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0U )

2915 
	`vTaskPœ˚OnEvítLi°Re°ri˘ed
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
, 
xWaôIndeföôñy
 );

2919 
	`mtCOVERAGE_TEST_MARKER
();

2922 
	`¥vU∆ockQueue
–
pxQueue
 );

2923 
	}
}

2928 #i‡––
c⁄figUSE_QUEUE_SETS
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

2930 
QueueSëH™dÀ_t
 
	$xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 )

2932 
QueueSëH™dÀ_t
 
pxQueue
;

2934 
pxQueue
 = 
	`xQueueGíîicCª©e
–
uxEvítQueueLígth
, ( 
UBa£Ty≥_t
 ) –
Queue_t
 * ), 
queueQUEUE_TYPE_SET
 );

2936  
pxQueue
;

2937 
	}
}

2942 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2944 
Ba£Ty≥_t
 
	$xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
,

2945 
QueueSëH™dÀ_t
 
xQueueSë
 )

2947 
Ba£Ty≥_t
 
xRëu∫
;

2949 
	`èskENTER_CRITICAL
();

2951 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 !
NULL
 )

2954 
xRëu∫
 = 
pdFAIL
;

2956 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2960 
xRëu∫
 = 
pdFAIL
;

2964 ––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 = 
xQueueSë
;

2965 
xRëu∫
 = 
pdPASS
;

2968 
	`èskEXIT_CRITICAL
();

2970  
xRëu∫
;

2971 
	}
}

2976 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2978 
Ba£Ty≥_t
 
	$xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
,

2979 
QueueSëH™dÀ_t
 
xQueueSë
 )

2981 
Ba£Ty≥_t
 
xRëu∫
;

2982 
Queue_t
 * c⁄° 
pxQueueOrSem≠h‹e
 = ( Queue_à* ) 
xQueueOrSem≠h‹e
;

2984 if–
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 !
xQueueSë
 )

2987 
xRëu∫
 = 
pdFAIL
;

2989 if–
pxQueueOrSem≠h‹e
->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2994 
xRëu∫
 = 
pdFAIL
;

2998 
	`èskENTER_CRITICAL
();

3001 
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 = 
NULL
;

3003 
	`èskEXIT_CRITICAL
();

3004 
xRëu∫
 = 
pdPASS
;

3007  
xRëu∫
;

3008 
	}
}

3013 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

3015 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
,

3016 
TickTy≥_t
 c⁄° 
xTicksToWaô
 )

3018 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

3020 –Ë
	`xQueueRe˚ive
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
xTicksToWaô
 );

3021  
xRëu∫
;

3022 
	}
}

3027 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

3029 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 )

3031 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

3033 –Ë
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
NULL
 );

3034  
xRëu∫
;

3035 
	}
}

3040 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

3042 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
 )

3044 
Queue_t
 * 
pxQueueSëC⁄èöî
 = 
pxQueue
->pxQueueSetContainer;

3045 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

3052 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
 );

3053 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 );

3055 if–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 )

3057 c⁄° 
öt8_t
 
cTxLock
 = 
pxQueueSëC⁄èöî
->cTxLock;

3059 
	`åa˚QUEUE_SET_SEND
–
pxQueueSëC⁄èöî
 );

3062 
xRëu∫
 = 
	`¥vC›yD©aToQueue
–
pxQueueSëC⁄èöî
, &
pxQueue
, 
queueSEND_TO_BACK
 );

3064 if–
cTxLock
 =
queueUNLOCKED
 )

3066 if–
	`li°LIST_IS_EMPTY
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

3068 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

3071 
xRëu∫
 = 
pdTRUE
;

3075 
	`mtCOVERAGE_TEST_MARKER
();

3080 
	`mtCOVERAGE_TEST_MARKER
();

3085 
	`¥vIn¸emítQueueTxLock
–
pxQueueSëC⁄èöî
, 
cTxLock
 );

3090 
	`mtCOVERAGE_TEST_MARKER
();

3093  
xRëu∫
;

3094 
	}
}

	@stream_buffer.c

30 
	~<°döt.h
>

31 
	~<°rög.h
>

36 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

39 
	~"FªeRTOS.h
"

40 
	~"èsk.h
"

41 
	~"°ªam_buf„r.h
"

43 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 != 1 )

44 #îr‹ 
c⁄figUSE_TASK_NOTIFICATIONS
 
mu°
 
be
 
£t
 
to
 1Åÿ
buûd
 
°ªam_buf„r
.
c


51 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


57 #i‚de‡
sbRECEIVE_COMPLETED


58 
	#sbRECEIVE_COMPLETED
–
pxSåómBuf„r
 ) \

59 
	`vTaskSu•ídAŒ
(); \

61 if––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 !
NULL
 ) \

63 –Ë
	`xTaskNŸify
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
, \

64 –
uöt32_t
 ) 0, \

65 
eNoA˘i⁄
 ); \

66 –
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 = 
NULL
; \

69 –Ë
	`xTaskResumeAŒ
();

	)

72 #i‚de‡
sbRECEIVE_COMPLETED_FROM_ISR


73 
	#sbRECEIVE_COMPLETED_FROM_ISR
–
pxSåómBuf„r
, \

74 
pxHighîPri‹ôyTaskWokí
 ) \

76 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
; \

78 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
(); \

80 if––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 !
NULL
 ) \

82 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
, \

83 –
uöt32_t
 ) 0, \

84 
eNoA˘i⁄
, \

85 
pxHighîPri‹ôyTaskWokí
 ); \

86 –
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 = 
NULL
; \

89 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ); \

90 }

	)

96 #i‚de‡
sbSEND_COMPLETED


97 
	#sbSEND_COMPLETED
–
pxSåómBuf„r
 ) \

98 
	`vTaskSu•ídAŒ
(); \

100 if––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 !
NULL
 ) \

102 –Ë
	`xTaskNŸify
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
, \

103 –
uöt32_t
 ) 0, \

104 
eNoA˘i⁄
 ); \

105 –
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 = 
NULL
; \

108 –Ë
	`xTaskResumeAŒ
();

	)

111 #i‚de‡
sbSEND_COMPLETE_FROM_ISR


112 
	#sbSEND_COMPLETE_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 ) \

114 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
; \

116 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
(); \

118 if––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 !
NULL
 ) \

120 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
, \

121 –
uöt32_t
 ) 0, \

122 
eNoA˘i⁄
, \

123 
pxHighîPri‹ôyTaskWokí
 ); \

124 –
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 = 
NULL
; \

127 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ); \

128 }

	)

133 
	#sbBYTES_TO_STORE_MESSAGE_LENGTH
 ( –
c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 ) )

	)

136 
	#sbFLAGS_IS_MESSAGE_BUFFER
 ( ( 
uöt8_t
 ) 1 )

	)

137 
	#sbFLAGS_IS_STATICALLY_ALLOCATED
 ( ( 
uöt8_t
 ) 2 )

	)

142 
	sSåómBuf„rDef_t


144 vﬁ©ûê
size_t
 
	mxTaû
;

145 vﬁ©ûê
size_t
 
	mxHód
;

146 
size_t
 
	mxLígth
;

147 
size_t
 
	mxTriggîLevñByãs
;

148 vﬁ©ûê
TaskH™dÀ_t
 
	mxTaskWaôögToRe˚ive
;

149 vﬁ©ûê
TaskH™dÀ_t
 
	mxTaskWaôögToSíd
;

150 
uöt8_t
 * 
	mpucBuf„r
;

151 
uöt8_t
 
	mucFœgs
;

153 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

154 
UBa£Ty≥_t
 
	muxSåómBuf„rNumbî
;

156 } 
	tSåómBuf„r_t
;

161 
size_t
 
	$¥vByãsInBuf„r
–c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 ) 
PRIVILEGED_FUNCTION
;

174 
size_t
 
	$¥vWrôeByãsToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

175 c⁄° 
uöt8_t
 * 
pucD©a
,

176 
size_t
 
xCou¡
,

177 
size_t
 
xHód
 ) 
PRIVILEGED_FUNCTION
;

186 
size_t
 
	$¥vRódMesßgeFromBuf„r
–
SåómBuf„r_t
 * 
pxSåómBuf„r
,

187 * 
pvRxD©a
,

188 
size_t
 
xBuf„rLígthByãs
,

189 
size_t
 
xByãsAvaûabÀ
 ) 
PRIVILEGED_FUNCTION
;

198 
size_t
 
	$¥vWrôeMesßgeToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

199 c⁄° * 
pvTxD©a
,

200 
size_t
 
xD©aLígthByãs
,

201 
size_t
 
xS∑˚
,

202 
size_t
 
xRequúedS∑˚
 ) 
PRIVILEGED_FUNCTION
;

216 
size_t
 
	$¥vRódByãsFromBuf„r
–
SåómBuf„r_t
 * 
pxSåómBuf„r
,

217 
uöt8_t
 * 
pucD©a
,

218 
size_t
 
xCou¡
,

219 
size_t
 
xTaû
 ) 
PRIVILEGED_FUNCTION
;

225 
	$¥vInôüli£NewSåómBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

226 
uöt8_t
 * c⁄° 
pucBuf„r
,

227 
size_t
 
xBuf„rSizeByãs
,

228 
size_t
 
xTriggîLevñByãs
,

229 
uöt8_t
 
ucFœgs
 ) 
PRIVILEGED_FUNCTION
;

233 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

235 
SåómBuf„rH™dÀ_t
 
	$xSåómBuf„rGíîicCª©e
–
size_t
 
xBuf„rSizeByãs
,

236 
size_t
 
xTriggîLevñByãs
,

237 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
 )

239 
uöt8_t
 * 
pucAŒoˇãdMem‹y
;

240 
uöt8_t
 
ucFœgs
;

246 if–
xIsMesßgeBuf„r
 =
pdTRUE
 )

249 
ucFœgs
 = 
sbFLAGS_IS_MESSAGE_BUFFER
;

250 
	`c⁄figASSERT
–
xBuf„rSizeByãs
 > 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 );

255 
ucFœgs
 = 0;

256 
	`c⁄figASSERT
–
xBuf„rSizeByãs
 > 0 );

259 
	`c⁄figASSERT
–
xTriggîLevñByãs
 <
xBuf„rSizeByãs
 );

263 if–
xTriggîLevñByãs
 =–
size_t
 ) 0 )

265 
xTriggîLevñByãs
 = ( 
size_t
 ) 1;

276 if–
xBuf„rSizeByãs
 < ( xBuf„rSizeByã†+ 1 + –
SåómBuf„r_t
 ) ) )

278 
xBuf„rSizeByãs
++;

279 
pucAŒoˇãdMem‹y
 = ( 
uöt8_t
 * ) 
	`pvP‹tMÆloc
–
xBuf„rSizeByãs
 + –
SåómBuf„r_t
 ) );

283 
pucAŒoˇãdMem‹y
 = 
NULL
;

286 if–
pucAŒoˇãdMem‹y
 !
NULL
 )

288 
	`¥vInôüli£NewSåómBuf„r
––
SåómBuf„r_t
 * ) 
pucAŒoˇãdMem‹y
,

289 
pucAŒoˇãdMem‹y
 + –
SåómBuf„r_t
 ),

290 
xBuf„rSizeByãs
,

291 
xTriggîLevñByãs
,

292 
ucFœgs
 );

294 
	`åa˚STREAM_BUFFER_CREATE
–––
SåómBuf„r_t
 * ) 
pucAŒoˇãdMem‹y
 ), 
xIsMesßgeBuf„r
 );

298 
	`åa˚STREAM_BUFFER_CREATE_FAILED
–
xIsMesßgeBuf„r
 );

301  ( 
SåómBuf„rH™dÀ_t
 ) 
pucAŒoˇãdMem‹y
;

302 
	}
}

307 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

309 
SåómBuf„rH™dÀ_t
 
	$xSåómBuf„rGíîicCª©eSètic
–
size_t
 
xBuf„rSizeByãs
,

310 
size_t
 
xTriggîLevñByãs
,

311 
Ba£Ty≥_t
 
xIsMesßgeBuf„r
,

312 
uöt8_t
 * c⁄° 
pucSåómBuf„rSt‹ageAªa
,

313 
SèticSåómBuf„r_t
 * c⁄° 
pxSèticSåómBuf„r
 )

315 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = ( SåómBuf„r_à* ) 
pxSèticSåómBuf„r
;

316 
SåómBuf„rH™dÀ_t
 
xRëu∫
;

317 
uöt8_t
 
ucFœgs
;

319 
	`c⁄figASSERT
–
pucSåómBuf„rSt‹ageAªa
 );

320 
	`c⁄figASSERT
–
pxSèticSåómBuf„r
 );

321 
	`c⁄figASSERT
–
xTriggîLevñByãs
 <
xBuf„rSizeByãs
 );

325 if–
xTriggîLevñByãs
 =–
size_t
 ) 0 )

327 
xTriggîLevñByãs
 = ( 
size_t
 ) 1;

330 if–
xIsMesßgeBuf„r
 !
pdFALSE
 )

333 
ucFœgs
 = 
sbFLAGS_IS_MESSAGE_BUFFER
 | 
sbFLAGS_IS_STATICALLY_ALLOCATED
;

338 
ucFœgs
 = 
sbFLAGS_IS_STATICALLY_ALLOCATED
;

345 
	`c⁄figASSERT
–
xBuf„rSizeByãs
 > 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 );

347 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

352 vﬁ©ûê
size_t
 
xSize
 = –
SèticSåómBuf„r_t
 );

353 
	`c⁄figASSERT
–
xSize
 =–
SåómBuf„r_t
 ) );

357 if––
pucSåómBuf„rSt‹ageAªa
 !
NULL
 ) && ( 
pxSèticSåómBuf„r
 != NULL ) )

359 
	`¥vInôüli£NewSåómBuf„r
–
pxSåómBuf„r
,

360 
pucSåómBuf„rSt‹ageAªa
,

361 
xBuf„rSizeByãs
,

362 
xTriggîLevñByãs
,

363 
ucFœgs
 );

367 
pxSåómBuf„r
->
ucFœgs
 |
sbFLAGS_IS_STATICALLY_ALLOCATED
;

369 
	`åa˚STREAM_BUFFER_CREATE
–
pxSåómBuf„r
, 
xIsMesßgeBuf„r
 );

371 
xRëu∫
 = ( 
SåómBuf„rH™dÀ_t
 ) 
pxSèticSåómBuf„r
;

375 
xRëu∫
 = 
NULL
;

376 
	`åa˚STREAM_BUFFER_CREATE_STATIC_FAILED
–
xRëu∫
, 
xIsMesßgeBuf„r
 );

379  
xRëu∫
;

380 
	}
}

385 
	$vSåómBuf„rDñëe
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

387 
SåómBuf„r_t
 * 
pxSåómBuf„r
 = 
xSåómBuf„r
;

389 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

391 
	`åa˚STREAM_BUFFER_DELETE
–
xSåómBuf„r
 );

393 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_STATICALLY_ALLOCATED
 ) =–
uöt8_t
 ) 
pdFALSE
 )

395 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

399 
	`vP‹tFªe
––* ) 
pxSåómBuf„r
 );

405 
	`c⁄figASSERT
–
xSåómBuf„r
 =–
SåómBuf„rH™dÀ_t
 ) ~0 );

413 –Ë
	`mem£t
–
pxSåómBuf„r
, 0x00, –
SåómBuf„r_t
 ) );

415 
	}
}

418 
Ba£Ty≥_t
 
	$xSåómBuf„rRe£t
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

420 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

421 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

423 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

424 
UBa£Ty≥_t
 
uxSåómBuf„rNumbî
;

427 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

429 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

433 
uxSåómBuf„rNumbî
 = 
pxSåómBuf„r
->uxStreamBufferNumber;

438 
	`èskENTER_CRITICAL
();

440 if–
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 =
NULL
 )

442 if–
pxSåómBuf„r
->
xTaskWaôögToSíd
 =
NULL
 )

444 
	`¥vInôüli£NewSåómBuf„r
–
pxSåómBuf„r
,

445 
pxSåómBuf„r
->
pucBuf„r
,

446 
pxSåómBuf„r
->
xLígth
,

447 
pxSåómBuf„r
->
xTriggîLevñByãs
,

448 
pxSåómBuf„r
->
ucFœgs
 );

449 
xRëu∫
 = 
pdPASS
;

451 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

453 
pxSåómBuf„r
->
uxSåómBuf„rNumbî
 = uxStreamBufferNumber;

457 
	`åa˚STREAM_BUFFER_RESET
–
xSåómBuf„r
 );

461 
	`èskEXIT_CRITICAL
();

463  
xRëu∫
;

464 
	}
}

467 
Ba£Ty≥_t
 
	$xSåómBuf„rSëTriggîLevñ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

468 
size_t
 
xTriggîLevñ
 )

470 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

471 
Ba£Ty≥_t
 
xRëu∫
;

473 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

476 if–
xTriggîLevñ
 =–
size_t
 ) 0 )

478 
xTriggîLevñ
 = ( 
size_t
 ) 1;

483 if–
xTriggîLevñ
 < 
pxSåómBuf„r
->
xLígth
 )

485 
pxSåómBuf„r
->
xTriggîLevñByãs
 = 
xTriggîLevñ
;

486 
xRëu∫
 = 
pdPASS
;

490 
xRëu∫
 = 
pdFALSE
;

493  
xRëu∫
;

494 
	}
}

497 
size_t
 
	$xSåómBuf„rS∑˚sAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

499 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

500 
size_t
 
xS∑˚
;

501 
size_t
 
xOrigöÆTaû
;

503 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

510 
xOrigöÆTaû
 = 
pxSåómBuf„r
->
xTaû
;

511 
xS∑˚
 = 
pxSåómBuf„r
->
xLígth
 +ÖxSåómBuf„r->
xTaû
;

512 
xS∑˚
 -
pxSåómBuf„r
->
xHód
;

513 }  
xOrigöÆTaû
 !
pxSåómBuf„r
->
xTaû
 );

515 
xS∑˚
 -–
size_t
 ) 1;

517 if–
xS∑˚
 >
pxSåómBuf„r
->
xLígth
 )

519 
xS∑˚
 -
pxSåómBuf„r
->
xLígth
;

523 
	`mtCOVERAGE_TEST_MARKER
();

526  
xS∑˚
;

527 
	}
}

530 
size_t
 
	$xSåómBuf„rByãsAvaûabÀ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

532 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

533 
size_t
 
xRëu∫
;

535 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

537 
xRëu∫
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

538  
xRëu∫
;

539 
	}
}

542 
size_t
 
	$xSåómBuf„rSíd
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

543 c⁄° * 
pvTxD©a
,

544 
size_t
 
xD©aLígthByãs
,

545 
TickTy≥_t
 
xTicksToWaô
 )

547 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

548 
size_t
 
xRëu∫
, 
xS∑˚
 = 0;

549 
size_t
 
xRequúedS∑˚
 = 
xD©aLígthByãs
;

550 
TimeOut_t
 
xTimeOut
;

551 
size_t
 
xMaxRï‹ãdS∑˚
 = 0;

553 
	`c⁄figASSERT
–
pvTxD©a
 );

554 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

558 
xMaxRï‹ãdS∑˚
 = 
pxSåómBuf„r
->
xLígth
 - ( 
size_t
 ) 1;

564 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

566 
xRequúedS∑˚
 +
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

569 
	`c⁄figASSERT
–
xRequúedS∑˚
 > 
xD©aLígthByãs
 );

573 if–
xRequúedS∑˚
 > 
xMaxRï‹ãdS∑˚
 )

577 
xTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

581 
	`mtCOVERAGE_TEST_MARKER
();

589 if–
xRequúedS∑˚
 > 
xMaxRï‹ãdS∑˚
 )

591 
xRequúedS∑˚
 = 
xMaxRï‹ãdS∑˚
;

595 
	`mtCOVERAGE_TEST_MARKER
();

599 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

601 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

607 
	`èskENTER_CRITICAL
();

609 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

611 if–
xS∑˚
 < 
xRequúedS∑˚
 )

614 –Ë
	`xTaskNŸifySèãCÀ¨
–
NULL
 );

617 
	`c⁄figASSERT
–
pxSåómBuf„r
->
xTaskWaôögToSíd
 =
NULL
 );

618 
pxSåómBuf„r
->
xTaskWaôögToSíd
 = 
	`xTaskGëCuºítTaskH™dÀ
();

622 
	`èskEXIT_CRITICAL
();

626 
	`èskEXIT_CRITICAL
();

628 
	`åa˚BLOCKING_ON_STREAM_BUFFER_SEND
–
xSåómBuf„r
 );

629 –Ë
	`xTaskNŸifyWaô
––
uöt32_t
 ) 0, ( uöt32_àË0, 
NULL
, 
xTicksToWaô
 );

630 
pxSåómBuf„r
->
xTaskWaôögToSíd
 = 
NULL
;

631 }  
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 );

635 
	`mtCOVERAGE_TEST_MARKER
();

638 if–
xS∑˚
 =–
size_t
 ) 0 )

640 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

644 
	`mtCOVERAGE_TEST_MARKER
();

647 
xRëu∫
 = 
	`¥vWrôeMesßgeToBuf„r
–
pxSåómBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xS∑˚
, 
xRequúedS∑˚
 );

649 if–
xRëu∫
 > ( 
size_t
 ) 0 )

651 
	`åa˚STREAM_BUFFER_SEND
–
xSåómBuf„r
, 
xRëu∫
 );

654 if–
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 ) >pxSåómBuf„r->
xTriggîLevñByãs
 )

656 
	`sbSEND_COMPLETED
–
pxSåómBuf„r
 );

660 
	`mtCOVERAGE_TEST_MARKER
();

665 
	`mtCOVERAGE_TEST_MARKER
();

666 
	`åa˚STREAM_BUFFER_SEND_FAILED
–
xSåómBuf„r
 );

669  
xRëu∫
;

670 
	}
}

673 
size_t
 
	$xSåómBuf„rSídFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

674 c⁄° * 
pvTxD©a
,

675 
size_t
 
xD©aLígthByãs
,

676 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

678 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

679 
size_t
 
xRëu∫
, 
xS∑˚
;

680 
size_t
 
xRequúedS∑˚
 = 
xD©aLígthByãs
;

682 
	`c⁄figASSERT
–
pvTxD©a
 );

683 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

689 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

691 
xRequúedS∑˚
 +
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

695 
	`mtCOVERAGE_TEST_MARKER
();

698 
xS∑˚
 = 
	`xSåómBuf„rS∑˚sAvaûabÀ
–
pxSåómBuf„r
 );

699 
xRëu∫
 = 
	`¥vWrôeMesßgeToBuf„r
–
pxSåómBuf„r
, 
pvTxD©a
, 
xD©aLígthByãs
, 
xS∑˚
, 
xRequúedS∑˚
 );

701 if–
xRëu∫
 > ( 
size_t
 ) 0 )

704 if–
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 ) >pxSåómBuf„r->
xTriggîLevñByãs
 )

706 
	`sbSEND_COMPLETE_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 );

710 
	`mtCOVERAGE_TEST_MARKER
();

715 
	`mtCOVERAGE_TEST_MARKER
();

718 
	`åa˚STREAM_BUFFER_SEND_FROM_ISR
–
xSåómBuf„r
, 
xRëu∫
 );

720  
xRëu∫
;

721 
	}
}

724 
size_t
 
	$¥vWrôeMesßgeToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

725 c⁄° * 
pvTxD©a
,

726 
size_t
 
xD©aLígthByãs
,

727 
size_t
 
xS∑˚
,

728 
size_t
 
xRequúedS∑˚
 )

730 
size_t
 
xNextHód
 = 
pxSåómBuf„r
->
xHód
;

731 
c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 
xMesßgeLígth
;

733 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

738 
xMesßgeLígth
 = ( 
c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 ) 
xD©aLígthByãs
;

741 
	`c⁄figASSERT
––
size_t
 ) 
xMesßgeLígth
 =
xD©aLígthByãs
 );

743 if–
xS∑˚
 >
xRequúedS∑˚
 )

748 
xNextHód
 = 
	`¥vWrôeByãsToBuf„r
–
pxSåómBuf„r
, ( c⁄° 
uöt8_t
 * ) &–
xMesßgeLígth
 ), 
sbBYTES_TO_STORE_MESSAGE_LENGTH
, xNextHead );

753 
xD©aLígthByãs
 = 0;

761 
xD©aLígthByãs
 = 
	`c⁄figMIN
–xD©aLígthByãs, 
xS∑˚
 );

764 if–
xD©aLígthByãs
 !–
size_t
 ) 0 )

767 
pxSåómBuf„r
->
xHód
 = 
	`¥vWrôeByãsToBuf„r
–pxSåómBuf„r, ( c⁄° 
uöt8_t
 * ) 
pvTxD©a
, 
xD©aLígthByãs
, 
xNextHód
 );

770  
xD©aLígthByãs
;

771 
	}
}

774 
size_t
 
	$xSåómBuf„rRe˚ive
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

775 * 
pvRxD©a
,

776 
size_t
 
xBuf„rLígthByãs
,

777 
TickTy≥_t
 
xTicksToWaô
 )

779 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

780 
size_t
 
xRe˚ivedLígth
 = 0, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
;

782 
	`c⁄figASSERT
–
pvRxD©a
 );

783 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

790 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

792 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

796 
xByãsToSt‹eMesßgeLígth
 = 0;

799 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

803 
	`èskENTER_CRITICAL
();

805 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

812 if–
xByãsAvaûabÀ
 <
xByãsToSt‹eMesßgeLígth
 )

815 –Ë
	`xTaskNŸifySèãCÀ¨
–
NULL
 );

818 
	`c⁄figASSERT
–
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 =
NULL
 );

819 
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 = 
	`xTaskGëCuºítTaskH™dÀ
();

823 
	`mtCOVERAGE_TEST_MARKER
();

826 
	`èskEXIT_CRITICAL
();

828 if–
xByãsAvaûabÀ
 <
xByãsToSt‹eMesßgeLígth
 )

831 
	`åa˚BLOCKING_ON_STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
 );

832 –Ë
	`xTaskNŸifyWaô
––
uöt32_t
 ) 0, ( uöt32_àË0, 
NULL
, 
xTicksToWaô
 );

833 
pxSåómBuf„r
->
xTaskWaôögToRe˚ive
 = 
NULL
;

836 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

840 
	`mtCOVERAGE_TEST_MARKER
();

845 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

853 if–
xByãsAvaûabÀ
 > 
xByãsToSt‹eMesßgeLígth
 )

855 
xRe˚ivedLígth
 = 
	`¥vRódMesßgeFromBuf„r
–
pxSåómBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xByãsAvaûabÀ
 );

858 if–
xRe˚ivedLígth
 !–
size_t
 ) 0 )

860 
	`åa˚STREAM_BUFFER_RECEIVE
–
xSåómBuf„r
, 
xRe˚ivedLígth
 );

861 
	`sbRECEIVE_COMPLETED
–
pxSåómBuf„r
 );

865 
	`mtCOVERAGE_TEST_MARKER
();

870 
	`åa˚STREAM_BUFFER_RECEIVE_FAILED
–
xSåómBuf„r
 );

871 
	`mtCOVERAGE_TEST_MARKER
();

874  
xRe˚ivedLígth
;

875 
	}
}

878 
size_t
 
	$xSåómBuf„rNextMesßgeLígthByãs
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

880 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

881 
size_t
 
xRëu∫
, 
xByãsAvaûabÀ
;

882 
c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 
xTempRëu∫
;

884 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

887 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

889 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

891 if–
xByãsAvaûabÀ
 > 
sbBYTES_TO_STORE_MESSAGE_LENGTH
 )

896 –Ë
	`¥vRódByãsFromBuf„r
–
pxSåómBuf„r
, ( 
uöt8_t
 * ) &
xTempRëu∫
, 
sbBYTES_TO_STORE_MESSAGE_LENGTH
,ÖxSåómBuf„r->
xTaû
 );

897 
xRëu∫
 = ( 
size_t
 ) 
xTempRëu∫
;

905 
	`c⁄figASSERT
–
xByãsAvaûabÀ
 == 0 );

906 
xRëu∫
 = 0;

911 
xRëu∫
 = 0;

914  
xRëu∫
;

915 
	}
}

918 
size_t
 
	$xSåómBuf„rRe˚iveFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

919 * 
pvRxD©a
,

920 
size_t
 
xBuf„rLígthByãs
,

921 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

923 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

924 
size_t
 
xRe˚ivedLígth
 = 0, 
xByãsAvaûabÀ
, 
xByãsToSt‹eMesßgeLígth
;

926 
	`c⁄figASSERT
–
pvRxD©a
 );

927 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

934 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

936 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

940 
xByãsToSt‹eMesßgeLígth
 = 0;

943 
xByãsAvaûabÀ
 = 
	`¥vByãsInBuf„r
–
pxSåómBuf„r
 );

950 if–
xByãsAvaûabÀ
 > 
xByãsToSt‹eMesßgeLígth
 )

952 
xRe˚ivedLígth
 = 
	`¥vRódMesßgeFromBuf„r
–
pxSåómBuf„r
, 
pvRxD©a
, 
xBuf„rLígthByãs
, 
xByãsAvaûabÀ
 );

955 if–
xRe˚ivedLígth
 !–
size_t
 ) 0 )

957 
	`sbRECEIVE_COMPLETED_FROM_ISR
–
pxSåómBuf„r
, 
pxHighîPri‹ôyTaskWokí
 );

961 
	`mtCOVERAGE_TEST_MARKER
();

966 
	`mtCOVERAGE_TEST_MARKER
();

969 
	`åa˚STREAM_BUFFER_RECEIVE_FROM_ISR
–
xSåómBuf„r
, 
xRe˚ivedLígth
 );

971  
xRe˚ivedLígth
;

972 
	}
}

975 
size_t
 
	$¥vRódMesßgeFromBuf„r
–
SåómBuf„r_t
 * 
pxSåómBuf„r
,

976 * 
pvRxD©a
,

977 
size_t
 
xBuf„rLígthByãs
,

978 
size_t
 
xByãsAvaûabÀ
 )

980 
size_t
 
xCou¡
, 
xNextMesßgeLígth
;

981 
c⁄figMESSAGE_BUFFER_LENGTH_TYPE
 
xTempNextMesßgeLígth
;

982 
size_t
 
xNextTaû
 = 
pxSåómBuf„r
->
xTaû
;

984 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

988 
xNextTaû
 = 
	`¥vRódByãsFromBuf„r
–
pxSåómBuf„r
, ( 
uöt8_t
 * ) &
xTempNextMesßgeLígth
, 
sbBYTES_TO_STORE_MESSAGE_LENGTH
, xNextTail );

989 
xNextMesßgeLígth
 = ( 
size_t
 ) 
xTempNextMesßgeLígth
;

993 
xByãsAvaûabÀ
 -
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

997 if–
xNextMesßgeLígth
 > 
xBuf„rLígthByãs
 )

1000 
xNextMesßgeLígth
 = 0;

1004 
	`mtCOVERAGE_TEST_MARKER
();

1011 
xNextMesßgeLígth
 = 
xBuf„rLígthByãs
;

1015 
xCou¡
 = 
	`c⁄figMIN
–
xNextMesßgeLígth
, 
xByãsAvaûabÀ
 );

1017 if–
xCou¡
 !–
size_t
 ) 0 )

1020 
pxSåómBuf„r
->
xTaû
 = 
	`¥vRódByãsFromBuf„r
–pxSåómBuf„r, ( 
uöt8_t
 * ) 
pvRxD©a
, 
xCou¡
, 
xNextTaû
 );

1023  
xCou¡
;

1024 
	}
}

1027 
Ba£Ty≥_t
 
	$xSåómBuf„rIsEm±y
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1029 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

1030 
Ba£Ty≥_t
 
xRëu∫
;

1031 
size_t
 
xTaû
;

1033 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

1036 
xTaû
 = 
pxSåómBuf„r
->xTail;

1038 if–
pxSåómBuf„r
->
xHód
 =
xTaû
 )

1040 
xRëu∫
 = 
pdTRUE
;

1044 
xRëu∫
 = 
pdFALSE
;

1047  
xRëu∫
;

1048 
	}
}

1051 
Ba£Ty≥_t
 
	$xSåómBuf„rIsFuŒ
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1053 
Ba£Ty≥_t
 
xRëu∫
;

1054 
size_t
 
xByãsToSt‹eMesßgeLígth
;

1055 c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

1057 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

1063 if––
pxSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 ) !–
uöt8_t
 ) 0 )

1065 
xByãsToSt‹eMesßgeLígth
 = 
sbBYTES_TO_STORE_MESSAGE_LENGTH
;

1069 
xByãsToSt‹eMesßgeLígth
 = 0;

1073 if–
	`xSåómBuf„rS∑˚sAvaûabÀ
–
xSåómBuf„r
 ) <
xByãsToSt‹eMesßgeLígth
 )

1075 
xRëu∫
 = 
pdTRUE
;

1079 
xRëu∫
 = 
pdFALSE
;

1082  
xRëu∫
;

1083 
	}
}

1086 
Ba£Ty≥_t
 
	$xSåómBuf„rSídCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

1087 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

1089 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

1090 
Ba£Ty≥_t
 
xRëu∫
;

1091 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1093 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

1095 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1097 if––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 !
NULL
 )

1099 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
,

1100 –
uöt32_t
 ) 0,

1101 
eNoA˘i⁄
,

1102 
pxHighîPri‹ôyTaskWokí
 );

1103 –
pxSåómBuf„r
 )->
xTaskWaôögToRe˚ive
 = 
NULL
;

1104 
xRëu∫
 = 
pdTRUE
;

1108 
xRëu∫
 = 
pdFALSE
;

1111 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1113  
xRëu∫
;

1114 
	}
}

1117 
Ba£Ty≥_t
 
	$xSåómBuf„rRe˚iveCom∂ëedFromISR
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

1118 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

1120 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 = 
xSåómBuf„r
;

1121 
Ba£Ty≥_t
 
xRëu∫
;

1122 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1124 
	`c⁄figASSERT
–
pxSåómBuf„r
 );

1126 
uxSavedI¡îru±Sètus
 = ( 
UBa£Ty≥_t
 ) 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1128 if––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 !
NULL
 )

1130 –Ë
	`xTaskNŸifyFromISR
––
pxSåómBuf„r
 )->
xTaskWaôögToSíd
,

1131 –
uöt32_t
 ) 0,

1132 
eNoA˘i⁄
,

1133 
pxHighîPri‹ôyTaskWokí
 );

1134 –
pxSåómBuf„r
 )->
xTaskWaôögToSíd
 = 
NULL
;

1135 
xRëu∫
 = 
pdTRUE
;

1139 
xRëu∫
 = 
pdFALSE
;

1142 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1144  
xRëu∫
;

1145 
	}
}

1148 
size_t
 
	$¥vWrôeByãsToBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

1149 c⁄° 
uöt8_t
 * 
pucD©a
,

1150 
size_t
 
xCou¡
,

1151 
size_t
 
xHód
 )

1153 
size_t
 
xFú°Lígth
;

1155 
	`c⁄figASSERT
–
xCou¡
 > ( 
size_t
 ) 0 );

1160 
xFú°Lígth
 = 
	`c⁄figMIN
–
pxSåómBuf„r
->
xLígth
 - 
xHód
, 
xCou¡
 );

1163 
	`c⁄figASSERT
––
xHód
 + 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1164 –Ë
	`mem˝y
––* ) ( &–
pxSåómBuf„r
->
pucBuf„r
[ 
xHód
 ] ) ), ( c⁄° * ) 
pucD©a
, 
xFú°Lígth
 );

1168 if–
xCou¡
 > 
xFú°Lígth
 )

1171 
	`c⁄figASSERT
––
xCou¡
 - 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1172 –Ë
	`mem˝y
––* ) 
pxSåómBuf„r
->
pucBuf„r
, ( c⁄° * ) &–
pucD©a
[ 
xFú°Lígth
 ] ), 
xCou¡
 - xFirstLength );

1176 
	`mtCOVERAGE_TEST_MARKER
();

1179 
xHód
 +
xCou¡
;

1181 if–
xHód
 >
pxSåómBuf„r
->
xLígth
 )

1183 
xHód
 -
pxSåómBuf„r
->
xLígth
;

1187 
	`mtCOVERAGE_TEST_MARKER
();

1190  
xHód
;

1191 
	}
}

1194 
size_t
 
	$¥vRódByãsFromBuf„r
–
SåómBuf„r_t
 * 
pxSåómBuf„r
,

1195 
uöt8_t
 * 
pucD©a
,

1196 
size_t
 
xCou¡
,

1197 
size_t
 
xTaû
 )

1199 
size_t
 
xFú°Lígth
;

1201 
	`c⁄figASSERT
–
xCou¡
 !–
size_t
 ) 0 );

1206 
xFú°Lígth
 = 
	`c⁄figMIN
–
pxSåómBuf„r
->
xLígth
 - 
xTaû
, 
xCou¡
 );

1210 
	`c⁄figASSERT
–
xFú°Lígth
 <
xCou¡
 );

1211 
	`c⁄figASSERT
––
xTaû
 + 
xFú°Lígth
 ) <
pxSåómBuf„r
->
xLígth
 );

1212 –Ë
	`mem˝y
––* ) 
pucD©a
, ( c⁄° * ) &–
pxSåómBuf„r
->
pucBuf„r
[ 
xTaû
 ] ), 
xFú°Lígth
 );

1216 if–
xCou¡
 > 
xFú°Lígth
 )

1219 –Ë
	`mem˝y
––* ) &–
pucD©a
[ 
xFú°Lígth
 ] ), ( * ) ( 
pxSåómBuf„r
->
pucBuf„r
 ), 
xCou¡
 - xFirstLength );

1223 
	`mtCOVERAGE_TEST_MARKER
();

1227 
xTaû
 +
xCou¡
;

1229 if–
xTaû
 >
pxSåómBuf„r
->
xLígth
 )

1231 
xTaû
 -
pxSåómBuf„r
->
xLígth
;

1234  
xTaû
;

1235 
	}
}

1238 
size_t
 
	$¥vByãsInBuf„r
–c⁄° 
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
 )

1241 
size_t
 
xCou¡
;

1243 
xCou¡
 = 
pxSåómBuf„r
->
xLígth
 +ÖxSåómBuf„r->
xHód
;

1244 
xCou¡
 -
pxSåómBuf„r
->
xTaû
;

1246 if–
xCou¡
 >
pxSåómBuf„r
->
xLígth
 )

1248 
xCou¡
 -
pxSåómBuf„r
->
xLígth
;

1252 
	`mtCOVERAGE_TEST_MARKER
();

1255  
xCou¡
;

1256 
	}
}

1259 
	$¥vInôüli£NewSåómBuf„r
–
SåómBuf„r_t
 * c⁄° 
pxSåómBuf„r
,

1260 
uöt8_t
 * c⁄° 
pucBuf„r
,

1261 
size_t
 
xBuf„rSizeByãs
,

1262 
size_t
 
xTriggîLevñByãs
,

1263 
uöt8_t
 
ucFœgs
 )

1268 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

1273 c⁄° 
Ba£Ty≥_t
 
xWrôeVÆue
 = 0x55;

1274 
	`c⁄figASSERT
–
	`mem£t
–
pucBuf„r
, ( Ë
xWrôeVÆue
, 
xBuf„rSizeByãs
 ) ==ÖucBuffer );

1278 –Ë
	`mem£t
––* ) 
pxSåómBuf„r
, 0x00, –
SåómBuf„r_t
 ) );

1279 
pxSåómBuf„r
->
pucBuf„r
 =ÖucBuffer;

1280 
pxSåómBuf„r
->
xLígth
 = 
xBuf„rSizeByãs
;

1281 
pxSåómBuf„r
->
xTriggîLevñByãs
 = xTriggerLevelBytes;

1282 
pxSåómBuf„r
->
ucFœgs
 = ucFlags;

1283 
	}
}

1285 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1287 
UBa£Ty≥_t
 
	$uxSåómBuf„rGëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1289  
xSåómBuf„r
->
uxSåómBuf„rNumbî
;

1290 
	}
}

1295 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1297 
	$vSåómBuf„rSëSåómBuf„rNumbî
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
,

1298 
UBa£Ty≥_t
 
uxSåómBuf„rNumbî
 )

1300 
xSåómBuf„r
->
uxSåómBuf„rNumbî
 = uxStreamBufferNumber;

1301 
	}
}

1306 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1308 
uöt8_t
 
	$ucSåómBuf„rGëSåómBuf„rTy≥
–
SåómBuf„rH™dÀ_t
 
xSåómBuf„r
 )

1310 –
xSåómBuf„r
->
ucFœgs
 & 
sbFLAGS_IS_MESSAGE_BUFFER
 );

1311 
	}
}

	@tasks.c

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

36 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

39 
	~"FªeRTOS.h
"

40 
	~"èsk.h
"

41 
	~"timîs.h
"

42 
	~"°ack_ma¸os.h
"

48 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


52 #i‡–
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 == 1 )

58 
	~<°dio.h
>

61 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

65 
	#èskYIELD_IF_USING_PREEMPTION
()

	)

67 
	#èskYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

71 
	#èskNOT_WAITING_NOTIFICATION
 ( ( 
uöt8_t
 ) 0 )

	)

72 
	#èskWAITING_NOTIFICATION
 ( ( 
uöt8_t
 ) 1 )

	)

73 
	#èskNOTIFICATION_RECEIVED
 ( ( 
uöt8_t
 ) 2 )

	)

79 
	#tskSTACK_FILL_BYTE
 ( 0xa5U )

	)

82 
	#tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
 ( ( 
uöt8_t
 ) 0 )

	)

83 
	#tskSTATICALLY_ALLOCATED_STACK_ONLY
 ( ( 
uöt8_t
 ) 1 )

	)

84 
	#tskSTATICALLY_ALLOCATED_STACK_AND_TCB
 ( ( 
uöt8_t
 ) 2 )

	)

89 #i‡––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 ) )

90 
	#tskSET_NEW_STACKS_TO_KNOWN_VALUE
 1

	)

92 
	#tskSET_NEW_STACKS_TO_KNOWN_VALUE
 0

	)

98 
	#tskRUNNING_CHAR
 ( 'X' )

	)

99 
	#tskBLOCKED_CHAR
 ( 'B' )

	)

100 
	#tskREADY_CHAR
 ( 'R' )

	)

101 
	#tskDELETED_CHAR
 ( 'D' )

	)

102 
	#tskSUSPENDED_CHAR
 ( 'S' )

	)

108 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


109 

	)

114 #i‚de‡
c⁄figIDLE_TASK_NAME


115 
	#c⁄figIDLE_TASK_NAME
 "IDLE"

	)

118 #i‡–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

126 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) \

	)

128 if––
	guxPri‹ôy
 ) > 
	guxT›RódyPri‹ôy
 ) \

130 
	guxT›RódyPri‹ôy
 = ( 
uxPri‹ôy
 ); \

136 
	#èskSELECT_HIGHEST_PRIORITY_TASK
(Ë\

	)

138 
UBa£Ty≥_t
 
	guxT›Pri‹ôy
 = 
uxT›RódyPri‹ôy
; \

141  
li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) ) \

143 
c⁄figASSERT
–
uxT›Pri‹ôy
 ); \

144 --
	guxT›Pri‹ôy
; \

149 
li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

150 
	guxT›RódyPri‹ôy
 = 
uxT›Pri‹ôy
; \

158 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 )

	)

159 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 )

	)

168 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) 
	`p‹tRECORD_READY_PRIORITY
–uxPri‹ôy, 
uxT›RódyPri‹ôy
 )

	)

172 
	#èskSELECT_HIGHEST_PRIORITY_TASK
(Ë\

	)

174 
UBa£Ty≥_t
 
	guxT›Pri‹ôy
; \

177 
p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxT›RódyPri‹ôy
 ); \

178 
c⁄figASSERT
–
li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) > 0 ); \

179 
li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

187 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 ) \

	)

189 if–
li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ ( 
uxPri‹ôy
 ) ] ) ) =–
UBa£Ty≥_t
 ) 0 ) \

191 
p‹tRESET_READY_PRIORITY
––
uxPri‹ôy
 ), ( 
uxT›RódyPri‹ôy
 ) ); \

201 
	#èskSWITCH_DELAYED_LISTS
(Ë\

	)

203 
Li°_t
 * 
	gpxTemp
; \

206 
c⁄figASSERT
––
li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) ) ); \

208 
	gpxTemp
 = 
pxDñayedTaskLi°
; \

209 
	gpxDñayedTaskLi°
 = 
pxOvîÊowDñayedTaskLi°
; \

210 
	gpxOvîÊowDñayedTaskLi°
 = 
pxTemp
; \

211 
	gxNumOfOvîÊows
++; \

212 
¥vRe£tNextTaskUnblockTime
(); \

221 
	#¥vAddTaskToRódyLi°
–
pxTCB
 ) \

	)

222 
åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 ); \

223 
èskRECORD_READY_PRIORITY
––
pxTCB
 )->
uxPri‹ôy
 ); \

224 
li°INSERT_END
–&–
pxRódyTasksLi°s
[ ( 
pxTCB
 )->
uxPri‹ôy
 ] ), &––pxTCB )->
xSèãLi°Iãm
 ) ); \

225 
	$åa˚POST_MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

234 
	#¥vGëTCBFromH™dÀ
–
pxH™dÀ
 ) ( ( (ÖxH™dÀ ) =
NULL
 ) ? 
pxCuºítTCB
 : (ÖxH™dÀ ) )

	)

244 #i‡–
c⁄figUSE_16_BIT_TICKS
 == 1 )

245 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x8000U

	)

247 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x80000000UL

	)

255 
	stskTaskC⁄åﬁBlock


257 vﬁ©ûê
SèckTy≥_t
 * 
pxT›OfSèck
;

259 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

260 
xMPU_SETTINGS
 
xMPUSëtögs
;

263 
Li°Iãm_t
 
xSèãLi°Iãm
;

264 
Li°Iãm_t
 
xEvítLi°Iãm
;

265 
UBa£Ty≥_t
 
uxPri‹ôy
;

266 
SèckTy≥_t
 * 
pxSèck
;

267 
pcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

269 #i‡––
p‹tSTACK_GROWTH
 > 0 ) || ( 
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 ) )

270 
SèckTy≥_t
 * 
pxEndOfSèck
;

273 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

274 
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
;

277 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

278 
UBa£Ty≥_t
 
uxTCBNumbî
;

279 
UBa£Ty≥_t
 
uxTaskNumbî
;

282 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

283 
UBa£Ty≥_t
 
uxBa£Pri‹ôy
;

284 
UBa£Ty≥_t
 
uxMuãxesHñd
;

287 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

288 
TaskHookFun˘i⁄_t
 
pxTaskTag
;

291 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

292 * 
pvThªadLoˇlSt‹agePoöãrs
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

295 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

296 
c⁄figRUN_TIME_COUNTER_TYPE
 
ulRunTimeCou¡î
;

299 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

311 
_ªít
 
xNewLib_ªít
;

314 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

315 vﬁ©ûê
uöt32_t
 
ulNŸifõdVÆue
[ 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 ];

316 vﬁ©ûê
uöt8_t
 
ucNŸifySèã
[ 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 ];

321 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

322 
uöt8_t
 
ucSètiˇŒyAŒoˇãd
;

325 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

326 
uöt8_t
 
ucDñayAb‹ãd
;

329 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

330 
iTaskEºno
;

332 } 
	ttskTCB
;

336 
tskTCB
 
	tTCB_t
;

340 
PRIVILEGED_DATA
 
TCB_t
 * vﬁ©ûê
pxCuºítTCB
 = 
NULL
;

346 
PRIVILEGED_DATA
 
Li°_t
 
pxRódyTasksLi°s
[ 
c⁄figMAX_PRIORITIES
 ];

347 
PRIVILEGED_DATA
 
Li°_t
 
xDñayedTaskLi°1
;

348 
PRIVILEGED_DATA
 
Li°_t
 
xDñayedTaskLi°2
;

349 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
pxDñayedTaskLi°
;

350 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
pxOvîÊowDñayedTaskLi°
;

351 
PRIVILEGED_DATA
 
Li°_t
 
xPídögRódyLi°
;

353 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

355 
PRIVILEGED_DATA
 
Li°_t
 
xTasksWaôögTîmö©i⁄
;

356 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
uxDñëedTasksWaôögCÀ™Up
 = ( UBaseType_t ) 0U;

360 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

362 
PRIVILEGED_DATA
 
Li°_t
 
xSu•ídedTaskLi°
;

368 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

369 
FªeRTOS_î∫o
 = 0;

373 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
uxCuºítNumbîOfTasks
 = ( UBaseType_t ) 0U;

374 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
xTickCou¡
 = ( TickTy≥_àË
c⁄figINITIAL_TICK_COUNT
;

375 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
uxT›RódyPri‹ôy
 = 
tskIDLE_PRIORITY
;

376 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
xScheduÀrRu¬ög
 = 
pdFALSE
;

377 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
xPídedTicks
 = ( TickType_t ) 0U;

378 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
xYõldPídög
 = 
pdFALSE
;

379 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
xNumOfOvîÊows
 = ( BaseType_t ) 0;

380 
PRIVILEGED_DATA
 
UBa£Ty≥_t
 
uxTaskNumbî
 = ( UBaseType_t ) 0U;

381 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
xNextTaskUnblockTime
 = ( TickType_t ) 0U;

382 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
xIdÀTaskH™dÀ
 = 
NULL
;

387 c⁄° vﬁ©ûê
UBa£Ty≥_t
 
uxT›U£dPri‹ôy
 = 
c⁄figMAX_PRIORITIES
 - 1U;

397 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
uxScheduÀrSu•íded
 = ( UBa£Ty≥_àË
pdFALSE
;

399 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

403 
PRIVILEGED_DATA
 
c⁄figRUN_TIME_COUNTER_TYPE
 
ulTaskSwôchedInTime
 = 0UL;

404 
PRIVILEGED_DATA
 vﬁ©ûê
c⁄figRUN_TIME_COUNTER_TYPE
 
ulTŸÆRunTime
 = 0UL;

419 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

421 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

429 
	$¥vInôüli£TaskLi°s
–Ë
PRIVILEGED_FUNCTION
;

442 
	$p‹tTASK_FUNCTION_PROTO
–
¥vIdÀTask
, 
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

451 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

453 
	$¥vDñëeTCB
–
TCB_t
 * 
pxTCB
 ) 
PRIVILEGED_FUNCTION
;

462 
	$¥vCheckTasksWaôögTîmö©i⁄
–Ë
PRIVILEGED_FUNCTION
;

468 
	$¥vAddCuºítTaskToDñayedLi°
–
TickTy≥_t
 
xTicksToWaô
,

469 c⁄° 
Ba£Ty≥_t
 
xC™BlockIndeföôñy
 ) 
PRIVILEGED_FUNCTION
;

479 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

481 
UBa£Ty≥_t
 
	$¥vLi°TasksWôhöSögÀLi°
–
TaskSètus_t
 * 
pxTaskSètusAºay
,

482 
Li°_t
 * 
pxLi°
,

483 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

491 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

493 
TCB_t
 * 
	$¥vSórchF‹NameWôhöSögÀLi°
–
Li°_t
 * 
pxLi°
,

494 c⁄° 
pcNameToQuîy
[] ) 
PRIVILEGED_FUNCTION
;

503 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 ) )

505 
c⁄figSTACK_DEPTH_TYPE
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 ) 
PRIVILEGED_FUNCTION
;

518 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

520 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
–Ë
PRIVILEGED_FUNCTION
;

528 
	$¥vRe£tNextTaskUnblockTime
–Ë
PRIVILEGED_FUNCTION
;

530 #i‡–––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
c⁄figGENERATE_RUN_TIME_STATS
 == 1 ) ) && \

531 –
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) && \

532 –
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

538 * 
	$¥vWrôeNameToBuf„r
–* 
pcBuf„r
,

539 c⁄° * 
pcTaskName
 ) 
PRIVILEGED_FUNCTION
;

547 
	$¥vInôüli£NewTask
–
TaskFun˘i⁄_t
 
pxTaskCode
,

548 c⁄° * c⁄° 
pcName
,

549 c⁄° 
uöt32_t
 
ulSèckDïth
,

550 * c⁄° 
pvP¨amëîs
,

551 
UBa£Ty≥_t
 
uxPri‹ôy
,

552 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
,

553 
TCB_t
 * 
pxNewTCB
,

554 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

560 
	$¥vAddNewTaskToRódyLi°
–
TCB_t
 * 
pxNewTCB
 ) 
PRIVILEGED_FUNCTION
;

567 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


569 
	$‰ìπos_èsks_c_addôi⁄s_öô
–Ë
PRIVILEGED_FUNCTION
;

575 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

577 
TaskH™dÀ_t
 
	$xTaskCª©eSètic
–
TaskFun˘i⁄_t
 
pxTaskCode
,

578 c⁄° * c⁄° 
pcName
,

579 c⁄° 
uöt32_t
 
ulSèckDïth
,

580 * c⁄° 
pvP¨amëîs
,

581 
UBa£Ty≥_t
 
uxPri‹ôy
,

582 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
,

583 
SèticTask_t
 * c⁄° 
pxTaskBuf„r
 )

585 
TCB_t
 * 
pxNewTCB
;

586 
TaskH™dÀ_t
 
xRëu∫
;

588 
	`c⁄figASSERT
–
puxSèckBuf„r
 !
NULL
 );

589 
	`c⁄figASSERT
–
pxTaskBuf„r
 !
NULL
 );

591 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

596 vﬁ©ûê
size_t
 
xSize
 = –
SèticTask_t
 );

597 
	`c⁄figASSERT
–
xSize
 =–
TCB_t
 ) );

598 –Ë
xSize
;

602 if––
pxTaskBuf„r
 !
NULL
 ) && ( 
puxSèckBuf„r
 != NULL ) )

606 
pxNewTCB
 = ( 
TCB_t
 * ) 
pxTaskBuf„r
;

607 
	`mem£t
––* ) 
pxNewTCB
, 0x00, –
TCB_t
 ) );

608 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
puxSèckBuf„r
;

610 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

614 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
;

618 
	`¥vInôüli£NewTask
–
pxTaskCode
, 
pcName
, 
ulSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, &
xRëu∫
, 
pxNewTCB
, 
NULL
 );

619 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

623 
xRëu∫
 = 
NULL
;

626  
xRëu∫
;

627 
	}
}

632 #i‡––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 ) )

634 
Ba£Ty≥_t
 
	$xTaskCª©eRe°ri˘edSètic
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
,

635 
TaskH™dÀ_t
 * 
pxCª©edTask
 )

637 
TCB_t
 * 
pxNewTCB
;

638 
Ba£Ty≥_t
 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

640 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 );

641 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
pxTaskBuf„r
 !
NULL
 );

643 if––
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 ) && (ÖxTaskDeföôi⁄->
pxTaskBuf„r
 != NULL ) )

648 
pxNewTCB
 = ( 
TCB_t
 * ) 
pxTaskDeföôi⁄
->
pxTaskBuf„r
;

649 
	`mem£t
––* ) 
pxNewTCB
, 0x00, –
TCB_t
 ) );

652 
pxNewTCB
->
pxSèck
 = 
pxTaskDeföôi⁄
->
puxSèckBuf„r
;

654 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

658 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
;

662 
	`¥vInôüli£NewTask
–
pxTaskDeföôi⁄
->
pvTaskCode
,

663 
pxTaskDeföôi⁄
->
pcName
,

664 –
uöt32_t
 ) 
pxTaskDeföôi⁄
->
usSèckDïth
,

665 
pxTaskDeföôi⁄
->
pvP¨amëîs
,

666 
pxTaskDeföôi⁄
->
uxPri‹ôy
,

667 
pxCª©edTask
, 
pxNewTCB
,

668 
pxTaskDeföôi⁄
->
xRegi⁄s
 );

670 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

671 
xRëu∫
 = 
pdPASS
;

674  
xRëu∫
;

675 
	}
}

680 #i‡––
p‹tUSING_MPU_WRAPPERS
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

682 
Ba£Ty≥_t
 
	$xTaskCª©eRe°ri˘ed
–c⁄° 
TaskP¨amëîs_t
 * c⁄° 
pxTaskDeföôi⁄
,

683 
TaskH™dÀ_t
 * 
pxCª©edTask
 )

685 
TCB_t
 * 
pxNewTCB
;

686 
Ba£Ty≥_t
 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

688 
	`c⁄figASSERT
–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 );

690 if–
pxTaskDeföôi⁄
->
puxSèckBuf„r
 !
NULL
 )

695 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

697 if–
pxNewTCB
 !
NULL
 )

699 
	`mem£t
––* ) 
pxNewTCB
, 0x00, –
TCB_t
 ) );

702 
pxNewTCB
->
pxSèck
 = 
pxTaskDeföôi⁄
->
puxSèckBuf„r
;

704 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

709 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskSTATICALLY_ALLOCATED_STACK_ONLY
;

713 
	`¥vInôüli£NewTask
–
pxTaskDeföôi⁄
->
pvTaskCode
,

714 
pxTaskDeföôi⁄
->
pcName
,

715 –
uöt32_t
 ) 
pxTaskDeföôi⁄
->
usSèckDïth
,

716 
pxTaskDeföôi⁄
->
pvP¨amëîs
,

717 
pxTaskDeföôi⁄
->
uxPri‹ôy
,

718 
pxCª©edTask
, 
pxNewTCB
,

719 
pxTaskDeföôi⁄
->
xRegi⁄s
 );

721 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

722 
xRëu∫
 = 
pdPASS
;

726  
xRëu∫
;

727 
	}
}

732 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

734 
Ba£Ty≥_t
 
	$xTaskCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
,

735 c⁄° * c⁄° 
pcName
,

736 c⁄° 
c⁄figSTACK_DEPTH_TYPE
 
usSèckDïth
,

737 * c⁄° 
pvP¨amëîs
,

738 
UBa£Ty≥_t
 
uxPri‹ôy
,

739 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
 )

741 
TCB_t
 * 
pxNewTCB
;

742 
Ba£Ty≥_t
 
xRëu∫
;

747 #i‡–
p‹tSTACK_GROWTH
 > 0 )

752 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

754 if–
pxNewTCB
 !
NULL
 )

756 
	`mem£t
––* ) 
pxNewTCB
, 0x00, –
TCB_t
 ) );

761 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
	`pvP‹tMÆlocSèck
––––
size_t
 ) 
usSèckDïth
 ) * ( StackType_t ) ) );

763 if–
pxNewTCB
->
pxSèck
 =
NULL
 )

766 
	`vP‹tFªe
–
pxNewTCB
 );

767 
pxNewTCB
 = 
NULL
;

773 
SèckTy≥_t
 * 
pxSèck
;

776 
pxSèck
 = 
	`pvP‹tMÆlocSèck
––––
size_t
 ) 
usSèckDïth
 ) * –
SèckTy≥_t
 ) ) );

778 if–
pxSèck
 !
NULL
 )

781 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

783 if–
pxNewTCB
 !
NULL
 )

785 
	`mem£t
––* ) 
pxNewTCB
, 0x00, –
TCB_t
 ) );

788 
pxNewTCB
->
pxSèck
 =ÖxStack;

794 
	`vP‹tFªeSèck
–
pxSèck
 );

799 
pxNewTCB
 = 
NULL
;

804 if–
pxNewTCB
 !
NULL
 )

806 #i‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

810 
pxNewTCB
->
ucSètiˇŒyAŒoˇãd
 = 
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
;

814 
	`¥vInôüli£NewTask
–
pxTaskCode
, 
pcName
, ( 
uöt32_t
 ) 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
, 
pxNewTCB
, 
NULL
 );

815 
	`¥vAddNewTaskToRódyLi°
–
pxNewTCB
 );

816 
xRëu∫
 = 
pdPASS
;

820 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

823  
xRëu∫
;

824 
	}
}

829 
	$¥vInôüli£NewTask
–
TaskFun˘i⁄_t
 
pxTaskCode
,

830 c⁄° * c⁄° 
pcName
,

831 c⁄° 
uöt32_t
 
ulSèckDïth
,

832 * c⁄° 
pvP¨amëîs
,

833 
UBa£Ty≥_t
 
uxPri‹ôy
,

834 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
,

835 
TCB_t
 * 
pxNewTCB
,

836 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

838 
SèckTy≥_t
 * 
pxT›OfSèck
;

839 
UBa£Ty≥_t
 
x
;

841 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

843 
Ba£Ty≥_t
 
xRunPrivûeged
;

845 if––
uxPri‹ôy
 & 
p‹tPRIVILEGE_BIT
 ) != 0U )

847 
xRunPrivûeged
 = 
pdTRUE
;

851 
xRunPrivûeged
 = 
pdFALSE
;

853 
uxPri‹ôy
 &~
p‹tPRIVILEGE_BIT
;

857 #i‡–
tskSET_NEW_STACKS_TO_KNOWN_VALUE
 == 1 )

860 –Ë
	`mem£t
–
pxNewTCB
->
pxSèck
, ( Ë
tskSTACK_FILL_BYTE
, ( 
size_t
 ) 
ulSèckDïth
 * –
SèckTy≥_t
 ) );

868 #i‡–
p‹tSTACK_GROWTH
 < 0 )

870 
pxT›OfSèck
 = &–
pxNewTCB
->
pxSèck
[ 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 ] );

871 
pxT›OfSèck
 = ( 
SèckTy≥_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 )ÖxT›OfSèck ) & ( ~––p‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

874 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxT›OfSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

876 #i‡–
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 )

880 
pxNewTCB
->
pxEndOfSèck
 = 
pxT›OfSèck
;

886 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
;

889 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxNewTCB
->
pxSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

893 
pxNewTCB
->
pxEndOfSèck
 =ÖxNewTCB->
pxSèck
 + ( 
ulSèckDïth
 - ( 
uöt32_t
 ) 1 );

898 if–
pcName
 !
NULL
 )

900  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

902 
pxNewTCB
->
pcTaskName
[ 
x
 ] = 
pcName
[ x ];

907 if–
pcName
[ 
x
 ] == ( ) 0x00 )

913 
	`mtCOVERAGE_TEST_MARKER
();

919 
pxNewTCB
->
pcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 - 1 ] = '\0';

923 
	`mtCOVERAGE_TEST_MARKER
();

927 
	`c⁄figASSERT
–
uxPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 );

929 if–
uxPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

931 
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

935 
	`mtCOVERAGE_TEST_MARKER
();

938 
pxNewTCB
->
uxPri‹ôy
 = uxPriority;

939 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

941 
pxNewTCB
->
uxBa£Pri‹ôy
 = 
uxPri‹ôy
;

945 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xSèãLi°Iãm
 ) );

946 
	`vLi°Inôüli£Iãm
–&–
pxNewTCB
->
xEvítLi°Iãm
 ) );

950 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xSèãLi°Iãm
 ),ÖxNewTCB );

953 
	`li°SET_LIST_ITEM_VALUE
–&–
pxNewTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 );

954 
	`li°SET_LIST_ITEM_OWNER
–&–
pxNewTCB
->
xEvítLi°Iãm
 ),ÖxNewTCB );

956 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

958 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxNewTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
,ÖxNewTCB->
pxSèck
, 
ulSèckDïth
 );

963 –Ë
xRegi⁄s
;

967 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

972 
	`_REENT_INIT_PTR
––&–
pxNewTCB
->
xNewLib_ªít
 ) ) );

980 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

985 #i‡–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

987 #i‡–
p‹tSTACK_GROWTH
 < 0 )

989 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxSèck
, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

993 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxEndOfSèck
, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

999 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

1008 #i‡–
p‹tHAS_STACK_OVERFLOW_CHECKING
 == 1 )

1010 #i‡–
p‹tSTACK_GROWTH
 < 0 )

1012 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxSèck
, 
pxTaskCode
, 
pvP¨amëîs
 );

1016 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck,ÖxNewTCB->
pxEndOfSèck
, 
pxTaskCode
, 
pvP¨amëîs
 );

1022 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
 );

1028 if–
pxCª©edTask
 !
NULL
 )

1032 *
pxCª©edTask
 = ( 
TaskH™dÀ_t
 ) 
pxNewTCB
;

1036 
	`mtCOVERAGE_TEST_MARKER
();

1038 
	}
}

1041 
	$¥vAddNewTaskToRódyLi°
–
TCB_t
 * 
pxNewTCB
 )

1045 
	`èskENTER_CRITICAL
();

1047 
uxCuºítNumbîOfTasks
++;

1049 if–
pxCuºítTCB
 =
NULL
 )

1053 
pxCuºítTCB
 = 
pxNewTCB
;

1055 if–
uxCuºítNumbîOfTasks
 =–
UBa£Ty≥_t
 ) 1 )

1060 
	`¥vInôüli£TaskLi°s
();

1064 
	`mtCOVERAGE_TEST_MARKER
();

1072 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

1074 if–
pxCuºítTCB
->
uxPri‹ôy
 <
pxNewTCB
->uxPriority )

1076 
pxCuºítTCB
 = 
pxNewTCB
;

1080 
	`mtCOVERAGE_TEST_MARKER
();

1085 
	`mtCOVERAGE_TEST_MARKER
();

1089 
uxTaskNumbî
++;

1091 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1094 
pxNewTCB
->
uxTCBNumbî
 = 
uxTaskNumbî
;

1097 
	`åa˚TASK_CREATE
–
pxNewTCB
 );

1099 
	`¥vAddTaskToRódyLi°
–
pxNewTCB
 );

1101 
	`p‹tSETUP_TCB
–
pxNewTCB
 );

1103 
	`èskEXIT_CRITICAL
();

1105 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1109 if–
pxCuºítTCB
->
uxPri‹ôy
 < 
pxNewTCB
->uxPriority )

1111 
	`èskYIELD_IF_USING_PREEMPTION
();

1115 
	`mtCOVERAGE_TEST_MARKER
();

1120 
	`mtCOVERAGE_TEST_MARKER
();

1122 
	}
}

1125 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1127 
	$vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 )

1129 
TCB_t
 * 
pxTCB
;

1131 
	`èskENTER_CRITICAL
();

1135 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToDñëe
 );

1138 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1140 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1144 
	`mtCOVERAGE_TEST_MARKER
();

1148 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1150 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1154 
	`mtCOVERAGE_TEST_MARKER
();

1161 
uxTaskNumbî
++;

1163 if–
pxTCB
 =
pxCuºítTCB
 )

1170 
	`vLi°In£πEnd
–&
xTasksWaôögTîmö©i⁄
, &–
pxTCB
->
xSèãLi°Iãm
 ) );

1175 ++
uxDñëedTasksWaôögCÀ™Up
;

1179 
	`åa˚TASK_DELETE
–
pxTCB
 );

1186 
	`p‹tPRE_TASK_DELETE_HOOK
–
pxTCB
, &
xYõldPídög
 );

1190 --
uxCuºítNumbîOfTasks
;

1191 
	`åa˚TASK_DELETE
–
pxTCB
 );

1195 
	`¥vRe£tNextTaskUnblockTime
();

1198 
	`èskEXIT_CRITICAL
();

1203 if–
pxTCB
 !
pxCuºítTCB
 )

1205 
	`¥vDñëeTCB
–
pxTCB
 );

1210 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1212 if–
pxTCB
 =
pxCuºítTCB
 )

1214 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1215 
	`p‹tYIELD_WITHIN_API
();

1219 
	`mtCOVERAGE_TEST_MARKER
();

1222 
	}
}

1227 #i‡–
INCLUDE_xTaskDñayU¡û
 == 1 )

1229 
Ba£Ty≥_t
 
	$xTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
,

1230 c⁄° 
TickTy≥_t
 
xTimeIn¸emít
 )

1232 
TickTy≥_t
 
xTimeToWake
;

1233 
Ba£Ty≥_t
 
xAÃódyYõlded
, 
xShouldDñay
 = 
pdFALSE
;

1235 
	`c⁄figASSERT
–
pxPªviousWakeTime
 );

1236 
	`c⁄figASSERT
––
xTimeIn¸emít
 > 0U ) );

1237 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1239 
	`vTaskSu•ídAŒ
();

1243 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

1246 
xTimeToWake
 = *
pxPªviousWakeTime
 + 
xTimeIn¸emít
;

1248 if–
xC⁄°TickCou¡
 < *
pxPªviousWakeTime
 )

1255 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) && ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

1257 
xShouldDñay
 = 
pdTRUE
;

1261 
	`mtCOVERAGE_TEST_MARKER
();

1269 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) || ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

1271 
xShouldDñay
 = 
pdTRUE
;

1275 
	`mtCOVERAGE_TEST_MARKER
();

1280 *
pxPªviousWakeTime
 = 
xTimeToWake
;

1282 if–
xShouldDñay
 !
pdFALSE
 )

1284 
	`åa˚TASK_DELAY_UNTIL
–
xTimeToWake
 );

1288 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 - 
xC⁄°TickCou¡
, 
pdFALSE
 );

1292 
	`mtCOVERAGE_TEST_MARKER
();

1295 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

1299 if–
xAÃódyYõlded
 =
pdFALSE
 )

1301 
	`p‹tYIELD_WITHIN_API
();

1305 
	`mtCOVERAGE_TEST_MARKER
();

1308  
xShouldDñay
;

1309 
	}
}

1314 #i‡–
INCLUDE_vTaskDñay
 == 1 )

1316 
	$vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 )

1318 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

1321 if–
xTicksToDñay
 > ( 
TickTy≥_t
 ) 0U )

1323 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1324 
	`vTaskSu•ídAŒ
();

1326 
	`åa˚TASK_DELAY
();

1335 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToDñay
, 
pdFALSE
 );

1337 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

1341 
	`mtCOVERAGE_TEST_MARKER
();

1346 if–
xAÃódyYõlded
 =
pdFALSE
 )

1348 
	`p‹tYIELD_WITHIN_API
();

1352 
	`mtCOVERAGE_TEST_MARKER
();

1354 
	}
}

1359 #i‡––
INCLUDE_eTaskGëSèã
 =1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_xTaskAb‹tDñay
 == 1 ) )

1361 
eTaskSèã
 
	$eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 )

1363 
eTaskSèã
 
eRëu∫
;

1364 
Li°_t
 c⁄° * 
pxSèãLi°
, * 
pxDñayedLi°
, * 
pxOvîÊowedDñayedLi°
;

1365 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = 
xTask
;

1367 
	`c⁄figASSERT
–
pxTCB
 );

1369 if–
pxTCB
 =
pxCuºítTCB
 )

1372 
eRëu∫
 = 
eRu¬ög
;

1376 
	`èskENTER_CRITICAL
();

1378 
pxSèãLi°
 = 
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1379 
pxDñayedLi°
 = 
pxDñayedTaskLi°
;

1380 
pxOvîÊowedDñayedLi°
 = 
pxOvîÊowDñayedTaskLi°
;

1382 
	`èskEXIT_CRITICAL
();

1384 if––
pxSèãLi°
 =
pxDñayedLi°
 ) || (ÖxSèãLi° =
pxOvîÊowedDñayedLi°
 ) )

1388 
eRëu∫
 = 
eBlocked
;

1391 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1392 if–
pxSèãLi°
 =&
xSu•ídedTaskLi°
 )

1397 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 )

1399 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

1401 
Ba£Ty≥_t
 
x
;

1408 
eRëu∫
 = 
eSu•íded
;

1410  
x
 = 0; x < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
; x++ )

1412 if–
pxTCB
->
ucNŸifySèã
[ 
x
 ] =
èskWAITING_NOTIFICATION
 )

1414 
eRëu∫
 = 
eBlocked
;

1421 
eRëu∫
 = 
eSu•íded
;

1427 
eRëu∫
 = 
eBlocked
;

1432 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1433 if––
pxSèãLi°
 =&
xTasksWaôögTîmö©i⁄
 ) || (ÖxSèãLi° =
NULL
 ) )

1438 
eRëu∫
 = 
eDñëed
;

1446 
eRëu∫
 = 
eRódy
;

1450  
eRëu∫
;

1451 
	}
}

1456 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1458 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGë
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1460 
TCB_t
 c⁄° * 
pxTCB
;

1461 
UBa£Ty≥_t
 
uxRëu∫
;

1463 
	`èskENTER_CRITICAL
();

1467 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1468 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1470 
	`èskEXIT_CRITICAL
();

1472  
uxRëu∫
;

1473 
	}
}

1478 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1480 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGëFromISR
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1482 
TCB_t
 c⁄° * 
pxTCB
;

1483 
UBa£Ty≥_t
 
uxRëu∫
, 
uxSavedI¡îru±Sèã
;

1501 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1503 
uxSavedI¡îru±Sèã
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1507 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1508 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1510 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sèã
 );

1512  
uxRëu∫
;

1513 
	}
}

1518 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

1520 
	$vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
,

1521 
UBa£Ty≥_t
 
uxNewPri‹ôy
 )

1523 
TCB_t
 * 
pxTCB
;

1524 
UBa£Ty≥_t
 
uxCuºítBa£Pri‹ôy
, 
uxPri‹ôyU£dOnE¡ry
;

1525 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1527 
	`c⁄figASSERT
–
uxNewPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 );

1530 if–
uxNewPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

1532 
uxNewPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

1536 
	`mtCOVERAGE_TEST_MARKER
();

1539 
	`èskENTER_CRITICAL
();

1543 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1545 
	`åa˚TASK_PRIORITY_SET
–
pxTCB
, 
uxNewPri‹ôy
 );

1547 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1549 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxBa£Pri‹ôy
;

1553 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

1557 if–
uxCuºítBa£Pri‹ôy
 !
uxNewPri‹ôy
 )

1561 if–
uxNewPri‹ôy
 > 
uxCuºítBa£Pri‹ôy
 )

1563 if–
pxTCB
 !
pxCuºítTCB
 )

1568 if–
uxNewPri‹ôy
 >
pxCuºítTCB
->
uxPri‹ôy
 )

1570 
xYõldRequúed
 = 
pdTRUE
;

1574 
	`mtCOVERAGE_TEST_MARKER
();

1584 if–
pxTCB
 =
pxCuºítTCB
 )

1589 
xYõldRequúed
 = 
pdTRUE
;

1601 
uxPri‹ôyU£dOnE¡ry
 = 
pxTCB
->
uxPri‹ôy
;

1603 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1607 if–
pxTCB
->
uxBa£Pri‹ôy
 =pxTCB->
uxPri‹ôy
 )

1609 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1613 
	`mtCOVERAGE_TEST_MARKER
();

1617 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxNewPri‹ôy
;

1621 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1627 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

1629 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxNewPri‹ôy
 ) );

1633 
	`mtCOVERAGE_TEST_MARKER
();

1640 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôyU£dOnE¡ry
 ] ), &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

1645 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1650 
	`p‹tRESET_READY_PRIORITY
–
uxPri‹ôyU£dOnE¡ry
, 
uxT›RódyPri‹ôy
 );

1654 
	`mtCOVERAGE_TEST_MARKER
();

1657 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1661 
	`mtCOVERAGE_TEST_MARKER
();

1664 if–
xYõldRequúed
 !
pdFALSE
 )

1666 
	`èskYIELD_IF_USING_PREEMPTION
();

1670 
	`mtCOVERAGE_TEST_MARKER
();

1675 –Ë
uxPri‹ôyU£dOnE¡ry
;

1678 
	`èskEXIT_CRITICAL
();

1679 
	}
}

1684 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1686 
	$vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 )

1688 
TCB_t
 * 
pxTCB
;

1690 
	`èskENTER_CRITICAL
();

1694 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSu•íd
 );

1696 
	`åa˚TASK_SUSPEND
–
pxTCB
 );

1700 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1702 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1706 
	`mtCOVERAGE_TEST_MARKER
();

1710 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1712 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1716 
	`mtCOVERAGE_TEST_MARKER
();

1719 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xSèãLi°Iãm
 ) );

1721 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

1723 
Ba£Ty≥_t
 
x
;

1725  
x
 = 0; x < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
; x++ )

1727 if–
pxTCB
->
ucNŸifySèã
[ 
x
 ] =
èskWAITING_NOTIFICATION
 )

1731 
pxTCB
->
ucNŸifySèã
[ 
x
 ] = 
èskNOT_WAITING_NOTIFICATION
;

1737 
	`èskEXIT_CRITICAL
();

1739 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1743 
	`èskENTER_CRITICAL
();

1745 
	`¥vRe£tNextTaskUnblockTime
();

1747 
	`èskEXIT_CRITICAL
();

1751 
	`mtCOVERAGE_TEST_MARKER
();

1754 if–
pxTCB
 =
pxCuºítTCB
 )

1756 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1759 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1760 
	`p‹tYIELD_WITHIN_API
();

1767 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =
uxCuºítNumbîOfTasks
 )

1773 
pxCuºítTCB
 = 
NULL
;

1777 
	`vTaskSwôchC⁄ãxt
();

1783 
	`mtCOVERAGE_TEST_MARKER
();

1785 
	}
}

1790 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1792 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1794 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

1795 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = 
xTask
;

1801 
	`c⁄figASSERT
–
xTask
 );

1804 if–
	`li°IS_CONTAINED_WITHIN
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

1807 if–
	`li°IS_CONTAINED_WITHIN
–&
xPídögRódyLi°
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) =
pdFALSE
 )

1811 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) !
pdFALSE
 )

1813 
xRëu∫
 = 
pdTRUE
;

1817 
	`mtCOVERAGE_TEST_MARKER
();

1822 
	`mtCOVERAGE_TEST_MARKER
();

1827 
	`mtCOVERAGE_TEST_MARKER
();

1830  
xRëu∫
;

1831 
	}
}

1836 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1838 
	$vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 )

1840 
TCB_t
 * c⁄° 
pxTCB
 = 
xTaskToResume
;

1843 
	`c⁄figASSERT
–
xTaskToResume
 );

1847 if––
pxTCB
 !
pxCuºítTCB
 ) && (ÖxTCB !
NULL
 ) )

1849 
	`èskENTER_CRITICAL
();

1851 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) !
pdFALSE
 )

1853 
	`åa˚TASK_RESUME
–
pxTCB
 );

1857 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1858 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1861 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1866 
	`èskYIELD_IF_USING_PREEMPTION
();

1870 
	`mtCOVERAGE_TEST_MARKER
();

1875 
	`mtCOVERAGE_TEST_MARKER
();

1878 
	`èskEXIT_CRITICAL
();

1882 
	`mtCOVERAGE_TEST_MARKER
();

1884 
	}
}

1890 #i‡––
INCLUDE_xTaskResumeFromISR
 =1 ) && ( 
INCLUDE_vTaskSu•íd
 == 1 ) )

1892 
Ba£Ty≥_t
 
	$xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 )

1894 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1895 
TCB_t
 * c⁄° 
pxTCB
 = 
xTaskToResume
;

1896 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1898 
	`c⁄figASSERT
–
xTaskToResume
 );

1916 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1918 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1920 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) !
pdFALSE
 )

1922 
	`åa˚TASK_RESUME_FROM_ISR
–
pxTCB
 );

1925 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1929 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1931 
xYõldRequúed
 = 
pdTRUE
;

1936 
xYõldPídög
 = 
pdTRUE
;

1940 
	`mtCOVERAGE_TEST_MARKER
();

1943 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

1944 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1951 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

1956 
	`mtCOVERAGE_TEST_MARKER
();

1959 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1961  
xYõldRequúed
;

1962 
	}
}

1967 
	$vTaskSèπScheduÀr
( )

1969 
Ba£Ty≥_t
 
xRëu∫
;

1972 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1974 
SèticTask_t
 * 
pxIdÀTaskTCBBuf„r
 = 
NULL
;

1975 
SèckTy≥_t
 * 
pxIdÀTaskSèckBuf„r
 = 
NULL
;

1976 
uöt32_t
 
ulIdÀTaskSèckSize
;

1980 
	`vAµliˇti⁄GëIdÀTaskMem‹y
–&
pxIdÀTaskTCBBuf„r
, &
pxIdÀTaskSèckBuf„r
, &
ulIdÀTaskSèckSize
 );

1981 
xIdÀTaskH™dÀ
 = 
	`xTaskCª©eSètic
–
¥vIdÀTask
,

1982 
c⁄figIDLE_TASK_NAME
,

1983 
ulIdÀTaskSèckSize
,

1984 –* ) 
NULL
,

1985 
p‹tPRIVILEGE_BIT
,

1986 
pxIdÀTaskSèckBuf„r
,

1987 
pxIdÀTaskTCBBuf„r
 );

1989 if–
xIdÀTaskH™dÀ
 !
NULL
 )

1991 
xRëu∫
 = 
pdPASS
;

1995 
xRëu∫
 = 
pdFAIL
;

2001 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
,

2002 
c⁄figIDLE_TASK_NAME
,

2003 
c⁄figMINIMAL_STACK_SIZE
,

2004 –* ) 
NULL
,

2005 
p‹tPRIVILEGE_BIT
,

2006 &
xIdÀTaskH™dÀ
 );

2010 #i‡–
c⁄figUSE_TIMERS
 == 1 )

2012 if–
xRëu∫
 =
pdPASS
 )

2014 
xRëu∫
 = 
	`xTimîCª©eTimîTask
();

2018 
	`mtCOVERAGE_TEST_MARKER
();

2023 if–
xRëu∫
 =
pdPASS
 )

2028 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


2030 
	`‰ìπos_èsks_c_addôi⁄s_öô
();

2039 
	`p‹tDISABLE_INTERRUPTS
();

2041 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

2047 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

2051 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

2052 
xScheduÀrRu¬ög
 = 
pdTRUE
;

2053 
xTickCou¡
 = ( 
TickTy≥_t
 ) 
c⁄figINITIAL_TICK_COUNT
;

2061 
	`p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
();

2063 
	`åa˚TASK_SWITCHED_IN
();

2067 if–
	`xP‹tSèπScheduÀr
(Ë!
pdFALSE
 )

2082 
	`c⁄figASSERT
–
xRëu∫
 !
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 );

2087 –Ë
xIdÀTaskH™dÀ
;

2091 –Ë
uxT›U£dPri‹ôy
;

2092 
	}
}

2095 
	$vTaskEndScheduÀr
( )

2100 
	`p‹tDISABLE_INTERRUPTS
();

2101 
xScheduÀrRu¬ög
 = 
pdFALSE
;

2102 
	`vP‹tEndScheduÀr
();

2103 
	}
}

2106 
	$vTaskSu•ídAŒ
( )

2115 
	`p‹tSOFTWARE_BARRIER
();

2119 ++
uxScheduÀrSu•íded
;

2123 
	`p‹tMEMORY_BARRIER
();

2124 
	}
}

2127 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2129 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
( )

2131 
TickTy≥_t
 
xRëu∫
;

2132 
UBa£Ty≥_t
 
uxHighîPri‹ôyRódyTasks
 = 
pdFALSE
;

2138 #i‡–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

2140 if–
uxT›RódyPri‹ôy
 > 
tskIDLE_PRIORITY
 )

2142 
uxHighîPri‹ôyRódyTasks
 = 
pdTRUE
;

2147 c⁄° 
UBa£Ty≥_t
 
uxLó°Signifiˇ¡Bô
 = ( UBaseType_t ) 0x01;

2154 if–
uxT›RódyPri‹ôy
 > 
uxLó°Signifiˇ¡Bô
 )

2156 
uxHighîPri‹ôyRódyTasks
 = 
pdTRUE
;

2161 if–
pxCuºítTCB
->
uxPri‹ôy
 > 
tskIDLE_PRIORITY
 )

2163 
xRëu∫
 = 0;

2165 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > 1 )

2170 
xRëu∫
 = 0;

2172 if–
uxHighîPri‹ôyRódyTasks
 !
pdFALSE
 )

2177 
xRëu∫
 = 0;

2181 
xRëu∫
 = 
xNextTaskUnblockTime
 - 
xTickCou¡
;

2184  
xRëu∫
;

2185 
	}
}

2190 
Ba£Ty≥_t
 
	$xTaskResumeAŒ
( )

2192 
TCB_t
 * 
pxTCB
 = 
NULL
;

2193 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

2197 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 );

2204 
	`èskENTER_CRITICAL
();

2206 --
uxScheduÀrSu•íded
;

2208 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2210 if–
uxCuºítNumbîOfTasks
 > ( 
UBa£Ty≥_t
 ) 0U )

2214  
	`li°LIST_IS_EMPTY
–&
xPídögRódyLi°
 ) =
pdFALSE
 )

2216 
pxTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xPídögRódyLi°
 ) );

2217 
	`li°REMOVE_ITEM
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2218 
	`p‹tMEMORY_BARRIER
();

2219 
	`li°REMOVE_ITEM
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2220 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2224 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

2226 
xYõldPídög
 = 
pdTRUE
;

2230 
	`mtCOVERAGE_TEST_MARKER
();

2234 if–
pxTCB
 !
NULL
 )

2242 
	`¥vRe£tNextTaskUnblockTime
();

2250 
TickTy≥_t
 
xPídedCou¡s
 = 
xPídedTicks
;

2252 if–
xPídedCou¡s
 > ( 
TickTy≥_t
 ) 0U )

2256 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

2258 
xYõldPídög
 = 
pdTRUE
;

2262 
	`mtCOVERAGE_TEST_MARKER
();

2265 --
xPídedCou¡s
;

2266 }  
xPídedCou¡s
 > ( 
TickTy≥_t
 ) 0U );

2268 
xPídedTicks
 = 0;

2272 
	`mtCOVERAGE_TEST_MARKER
();

2276 if–
xYõldPídög
 !
pdFALSE
 )

2278 #i‡–
c⁄figUSE_PREEMPTION
 != 0 )

2280 
xAÃódyYõlded
 = 
pdTRUE
;

2283 
	`èskYIELD_IF_USING_PREEMPTION
();

2287 
	`mtCOVERAGE_TEST_MARKER
();

2293 
	`mtCOVERAGE_TEST_MARKER
();

2296 
	`èskEXIT_CRITICAL
();

2298  
xAÃódyYõlded
;

2299 
	}
}

2302 
TickTy≥_t
 
	$xTaskGëTickCou¡
( )

2304 
TickTy≥_t
 
xTicks
;

2307 
	`p‹tTICK_TYPE_ENTER_CRITICAL
();

2309 
xTicks
 = 
xTickCou¡
;

2311 
	`p‹tTICK_TYPE_EXIT_CRITICAL
();

2313  
xTicks
;

2314 
	}
}

2317 
TickTy≥_t
 
	$xTaskGëTickCou¡FromISR
( )

2319 
TickTy≥_t
 
xRëu∫
;

2320 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

2336 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

2338 
uxSavedI¡îru±Sètus
 = 
	`p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
();

2340 
xRëu∫
 = 
xTickCou¡
;

2342 
	`p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

2344  
xRëu∫
;

2345 
	}
}

2348 
UBa£Ty≥_t
 
	$uxTaskGëNumbîOfTasks
( )

2352  
uxCuºítNumbîOfTasks
;

2353 
	}
}

2356 * 
	$pcTaskGëName
–
TaskH™dÀ_t
 
xTaskToQuîy
 )

2358 
TCB_t
 * 
pxTCB
;

2362 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

2363 
	`c⁄figASSERT
–
pxTCB
 );

2364  &–
pxTCB
->
pcTaskName
[ 0 ] );

2365 
	}
}

2368 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

2370 
TCB_t
 * 
	$¥vSórchF‹NameWôhöSögÀLi°
–
Li°_t
 * 
pxLi°
,

2371 c⁄° 
pcNameToQuîy
[] )

2373 
TCB_t
 * 
pxNextTCB
, * 
pxFú°TCB
, * 
pxRëu∫
 = 
NULL
;

2374 
UBa£Ty≥_t
 
x
;

2375 
cNextCh¨
;

2376 
Ba£Ty≥_t
 
xBªakLo›
;

2380 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

2382 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2386 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2390 
xBªakLo›
 = 
pdFALSE
;

2392  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

2394 
cNextCh¨
 = 
pxNextTCB
->
pcTaskName
[ 
x
 ];

2396 if–
cNextCh¨
 !
pcNameToQuîy
[ 
x
 ] )

2399 
xBªakLo›
 = 
pdTRUE
;

2401 if–
cNextCh¨
 == ( ) 0x00 )

2405 
pxRëu∫
 = 
pxNextTCB
;

2406 
xBªakLo›
 = 
pdTRUE
;

2410 
	`mtCOVERAGE_TEST_MARKER
();

2413 if–
xBªakLo›
 !
pdFALSE
 )

2419 if–
pxRëu∫
 !
NULL
 )

2424 }  
pxNextTCB
 !
pxFú°TCB
 );

2428 
	`mtCOVERAGE_TEST_MARKER
();

2431  
pxRëu∫
;

2432 
	}
}

2437 #i‡–
INCLUDE_xTaskGëH™dÀ
 == 1 )

2439 
TaskH™dÀ_t
 
	$xTaskGëH™dÀ
–c⁄° * 
pcNameToQuîy
 )

2441 
UBa£Ty≥_t
 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

2442 
TCB_t
 * 
pxTCB
;

2445 
	`c⁄figASSERT
–
	`°æí
–
pcNameToQuîy
 ) < 
c⁄figMAX_TASK_NAME_LEN
 );

2447 
	`vTaskSu•ídAŒ
();

2452 
uxQueue
--;

2453 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
pcNameToQuîy
 );

2455 if–
pxTCB
 !
NULL
 )

2460 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

2463 if–
pxTCB
 =
NULL
 )

2465 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) 
pxDñayedTaskLi°
, 
pcNameToQuîy
 );

2468 if–
pxTCB
 =
NULL
 )

2470 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
––
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
pcNameToQuîy
 );

2473 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2475 if–
pxTCB
 =
NULL
 )

2478 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
–&
xSu•ídedTaskLi°
, 
pcNameToQuîy
 );

2483 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2485 if–
pxTCB
 =
NULL
 )

2488 
pxTCB
 = 
	`¥vSórchF‹NameWôhöSögÀLi°
–&
xTasksWaôögTîmö©i⁄
, 
pcNameToQuîy
 );

2493 –Ë
	`xTaskResumeAŒ
();

2495  
pxTCB
;

2496 
	}
}

2501 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2503 
UBa£Ty≥_t
 
	$uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
,

2504 c⁄° 
UBa£Ty≥_t
 
uxAºaySize
,

2505 
c⁄figRUN_TIME_COUNTER_TYPE
 * c⁄° 
pulTŸÆRunTime
 )

2507 
UBa£Ty≥_t
 
uxTask
 = 0, 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

2509 
	`vTaskSu•ídAŒ
();

2512 if–
uxAºaySize
 >
uxCuºítNumbîOfTasks
 )

2518 
uxQueue
--;

2519 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
eRódy
 );

2520 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

2524 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxDñayedTaskLi°
, 
eBlocked
 );

2525 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
eBlocked
 );

2527 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2531 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xTasksWaôögTîmö©i⁄
, 
eDñëed
 );

2535 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2539 
uxTask
 +
	`¥vLi°TasksWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xSu•ídedTaskLi°
, 
eSu•íded
 );

2543 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2545 if–
pulTŸÆRunTime
 !
NULL
 )

2547 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


2548 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
––*
pulTŸÆRunTime
 ) );

2550 *
pulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

2556 if–
pulTŸÆRunTime
 !
NULL
 )

2558 *
pulTŸÆRunTime
 = 0;

2565 
	`mtCOVERAGE_TEST_MARKER
();

2568 –Ë
	`xTaskResumeAŒ
();

2570  
uxTask
;

2571 
	}
}

2576 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

2578 
TaskH™dÀ_t
 
	$xTaskGëIdÀTaskH™dÀ
( )

2582 
	`c⁄figASSERT
––
xIdÀTaskH™dÀ
 !
NULL
 ) );

2583  
xIdÀTaskH™dÀ
;

2584 
	}
}

2593 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2595 
	$vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 )

2600 
	`c⁄figASSERT
––
xTickCou¡
 + 
xTicksToJump
 ) <
xNextTaskUnblockTime
 );

2601 
xTickCou¡
 +
xTicksToJump
;

2602 
	`åa˚INCREASE_TICK_COUNT
–
xTicksToJump
 );

2603 
	}
}

2608 
Ba£Ty≥_t
 
	$xTaskC©chUpTicks
–
TickTy≥_t
 
xTicksToC©chUp
 )

2610 
Ba£Ty≥_t
 
xYõldOccuºed
;

2614 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

2618 
	`vTaskSu•ídAŒ
();

2619 
xPídedTicks
 +
xTicksToC©chUp
;

2620 
xYõldOccuºed
 = 
	`xTaskResumeAŒ
();

2622  
xYõldOccuºed
;

2623 
	}
}

2626 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

2628 
Ba£Ty≥_t
 
	$xTaskAb‹tDñay
–
TaskH™dÀ_t
 
xTask
 )

2630 
TCB_t
 * 
pxTCB
 = 
xTask
;

2631 
Ba£Ty≥_t
 
xRëu∫
;

2633 
	`c⁄figASSERT
–
pxTCB
 );

2635 
	`vTaskSu•ídAŒ
();

2639 if–
	`eTaskGëSèã
–
xTask
 ) =
eBlocked
 )

2641 
xRëu∫
 = 
pdPASS
;

2646 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2652 
	`èskENTER_CRITICAL
();

2654 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2656 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2661 
pxTCB
->
ucDñayAb‹ãd
 = 
pdTRUE
;

2665 
	`mtCOVERAGE_TEST_MARKER
();

2668 
	`èskEXIT_CRITICAL
();

2671 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2675 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2680 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

2684 
xYõldPídög
 = 
pdTRUE
;

2688 
	`mtCOVERAGE_TEST_MARKER
();

2695 
xRëu∫
 = 
pdFAIL
;

2698 –Ë
	`xTaskResumeAŒ
();

2700  
xRëu∫
;

2701 
	}
}

2706 
Ba£Ty≥_t
 
	$xTaskIn¸emítTick
( )

2708 
TCB_t
 * 
pxTCB
;

2709 
TickTy≥_t
 
xIãmVÆue
;

2710 
Ba£Ty≥_t
 
xSwôchRequúed
 = 
pdFALSE
;

2715 
	`åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 );

2717 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2721 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
 + ( TickType_t ) 1;

2725 
xTickCou¡
 = 
xC⁄°TickCou¡
;

2727 if–
xC⁄°TickCou¡
 =–
TickTy≥_t
 ) 0U )

2729 
	`èskSWITCH_DELAYED_LISTS
();

2733 
	`mtCOVERAGE_TEST_MARKER
();

2740 if–
xC⁄°TickCou¡
 >
xNextTaskUnblockTime
 )

2744 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

2751 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

2760 
pxTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

2761 
xIãmVÆue
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2763 if–
xC⁄°TickCou¡
 < 
xIãmVÆue
 )

2770 
xNextTaskUnblockTime
 = 
xIãmVÆue
;

2775 
	`mtCOVERAGE_TEST_MARKER
();

2779 
	`li°REMOVE_ITEM
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

2783 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2785 
	`li°REMOVE_ITEM
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2789 
	`mtCOVERAGE_TEST_MARKER
();

2794 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2798 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2804 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

2806 
xSwôchRequúed
 = 
pdTRUE
;

2810 
	`mtCOVERAGE_TEST_MARKER
();

2821 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figUSE_TIME_SLICING
 == 1 ) )

2823 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
pxCuºítTCB
->
uxPri‹ôy
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

2825 
xSwôchRequúed
 = 
pdTRUE
;

2829 
	`mtCOVERAGE_TEST_MARKER
();

2834 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2838 if–
xPídedTicks
 =–
TickTy≥_t
 ) 0 )

2840 
	`vAµliˇti⁄TickHook
();

2844 
	`mtCOVERAGE_TEST_MARKER
();

2849 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2851 if–
xYõldPídög
 !
pdFALSE
 )

2853 
xSwôchRequúed
 = 
pdTRUE
;

2857 
	`mtCOVERAGE_TEST_MARKER
();

2864 ++
xPídedTicks
;

2868 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2870 
	`vAµliˇti⁄TickHook
();

2875  
xSwôchRequúed
;

2876 
	}
}

2879 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2881 
	$vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
,

2882 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 )

2884 
TCB_t
 * 
xTCB
;

2888 if–
xTask
 =
NULL
 )

2890 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2894 
xTCB
 = 
xTask
;

2899 
	`èskENTER_CRITICAL
();

2901 
xTCB
->
pxTaskTag
 = 
pxHookFun˘i⁄
;

2903 
	`èskEXIT_CRITICAL
();

2904 
	}
}

2909 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2911 
TaskHookFun˘i⁄_t
 
	$xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 )

2913 
TCB_t
 * 
pxTCB
;

2914 
TaskHookFun˘i⁄_t
 
xRëu∫
;

2917 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

2921 
	`èskENTER_CRITICAL
();

2923 
xRëu∫
 = 
pxTCB
->
pxTaskTag
;

2925 
	`èskEXIT_CRITICAL
();

2927  
xRëu∫
;

2928 
	}
}

2933 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2935 
TaskHookFun˘i⁄_t
 
	$xTaskGëAµliˇti⁄TaskTagFromISR
–
TaskH™dÀ_t
 
xTask
 )

2937 
TCB_t
 * 
pxTCB
;

2938 
TaskHookFun˘i⁄_t
 
xRëu∫
;

2939 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

2942 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

2946 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

2948 
xRëu∫
 = 
pxTCB
->
pxTaskTag
;

2950 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

2952  
xRëu∫
;

2953 
	}
}

2958 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2960 
Ba£Ty≥_t
 
	$xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
,

2961 * 
pvP¨amëî
 )

2963 
TCB_t
 * 
xTCB
;

2964 
Ba£Ty≥_t
 
xRëu∫
;

2967 if–
xTask
 =
NULL
 )

2969 
xTCB
 = 
pxCuºítTCB
;

2973 
xTCB
 = 
xTask
;

2976 if–
xTCB
->
pxTaskTag
 !
NULL
 )

2978 
xRëu∫
 = 
xTCB
->
	`pxTaskTag
–
pvP¨amëî
 );

2982 
xRëu∫
 = 
pdFAIL
;

2985  
xRëu∫
;

2986 
	}
}

2991 
	$vTaskSwôchC⁄ãxt
( )

2993 if–
uxScheduÀrSu•íded
 !–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2997 
xYõldPídög
 = 
pdTRUE
;

3001 
xYõldPídög
 = 
pdFALSE
;

3002 
	`åa˚TASK_SWITCHED_OUT
();

3004 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

3006 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


3007 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTŸÆRunTime
 );

3009 
ulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

3019 if–
ulTŸÆRunTime
 > 
ulTaskSwôchedInTime
 )

3021 
pxCuºítTCB
->
ulRunTimeCou¡î
 +–
ulTŸÆRunTime
 - 
ulTaskSwôchedInTime
 );

3025 
	`mtCOVERAGE_TEST_MARKER
();

3028 
ulTaskSwôchedInTime
 = 
ulTŸÆRunTime
;

3033 
	`èskCHECK_FOR_STACK_OVERFLOW
();

3036 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

3038 
pxCuºítTCB
->
iTaskEºno
 = 
FªeRTOS_î∫o
;

3044 
	`èskSELECT_HIGHEST_PRIORITY_TASK
();

3045 
	`åa˚TASK_SWITCHED_IN
();

3048 #i‡–
c⁄figUSE_POSIX_ERRNO
 == 1 )

3050 
FªeRTOS_î∫o
 = 
pxCuºítTCB
->
iTaskEºno
;

3054 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

3060 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

3064 
	}
}

3067 
	$vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
,

3068 c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

3070 
	`c⁄figASSERT
–
pxEvítLi°
 );

3086 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

3088 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

3089 
	}
}

3092 
	$vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
,

3093 c⁄° 
TickTy≥_t
 
xIãmVÆue
,

3094 c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

3096 
	`c⁄figASSERT
–
pxEvítLi°
 );

3100 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 != 0 );

3105 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

3112 
	`li°INSERT_END
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

3114 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

3115 
	}
}

3118 #i‡–
c⁄figUSE_TIMERS
 == 1 )

3120 
	$vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
,

3121 
TickTy≥_t
 
xTicksToWaô
,

3122 c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

3124 
	`c⁄figASSERT
–
pxEvítLi°
 );

3136 
	`li°INSERT_END
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

3141 if–
xWaôIndeföôñy
 !
pdFALSE
 )

3143 
xTicksToWaô
 = 
p‹tMAX_DELAY
;

3146 
	`åa˚TASK_DELAY_UNTIL
––
xTickCou¡
 + 
xTicksToWaô
 ) );

3147 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
xWaôIndeföôñy
 );

3148 
	}
}

3153 
Ba£Ty≥_t
 
	$xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 )

3155 
TCB_t
 * 
pxUnblockedTCB
;

3156 
Ba£Ty≥_t
 
xRëu∫
;

3171 
pxUnblockedTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

3172 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

3173 
	`li°REMOVE_ITEM
–&–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

3175 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

3177 
	`li°REMOVE_ITEM
–&–
pxUnblockedTCB
->
xSèãLi°Iãm
 ) );

3178 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

3180 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3190 
	`¥vRe£tNextTaskUnblockTime
();

3198 
	`li°INSERT_END
–&–
xPídögRódyLi°
 ), &–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

3201 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

3206 
xRëu∫
 = 
pdTRUE
;

3210 
xYõldPídög
 = 
pdTRUE
;

3214 
xRëu∫
 = 
pdFALSE
;

3217  
xRëu∫
;

3218 
	}
}

3221 
	$vTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
,

3222 c⁄° 
TickTy≥_t
 
xIãmVÆue
 )

3224 
TCB_t
 * 
pxUnblockedTCB
;

3228 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 !
pdFALSE
 );

3231 
	`li°SET_LIST_ITEM_VALUE
–
pxEvítLi°Iãm
, 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

3235 
pxUnblockedTCB
 = 
	`li°GET_LIST_ITEM_OWNER
–
pxEvítLi°Iãm
 );

3236 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

3237 
	`li°REMOVE_ITEM
–
pxEvítLi°Iãm
 );

3239 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3249 
	`¥vRe£tNextTaskUnblockTime
();

3256 
	`li°REMOVE_ITEM
–&–
pxUnblockedTCB
->
xSèãLi°Iãm
 ) );

3257 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

3259 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

3265 
xYõldPídög
 = 
pdTRUE
;

3267 
	}
}

3270 
	$vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

3272 
	`c⁄figASSERT
–
pxTimeOut
 );

3273 
	`èskENTER_CRITICAL
();

3275 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

3276 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

3278 
	`èskEXIT_CRITICAL
();

3279 
	}
}

3282 
	$vTaskI¡î«lSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

3285 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

3286 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

3287 
	}
}

3290 
Ba£Ty≥_t
 
	$xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
,

3291 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 )

3293 
Ba£Ty≥_t
 
xRëu∫
;

3295 
	`c⁄figASSERT
–
pxTimeOut
 );

3296 
	`c⁄figASSERT
–
pxTicksToWaô
 );

3298 
	`èskENTER_CRITICAL
();

3301 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

3302 c⁄° 
TickTy≥_t
 
xEœp£dTime
 = 
xC⁄°TickCou¡
 - 
pxTimeOut
->
xTimeOnE¡îög
;

3304 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

3305 if–
pxCuºítTCB
->
ucDñayAb‹ãd
 !–
uöt8_t
 ) 
pdFALSE
 )

3309 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

3310 
xRëu∫
 = 
pdTRUE
;

3315 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3316 if–*
pxTicksToWaô
 =
p‹tMAX_DELAY
 )

3321 
xRëu∫
 = 
pdFALSE
;

3326 if––
xNumOfOvîÊows
 !
pxTimeOut
->
xOvîÊowCou¡
 ) && ( 
xC⁄°TickCou¡
 >pxTimeOut->
xTimeOnE¡îög
 ) )

3333 
xRëu∫
 = 
pdTRUE
;

3334 *
pxTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

3336 if–
xEœp£dTime
 < *
pxTicksToWaô
 )

3339 *
pxTicksToWaô
 -
xEœp£dTime
;

3340 
	`vTaskI¡î«lSëTimeOutSèã
–
pxTimeOut
 );

3341 
xRëu∫
 = 
pdFALSE
;

3345 *
pxTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

3346 
xRëu∫
 = 
pdTRUE
;

3349 
	`èskEXIT_CRITICAL
();

3351  
xRëu∫
;

3352 
	}
}

3355 
	$vTaskMis£dYõld
( )

3357 
xYõldPídög
 = 
pdTRUE
;

3358 
	}
}

3361 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3363 
UBa£Ty≥_t
 
	$uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 )

3365 
UBa£Ty≥_t
 
uxRëu∫
;

3366 
TCB_t
 c⁄° * 
pxTCB
;

3368 if–
xTask
 !
NULL
 )

3370 
pxTCB
 = 
xTask
;

3371 
uxRëu∫
 = 
pxTCB
->
uxTaskNumbî
;

3375 
uxRëu∫
 = 0U;

3378  
uxRëu∫
;

3379 
	}
}

3384 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3386 
	$vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
,

3387 c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 )

3389 
TCB_t
 * 
pxTCB
;

3391 if–
xTask
 !
NULL
 )

3393 
pxTCB
 = 
xTask
;

3394 
pxTCB
->
uxTaskNumbî
 = 
uxH™dÀ
;

3396 
	}
}

3411 
	$p‹tTASK_FUNCTION
–
¥vIdÀTask
, 
pvP¨amëîs
 )

3414 –Ë
pvP¨amëîs
;

3422 
	`p‹tALLOCATE_SECURE_CONTEXT
–
c⁄figMINIMAL_SECURE_STACK_SIZE
 );

3428 
	`¥vCheckTasksWaôögTîmö©i⁄
();

3430 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

3436 
	`èskYIELD
();

3440 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figIDLE_SHOULD_YIELD
 == 1 ) )

3451 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

3453 
	`èskYIELD
();

3457 
	`mtCOVERAGE_TEST_MARKER
();

3462 #i‡–
c⁄figUSE_IDLE_HOOK
 == 1 )

3464 
	`vAµliˇti⁄IdÀHook
( );

3471 
	`vAµliˇti⁄IdÀHook
();

3479 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3481 
TickTy≥_t
 
xEx≥˘edIdÀTime
;

3488 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

3490 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

3492 
	`vTaskSu•ídAŒ
();

3497 
	`c⁄figASSERT
–
xNextTaskUnblockTime
 >
xTickCou¡
 );

3498 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

3503 
	`c⁄figPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

3505 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

3507 
	`åa˚LOW_POWER_IDLE_BEGIN
();

3508 
	`p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 );

3509 
	`åa˚LOW_POWER_IDLE_END
();

3513 
	`mtCOVERAGE_TEST_MARKER
();

3516 –Ë
	`xTaskResumeAŒ
();

3520 
	`mtCOVERAGE_TEST_MARKER
();

3525 
	}
}

3528 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

3530 
eSÀïModeSètus
 
	$eTaskC⁄fúmSÀïModeSètus
( )

3532 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3534 c⁄° 
UBa£Ty≥_t
 
uxN⁄Aµliˇti⁄Tasks
 = 1;

3537 
eSÀïModeSètus
 
eRëu∫
 = 
eSènd¨dSÀï
;

3541 if–
	`li°CURRENT_LIST_LENGTH
–&
xPídögRódyLi°
 ) != 0 )

3544 
eRëu∫
 = 
eAb‹tSÀï
;

3546 if–
xYõldPídög
 !
pdFALSE
 )

3549 
eRëu∫
 = 
eAb‹tSÀï
;

3551 if–
xPídedTicks
 != 0 )

3555 
eRëu∫
 = 
eAb‹tSÀï
;

3558 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3559 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =–
uxCuºítNumbîOfTasks
 - 
uxN⁄Aµliˇti⁄Tasks
 ) )

3565 
eRëu∫
 = 
eNoTasksWaôögTimeout
;

3570 
	`mtCOVERAGE_TEST_MARKER
();

3573  
eRëu∫
;

3574 
	}
}

3579 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

3581 
	$vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
,

3582 
Ba£Ty≥_t
 
xIndex
,

3583 * 
pvVÆue
 )

3585 
TCB_t
 * 
pxTCB
;

3587 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

3589 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSë
 );

3590 
	`c⁄figASSERT
–
pxTCB
 !
NULL
 );

3591 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ] = 
pvVÆue
;

3593 
	}
}

3598 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

3600 * 
	$pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
,

3601 
Ba£Ty≥_t
 
xIndex
 )

3603 * 
pvRëu∫
 = 
NULL
;

3604 
TCB_t
 * 
pxTCB
;

3606 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

3608 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

3609 
pvRëu∫
 = 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ];

3613 
pvRëu∫
 = 
NULL
;

3616  
pvRëu∫
;

3617 
	}
}

3622 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

3624 
	$vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTaskToModify
,

3625 c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

3627 
TCB_t
 * 
pxTCB
;

3631 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToModify
 );

3633 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
, 
NULL
, 0 );

3634 
	}
}

3639 
	$¥vInôüli£TaskLi°s
( )

3641 
UBa£Ty≥_t
 
uxPri‹ôy
;

3643  
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 0U; uxPri‹ôy < ( UBa£Ty≥_àË
c⁄figMAX_PRIORITIES
; uxPriority++ )

3645 
	`vLi°Inôüli£
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôy
 ] ) );

3648 
	`vLi°Inôüli£
–&
xDñayedTaskLi°1
 );

3649 
	`vLi°Inôüli£
–&
xDñayedTaskLi°2
 );

3650 
	`vLi°Inôüli£
–&
xPídögRódyLi°
 );

3652 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3654 
	`vLi°Inôüli£
–&
xTasksWaôögTîmö©i⁄
 );

3658 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3660 
	`vLi°Inôüli£
–&
xSu•ídedTaskLi°
 );

3666 
pxDñayedTaskLi°
 = &
xDñayedTaskLi°1
;

3667 
pxOvîÊowDñayedTaskLi°
 = &
xDñayedTaskLi°2
;

3668 
	}
}

3671 
	$¥vCheckTasksWaôögTîmö©i⁄
( )

3675 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3677 
TCB_t
 * 
pxTCB
;

3681  
uxDñëedTasksWaôögCÀ™Up
 > ( 
UBa£Ty≥_t
 ) 0U )

3683 
	`èskENTER_CRITICAL
();

3685 
pxTCB
 = 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xTasksWaôögTîmö©i⁄
 ) );

3686 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

3687 --
uxCuºítNumbîOfTasks
;

3688 --
uxDñëedTasksWaôögCÀ™Up
;

3690 
	`èskEXIT_CRITICAL
();

3692 
	`¥vDñëeTCB
–
pxTCB
 );

3696 
	}
}

3699 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3701 
	$vTaskGëInfo
–
TaskH™dÀ_t
 
xTask
,

3702 
TaskSètus_t
 * 
pxTaskSètus
,

3703 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
,

3704 
eTaskSèã
 
eSèã
 )

3706 
TCB_t
 * 
pxTCB
;

3709 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3711 
pxTaskSètus
->
xH™dÀ
 = ( 
TaskH™dÀ_t
 ) 
pxTCB
;

3712 
pxTaskSètus
->
pcTaskName
 = ( c⁄° * ) &–
pxTCB
->pcTaskName[ 0 ] );

3713 
pxTaskSètus
->
uxCuºítPri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

3714 
pxTaskSètus
->
pxSèckBa£
 = 
pxTCB
->
pxSèck
;

3715 #i‡––
p‹tSTACK_GROWTH
 > 0 ) && ( 
c⁄figRECORD_STACK_HIGH_ADDRESS
 == 1 ) )

3716 
pxTaskSètus
->
pxT›OfSèck
 = 
pxTCB
->pxTopOfStack;

3717 
pxTaskSètus
->
pxEndOfSèck
 = 
pxTCB
->pxEndOfStack;

3719 
pxTaskSètus
->
xTaskNumbî
 = 
pxTCB
->
uxTCBNumbî
;

3721 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3723 
pxTaskSètus
->
uxBa£Pri‹ôy
 = 
pxTCB
->uxBasePriority;

3727 
pxTaskSètus
->
uxBa£Pri‹ôy
 = 0;

3731 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

3733 
pxTaskSètus
->
ulRunTimeCou¡î
 = 
pxTCB
->ulRunTimeCounter;

3737 
pxTaskSètus
->
ulRunTimeCou¡î
 = ( 
c⁄figRUN_TIME_COUNTER_TYPE
 ) 0;

3744 if–
eSèã
 !
eInvÆid
 )

3746 if–
pxTCB
 =
pxCuºítTCB
 )

3748 
pxTaskSètus
->
eCuºítSèã
 = 
eRu¬ög
;

3752 
pxTaskSètus
->
eCuºítSèã
 = 
eSèã
;

3754 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3759 if–
eSèã
 =
eSu•íded
 )

3761 
	`vTaskSu•ídAŒ
();

3763 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

3765 
pxTaskSètus
->
eCuºítSèã
 = 
eBlocked
;

3768 –Ë
	`xTaskResumeAŒ
();

3776 
pxTaskSètus
->
eCuºítSèã
 = 
	`eTaskGëSèã
–
pxTCB
 );

3781 if–
xGëFªeSèckS∑˚
 !
pdFALSE
 )

3783 #i‡–
p‹tSTACK_GROWTH
 > 0 )

3785 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
 );

3789 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxTCB
->
pxSèck
 );

3795 
pxTaskSètus
->
usSèckHighW©îM¨k
 = 0;

3797 
	}
}

3802 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3804 
UBa£Ty≥_t
 
	$¥vLi°TasksWôhöSögÀLi°
–
TaskSètus_t
 * 
pxTaskSètusAºay
,

3805 
Li°_t
 * 
pxLi°
,

3806 
eTaskSèã
 
eSèã
 )

3808 
c⁄figLIST_VOLATILE
 
TCB_t
 * 
pxNextTCB
, * 
pxFú°TCB
;

3809 
UBa£Ty≥_t
 
uxTask
 = 0;

3811 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

3813 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

3821 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

3822 
	`vTaskGëInfo
––
TaskH™dÀ_t
 ) 
pxNextTCB
, &–
pxTaskSètusAºay
[ 
uxTask
 ] ), 
pdTRUE
, 
eSèã
 );

3823 
uxTask
++;

3824 }  
pxNextTCB
 !
pxFú°TCB
 );

3828 
	`mtCOVERAGE_TEST_MARKER
();

3831  
uxTask
;

3832 
	}
}

3837 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 ) )

3839 
c⁄figSTACK_DEPTH_TYPE
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 )

3841 
uöt32_t
 
ulCou¡
 = 0U;

3843  *
pucSèckByã
 =–
uöt8_t
 ) 
tskSTACK_FILL_BYTE
 )

3845 
pucSèckByã
 -
p‹tSTACK_GROWTH
;

3846 
ulCou¡
++;

3849 
ulCou¡
 /–
uöt32_t
 ) –
SèckTy≥_t
 );

3851  ( 
c⁄figSTACK_DEPTH_TYPE
 ) 
ulCou¡
;

3852 
	}
}

3857 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k2
 == 1 )

3864 
c⁄figSTACK_DEPTH_TYPE
 
	$uxTaskGëSèckHighW©îM¨k2
–
TaskH™dÀ_t
 
xTask
 )

3866 
TCB_t
 * 
pxTCB
;

3867 
uöt8_t
 * 
pucEndOfSèck
;

3868 
c⁄figSTACK_DEPTH_TYPE
 
uxRëu∫
;

3877 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3879 #i‡
p‹tSTACK_GROWTH
 < 0

3881 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxSèck
;

3885 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
;

3889 
uxRëu∫
 = 
	`¥vTaskCheckFªeSèckS∑˚
–
pucEndOfSèck
 );

3891  
uxRëu∫
;

3892 
	}
}

3897 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

3899 
UBa£Ty≥_t
 
	$uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 )

3901 
TCB_t
 * 
pxTCB
;

3902 
uöt8_t
 * 
pucEndOfSèck
;

3903 
UBa£Ty≥_t
 
uxRëu∫
;

3905 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3907 #i‡
p‹tSTACK_GROWTH
 < 0

3909 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxSèck
;

3913 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
;

3917 
uxRëu∫
 = ( 
UBa£Ty≥_t
 ) 
	`¥vTaskCheckFªeSèckS∑˚
–
pucEndOfSèck
 );

3919  
uxRëu∫
;

3920 
	}
}

3925 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3927 
	$¥vDñëeTCB
–
TCB_t
 * 
pxTCB
 )

3932 
	`p‹tCLEAN_UP_TCB
–
pxTCB
 );

3938 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

3940 
	`_ª˛aim_ªít
–&–
pxTCB
->
xNewLib_ªít
 ) );

3944 #i‡––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_STATIC_ALLOCATION
 =0 ) && ( 
p‹tUSING_MPU_WRAPPERS
 == 0 ) )

3948 
	`vP‹tFªeSèck
–
pxTCB
->
pxSèck
 );

3949 
	`vP‹tFªe
–
pxTCB
 );

3951 #ñi‡–
tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE
 != 0 )

3956 if–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB
 )

3960 
	`vP‹tFªeSèck
–
pxTCB
->
pxSèck
 );

3961 
	`vP‹tFªe
–
pxTCB
 );

3963 if–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskSTATICALLY_ALLOCATED_STACK_ONLY
 )

3967 
	`vP‹tFªe
–
pxTCB
 );

3973 
	`c⁄figASSERT
–
pxTCB
->
ucSètiˇŒyAŒoˇãd
 =
tskSTATICALLY_ALLOCATED_STACK_AND_TCB
 );

3974 
	`mtCOVERAGE_TEST_MARKER
();

3978 
	}
}

3983 
	$¥vRe£tNextTaskUnblockTime
( )

3985 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

3991 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

3999 
xNextTaskUnblockTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

4001 
	}
}

4004 #i‡––
INCLUDE_xTaskGëCuºítTaskH™dÀ
 =1 ) || ( 
c⁄figUSE_MUTEXES
 == 1 ) )

4006 
TaskH™dÀ_t
 
	$xTaskGëCuºítTaskH™dÀ
( )

4008 
TaskH™dÀ_t
 
xRëu∫
;

4013 
xRëu∫
 = 
pxCuºítTCB
;

4015  
xRëu∫
;

4016 
	}
}

4021 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

4023 
Ba£Ty≥_t
 
	$xTaskGëScheduÀrSèã
( )

4025 
Ba£Ty≥_t
 
xRëu∫
;

4027 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

4029 
xRëu∫
 = 
èskSCHEDULER_NOT_STARTED
;

4033 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

4035 
xRëu∫
 = 
èskSCHEDULER_RUNNING
;

4039 
xRëu∫
 = 
èskSCHEDULER_SUSPENDED
;

4043  
xRëu∫
;

4044 
	}
}

4049 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4051 
Ba£Ty≥_t
 
	$xTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

4053 
TCB_t
 * c⁄° 
pxMuãxHﬁdîTCB
 = 
pxMuãxHﬁdî
;

4054 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

4059 if–
pxMuãxHﬁdî
 !
NULL
 )

4064 if–
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 < 
pxCuºítTCB
->uxPriority )

4069 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxMuãxHﬁdîTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

4071 
	`li°SET_LIST_ITEM_VALUE
–&–
pxMuãxHﬁdîTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
pxCuºítTCB
->
uxPri‹ôy
 );

4075 
	`mtCOVERAGE_TEST_MARKER
();

4080 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 ] ), &–pxMuãxHﬁdîTCB->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

4082 if–
	`uxLi°Remove
–&–
pxMuãxHﬁdîTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4087 
	`p‹tRESET_READY_PRIORITY
–
pxMuãxHﬁdîTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

4091 
	`mtCOVERAGE_TEST_MARKER
();

4095 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

4096 
	`¥vAddTaskToRódyLi°
–
pxMuãxHﬁdîTCB
 );

4101 
pxMuãxHﬁdîTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

4104 
	`åa˚TASK_PRIORITY_INHERIT
–
pxMuãxHﬁdîTCB
, 
pxCuºítTCB
->
uxPri‹ôy
 );

4107 
xRëu∫
 = 
pdTRUE
;

4111 if–
pxMuãxHﬁdîTCB
->
uxBa£Pri‹ôy
 < 
pxCuºítTCB
->
uxPri‹ôy
 )

4120 
xRëu∫
 = 
pdTRUE
;

4124 
	`mtCOVERAGE_TEST_MARKER
();

4130 
	`mtCOVERAGE_TEST_MARKER
();

4133  
xRëu∫
;

4134 
	}
}

4139 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4141 
Ba£Ty≥_t
 
	$xTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

4143 
TCB_t
 * c⁄° 
pxTCB
 = 
pxMuãxHﬁdî
;

4144 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

4146 if–
pxMuãxHﬁdî
 !
NULL
 )

4152 
	`c⁄figASSERT
–
pxTCB
 =
pxCuºítTCB
 );

4153 
	`c⁄figASSERT
–
pxTCB
->
uxMuãxesHñd
 );

4154 –
pxTCB
->
uxMuãxesHñd
 )--;

4158 if–
pxTCB
->
uxPri‹ôy
 !pxTCB->
uxBa£Pri‹ôy
 )

4161 if–
pxTCB
->
uxMuãxesHñd
 =–
UBa£Ty≥_t
 ) 0 )

4168 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4170 
	`p‹tRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

4174 
	`mtCOVERAGE_TEST_MARKER
();

4179 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
,ÖxTCB->
uxBa£Pri‹ôy
 );

4180 
pxTCB
->
uxPri‹ôy
 =ÖxTCB->
uxBa£Pri‹ôy
;

4185 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxTCB->
uxPri‹ôy
 );

4186 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4196 
xRëu∫
 = 
pdTRUE
;

4200 
	`mtCOVERAGE_TEST_MARKER
();

4205 
	`mtCOVERAGE_TEST_MARKER
();

4210 
	`mtCOVERAGE_TEST_MARKER
();

4213  
xRëu∫
;

4214 
	}
}

4219 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4221 
	$vTaskPri‹ôyDisöhîôA·îTimeout
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
,

4222 
UBa£Ty≥_t
 
uxHighe°Pri‹ôyWaôögTask
 )

4224 
TCB_t
 * c⁄° 
pxTCB
 = 
pxMuãxHﬁdî
;

4225 
UBa£Ty≥_t
 
uxPri‹ôyU£dOnE¡ry
, 
uxPri‹ôyToU£
;

4226 c⁄° 
UBa£Ty≥_t
 
uxO∆yO√MuãxHñd
 = ( UBaseType_t ) 1;

4228 if–
pxMuãxHﬁdî
 !
NULL
 )

4232 
	`c⁄figASSERT
–
pxTCB
->
uxMuãxesHñd
 );

4238 if–
pxTCB
->
uxBa£Pri‹ôy
 < 
uxHighe°Pri‹ôyWaôögTask
 )

4240 
uxPri‹ôyToU£
 = 
uxHighe°Pri‹ôyWaôögTask
;

4244 
uxPri‹ôyToU£
 = 
pxTCB
->
uxBa£Pri‹ôy
;

4248 if–
pxTCB
->
uxPri‹ôy
 !
uxPri‹ôyToU£
 )

4254 if–
pxTCB
->
uxMuãxesHñd
 =
uxO∆yO√MuãxHñd
 )

4259 
	`c⁄figASSERT
–
pxTCB
 !
pxCuºítTCB
 );

4264 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
, 
uxPri‹ôyToU£
 );

4265 
uxPri‹ôyU£dOnE¡ry
 = 
pxTCB
->
uxPri‹ôy
;

4266 
pxTCB
->
uxPri‹ôy
 = 
uxPri‹ôyToU£
;

4270 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

4272 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôyToU£
 );

4276 
	`mtCOVERAGE_TEST_MARKER
();

4285 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôyU£dOnE¡ry
 ] ), &–
pxTCB
->
xSèãLi°Iãm
 ) ) !
pdFALSE
 )

4287 if–
	`uxLi°Remove
–&–
pxTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4292 
	`p‹tRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

4296 
	`mtCOVERAGE_TEST_MARKER
();

4299 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4303 
	`mtCOVERAGE_TEST_MARKER
();

4308 
	`mtCOVERAGE_TEST_MARKER
();

4313 
	`mtCOVERAGE_TEST_MARKER
();

4318 
	`mtCOVERAGE_TEST_MARKER
();

4320 
	}
}

4325 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

4327 
	$vTaskE¡îCrôiˇl
( )

4329 
	`p‹tDISABLE_INTERRUPTS
();

4331 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

4333 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )++;

4341 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 1 )

4343 
	`p‹tASSERT_IF_IN_ISR
();

4348 
	`mtCOVERAGE_TEST_MARKER
();

4350 
	}
}

4355 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

4357 
	$vTaskExôCrôiˇl
( )

4359 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

4361 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 > 0U )

4363 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )--;

4365 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 0U )

4367 
	`p‹tENABLE_INTERRUPTS
();

4371 
	`mtCOVERAGE_TEST_MARKER
();

4376 
	`mtCOVERAGE_TEST_MARKER
();

4381 
	`mtCOVERAGE_TEST_MARKER
();

4383 
	}
}

4388 #i‡–––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
c⁄figGENERATE_RUN_TIME_STATS
 == 1 ) ) && \

4389 –
	gc⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) && \

4390 –
	gc⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

4392 * 
	$¥vWrôeNameToBuf„r
–* 
pcBuf„r
,

4393 c⁄° * 
pcTaskName
 )

4395 
size_t
 
x
;

4398 
	`°r˝y
–
pcBuf„r
, 
pcTaskName
 );

4402  
x
 = 
	`°æí
–
pcBuf„r
 ); x < ( 
size_t
 ) ( 
c⁄figMAX_TASK_NAME_LEN
 - 1 ); x++ )

4404 
pcBuf„r
[ 
x
 ] = ' ';

4408 
pcBuf„r
[ 
x
 ] = ( ) 0x00;

4411  &–
pcBuf„r
[ 
x
 ] );

4412 
	}
}

4417 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

4419 
	$vTaskLi°
–* 
pcWrôeBuf„r
 )

4421 
TaskSètus_t
 * 
pxTaskSètusAºay
;

4422 
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

4423 
cSètus
;

4453 *
pcWrôeBuf„r
 = ( ) 0x00;

4457 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

4462 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

4464 if–
pxTaskSètusAºay
 !
NULL
 )

4467 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, 
NULL
 );

4470  
x
 = 0; x < 
uxAºaySize
; x++ )

4472  
pxTaskSètusAºay
[ 
x
 ].
eCuºítSèã
 )

4474 
eRu¬ög
:

4475 
cSètus
 = 
tskRUNNING_CHAR
;

4478 
eRódy
:

4479 
cSètus
 = 
tskREADY_CHAR
;

4482 
eBlocked
:

4483 
cSètus
 = 
tskBLOCKED_CHAR
;

4486 
eSu•íded
:

4487 
cSètus
 = 
tskSUSPENDED_CHAR
;

4490 
eDñëed
:

4491 
cSètus
 = 
tskDELETED_CHAR
;

4494 
eInvÆid
:

4497 
cSètus
 = ( ) 0x00;

4503 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

4506 
	`•rötf
–
pcWrôeBuf„r
, "\t%c\t%u\t%u\t%u\r\n", 
cSètus
, ( Ë
pxTaskSètusAºay
[ 
x
 ].
uxCuºítPri‹ôy
, ( ËpxTaskSètusAºay[ x ].
usSèckHighW©îM¨k
, ( ËpxTaskSètusAºay[ x ].
xTaskNumbî
 );

4507 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

4512 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

4516 
	`mtCOVERAGE_TEST_MARKER
();

4518 
	}
}

4523 #i‡––
c⁄figGENERATE_RUN_TIME_STATS
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

4525 
	$vTaskGëRunTimeSèts
–* 
pcWrôeBuf„r
 )

4527 
TaskSètus_t
 * 
pxTaskSètusAºay
;

4528 
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

4529 
c⁄figRUN_TIME_COUNTER_TYPE
 
ulTŸÆTime
, 
ulSètsAsPî˚¡age
;

4531 #i‡–
c⁄figUSE_TRACE_FACILITY
 != 1 )

4533 #îr‹ 
c⁄figUSE_TRACE_FACILITY
 
mu°
 
Æso
 
be
 
£t
 
to
 1 
ö
 
FªeRTOSC⁄fig
.
h
Åÿ
u£
 
	`vTaskGëRunTimeSèts
().

4563 *
pcWrôeBuf„r
 = ( ) 0x00;

4567 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

4572 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

4574 if–
pxTaskSètusAºay
 !
NULL
 )

4577 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, &
ulTŸÆTime
 );

4580 
ulTŸÆTime
 /= 100UL;

4583 if–
ulTŸÆTime
 > 0UL )

4586  
x
 = 0; x < 
uxAºaySize
; x++ )

4591 
ulSètsAsPî˚¡age
 = 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 / 
ulTŸÆTime
;

4596 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

4598 if–
ulSètsAsPî˚¡age
 > 0UL )

4600 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


4602 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t%lu%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, 
ulSètsAsPî˚¡age
 );

4608 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t%u%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, ( Ë
ulSètsAsPî˚¡age
 );

4616 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


4618 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t<1%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

4624 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t<1%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

4629 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

4634 
	`mtCOVERAGE_TEST_MARKER
();

4639 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

4643 
	`mtCOVERAGE_TEST_MARKER
();

4645 
	}
}

4650 
TickTy≥_t
 
	$uxTaskRe£tEvítIãmVÆue
( )

4652 
TickTy≥_t
 
uxRëu∫
;

4654 
uxRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

4658 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxCuºítTCB->
uxPri‹ôy
 ) );

4660  
uxRëu∫
;

4661 
	}
}

4664 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

4666 
TaskH™dÀ_t
 
	$pvTaskIn¸emítMuãxHñdCou¡
( )

4670 if–
pxCuºítTCB
 !
NULL
 )

4672 –
pxCuºítTCB
->
uxMuãxesHñd
 )++;

4675  
pxCuºítTCB
;

4676 
	}
}

4681 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4683 
uöt32_t
 
	$ulTaskGíîicNŸifyTake
–
UBa£Ty≥_t
 
uxIndexToWaô
,

4684 
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
,

4685 
TickTy≥_t
 
xTicksToWaô
 )

4687 
uöt32_t
 
ulRëu∫
;

4689 
	`c⁄figASSERT
–
uxIndexToWaô
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

4691 
	`èskENTER_CRITICAL
();

4694 if–
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ] == 0UL )

4697 
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] = 
èskWAITING_NOTIFICATION
;

4699 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

4701 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

4702 
	`åa˚TASK_NOTIFY_TAKE_BLOCK
–
uxIndexToWaô
 );

4708 
	`p‹tYIELD_WITHIN_API
();

4712 
	`mtCOVERAGE_TEST_MARKER
();

4717 
	`mtCOVERAGE_TEST_MARKER
();

4720 
	`èskEXIT_CRITICAL
();

4722 
	`èskENTER_CRITICAL
();

4724 
	`åa˚TASK_NOTIFY_TAKE
–
uxIndexToWaô
 );

4725 
ulRëu∫
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ];

4727 if–
ulRëu∫
 != 0UL )

4729 if–
xCÀ¨Cou¡OnExô
 !
pdFALSE
 )

4731 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ] = 0UL;

4735 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ] = 
ulRëu∫
 - ( 
uöt32_t
 ) 1;

4740 
	`mtCOVERAGE_TEST_MARKER
();

4743 
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] = 
èskNOT_WAITING_NOTIFICATION
;

4745 
	`èskEXIT_CRITICAL
();

4747  
ulRëu∫
;

4748 
	}
}

4753 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4755 
Ba£Ty≥_t
 
	$xTaskGíîicNŸifyWaô
–
UBa£Ty≥_t
 
uxIndexToWaô
,

4756 
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
,

4757 
uöt32_t
 
ulBôsToCÀ¨OnExô
,

4758 
uöt32_t
 * 
pulNŸifiˇti⁄VÆue
,

4759 
TickTy≥_t
 
xTicksToWaô
 )

4761 
Ba£Ty≥_t
 
xRëu∫
;

4763 
	`c⁄figASSERT
–
uxIndexToWaô
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

4765 
	`èskENTER_CRITICAL
();

4768 if–
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] !
èskNOTIFICATION_RECEIVED
 )

4773 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ] &~
ulBôsToCÀ¨OnE¡ry
;

4776 
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] = 
èskWAITING_NOTIFICATION
;

4778 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

4780 
	`¥vAddCuºítTaskToDñayedLi°
–
xTicksToWaô
, 
pdTRUE
 );

4781 
	`åa˚TASK_NOTIFY_WAIT_BLOCK
–
uxIndexToWaô
 );

4787 
	`p‹tYIELD_WITHIN_API
();

4791 
	`mtCOVERAGE_TEST_MARKER
();

4796 
	`mtCOVERAGE_TEST_MARKER
();

4799 
	`èskEXIT_CRITICAL
();

4801 
	`èskENTER_CRITICAL
();

4803 
	`åa˚TASK_NOTIFY_WAIT
–
uxIndexToWaô
 );

4805 if–
pulNŸifiˇti⁄VÆue
 !
NULL
 )

4809 *
pulNŸifiˇti⁄VÆue
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ];

4816 if–
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] !
èskNOTIFICATION_RECEIVED
 )

4819 
xRëu∫
 = 
pdFALSE
;

4825 
pxCuºítTCB
->
ulNŸifõdVÆue
[ 
uxIndexToWaô
 ] &~
ulBôsToCÀ¨OnExô
;

4826 
xRëu∫
 = 
pdTRUE
;

4829 
pxCuºítTCB
->
ucNŸifySèã
[ 
uxIndexToWaô
 ] = 
èskNOT_WAITING_NOTIFICATION
;

4831 
	`èskEXIT_CRITICAL
();

4833  
xRëu∫
;

4834 
	}
}

4839 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4841 
Ba£Ty≥_t
 
	$xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
,

4842 
UBa£Ty≥_t
 
uxIndexToNŸify
,

4843 
uöt32_t
 
ulVÆue
,

4844 
eNŸifyA˘i⁄
 
eA˘i⁄
,

4845 
uöt32_t
 * 
pulPªviousNŸifiˇti⁄VÆue
 )

4847 
TCB_t
 * 
pxTCB
;

4848 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4849 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4851 
	`c⁄figASSERT
–
uxIndexToNŸify
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

4852 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4853 
pxTCB
 = 
xTaskToNŸify
;

4855 
	`èskENTER_CRITICAL
();

4857 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

4859 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ];

4862 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ];

4864 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ] = 
èskNOTIFICATION_RECEIVED
;

4866  
eA˘i⁄
 )

4868 
eSëBôs
:

4869 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] |
ulVÆue
;

4872 
eIn¸emít
:

4873 –
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] )++;

4876 
eSëVÆueWôhOvîwrôe
:

4877 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] = 
ulVÆue
;

4880 
eSëVÆueWôhoutOvîwrôe
:

4882 if–
ucOrigöÆNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

4884 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] = 
ulVÆue
;

4889 
xRëu∫
 = 
pdFAIL
;

4894 
eNoA˘i⁄
:

4905 
	`c⁄figASSERT
–
xTickCou¡
 =–
TickTy≥_t
 ) 0 );

4910 
	`åa˚TASK_NOTIFY
–
uxIndexToNŸify
 );

4914 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

4916 
	`li°REMOVE_ITEM
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

4917 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4920 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4922 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

4934 
	`¥vRe£tNextTaskUnblockTime
();

4938 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4942 
	`èskYIELD_IF_USING_PREEMPTION
();

4946 
	`mtCOVERAGE_TEST_MARKER
();

4951 
	`mtCOVERAGE_TEST_MARKER
();

4954 
	`èskEXIT_CRITICAL
();

4956  
xRëu∫
;

4957 
	}
}

4962 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4964 
Ba£Ty≥_t
 
	$xTaskGíîicNŸifyFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
,

4965 
UBa£Ty≥_t
 
uxIndexToNŸify
,

4966 
uöt32_t
 
ulVÆue
,

4967 
eNŸifyA˘i⁄
 
eA˘i⁄
,

4968 
uöt32_t
 * 
pulPªviousNŸifiˇti⁄VÆue
,

4969 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

4971 
TCB_t
 * 
pxTCB
;

4972 
uöt8_t
 
ucOrigöÆNŸifySèã
;

4973 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4974 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

4976 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4977 
	`c⁄figASSERT
–
uxIndexToNŸify
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

4995 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

4997 
pxTCB
 = 
xTaskToNŸify
;

4999 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

5001 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

5003 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ];

5006 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ];

5007 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ] = 
èskNOTIFICATION_RECEIVED
;

5009  
eA˘i⁄
 )

5011 
eSëBôs
:

5012 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] |
ulVÆue
;

5015 
eIn¸emít
:

5016 –
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] )++;

5019 
eSëVÆueWôhOvîwrôe
:

5020 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] = 
ulVÆue
;

5023 
eSëVÆueWôhoutOvîwrôe
:

5025 if–
ucOrigöÆNŸifySèã
 !
èskNOTIFICATION_RECEIVED
 )

5027 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] = 
ulVÆue
;

5032 
xRëu∫
 = 
pdFAIL
;

5037 
eNoA˘i⁄
:

5048 
	`c⁄figASSERT
–
xTickCou¡
 =–
TickTy≥_t
 ) 0 );

5052 
	`åa˚TASK_NOTIFY_FROM_ISR
–
uxIndexToNŸify
 );

5056 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

5059 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

5061 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

5063 
	`li°REMOVE_ITEM
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

5064 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

5070 
	`li°INSERT_END
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

5073 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

5077 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

5079 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

5085 
xYõldPídög
 = 
pdTRUE
;

5089 
	`mtCOVERAGE_TEST_MARKER
();

5093 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

5095  
xRëu∫
;

5096 
	}
}

5101 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

5103 
	$vTaskGíîicNŸifyGiveFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
,

5104 
UBa£Ty≥_t
 
uxIndexToNŸify
,

5105 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

5107 
TCB_t
 * 
pxTCB
;

5108 
uöt8_t
 
ucOrigöÆNŸifySèã
;

5109 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

5111 
	`c⁄figASSERT
–
xTaskToNŸify
 );

5112 
	`c⁄figASSERT
–
uxIndexToNŸify
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

5130 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

5132 
pxTCB
 = 
xTaskToNŸify
;

5134 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

5136 
ucOrigöÆNŸifySèã
 = 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ];

5137 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToNŸify
 ] = 
èskNOTIFICATION_RECEIVED
;

5141 –
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToNŸify
 ] )++;

5143 
	`åa˚TASK_NOTIFY_GIVE_FROM_ISR
–
uxIndexToNŸify
 );

5147 if–
ucOrigöÆNŸifySèã
 =
èskWAITING_NOTIFICATION
 )

5150 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

5152 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

5154 
	`li°REMOVE_ITEM
–&–
pxTCB
->
xSèãLi°Iãm
 ) );

5155 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

5161 
	`li°INSERT_END
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

5164 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

5168 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

5170 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

5176 
xYõldPídög
 = 
pdTRUE
;

5180 
	`mtCOVERAGE_TEST_MARKER
();

5184 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

5185 
	}
}

5190 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

5192 
Ba£Ty≥_t
 
	$xTaskGíîicNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
,

5193 
UBa£Ty≥_t
 
uxIndexToCÀ¨
 )

5195 
TCB_t
 * 
pxTCB
;

5196 
Ba£Ty≥_t
 
xRëu∫
;

5198 
	`c⁄figASSERT
–
uxIndexToCÀ¨
 < 
c⁄figTASK_NOTIFICATION_ARRAY_ENTRIES
 );

5202 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

5204 
	`èskENTER_CRITICAL
();

5206 if–
pxTCB
->
ucNŸifySèã
[ 
uxIndexToCÀ¨
 ] =
èskNOTIFICATION_RECEIVED
 )

5208 
pxTCB
->
ucNŸifySèã
[ 
uxIndexToCÀ¨
 ] = 
èskNOT_WAITING_NOTIFICATION
;

5209 
xRëu∫
 = 
pdPASS
;

5213 
xRëu∫
 = 
pdFAIL
;

5216 
	`èskEXIT_CRITICAL
();

5218  
xRëu∫
;

5219 
	}
}

5224 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

5226 
uöt32_t
 
	$ulTaskGíîicNŸifyVÆueCÀ¨
–
TaskH™dÀ_t
 
xTask
,

5227 
UBa£Ty≥_t
 
uxIndexToCÀ¨
,

5228 
uöt32_t
 
ulBôsToCÀ¨
 )

5230 
TCB_t
 * 
pxTCB
;

5231 
uöt32_t
 
ulRëu∫
;

5235 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

5237 
	`èskENTER_CRITICAL
();

5241 
ulRëu∫
 = 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToCÀ¨
 ];

5242 
pxTCB
->
ulNŸifõdVÆue
[ 
uxIndexToCÀ¨
 ] &~
ulBôsToCÀ¨
;

5244 
	`èskEXIT_CRITICAL
();

5246  
ulRëu∫
;

5247 
	}
}

5252 #i‡––
c⁄figGENERATE_RUN_TIME_STATS
 =1 ) && ( 
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 ) )

5254 
c⁄figRUN_TIME_COUNTER_TYPE
 
	$ulTaskGëIdÀRunTimeCou¡î
( )

5256  
xIdÀTaskH™dÀ
->
ulRunTimeCou¡î
;

5257 
	}
}

5262 #i‡––
c⁄figGENERATE_RUN_TIME_STATS
 =1 ) && ( 
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 ) )

5264 
c⁄figRUN_TIME_COUNTER_TYPE
 
	$ulTaskGëIdÀRunTimePî˚¡
( )

5266 
c⁄figRUN_TIME_COUNTER_TYPE
 
ulTŸÆTime
, 
ulRëu∫
;

5268 
ulTŸÆTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

5271 
ulTŸÆTime
 /–
c⁄figRUN_TIME_COUNTER_TYPE
 ) 100;

5274 if–
ulTŸÆTime
 > ( 
c⁄figRUN_TIME_COUNTER_TYPE
 ) 0 )

5276 
ulRëu∫
 = 
xIdÀTaskH™dÀ
->
ulRunTimeCou¡î
 / 
ulTŸÆTime
;

5280 
ulRëu∫
 = 0;

5283  
ulRëu∫
;

5284 
	}
}

5289 
	$¥vAddCuºítTaskToDñayedLi°
–
TickTy≥_t
 
xTicksToWaô
,

5290 c⁄° 
Ba£Ty≥_t
 
xC™BlockIndeföôñy
 )

5292 
TickTy≥_t
 
xTimeToWake
;

5293 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

5295 #i‡–
INCLUDE_xTaskAb‹tDñay
 == 1 )

5300 
pxCuºítTCB
->
ucDñayAb‹ãd
 = 
pdFALSE
;

5306 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

5310 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

5314 
	`mtCOVERAGE_TEST_MARKER
();

5317 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

5319 if––
xTicksToWaô
 =
p‹tMAX_DELAY
 ) && ( 
xC™BlockIndeföôñy
 !
pdFALSE
 ) )

5324 
	`li°INSERT_END
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5331 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

5334 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

5336 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

5340 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5346 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5351 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

5353 
xNextTaskUnblockTime
 = 
xTimeToWake
;

5357 
	`mtCOVERAGE_TEST_MARKER
();

5367 
xTimeToWake
 = 
xC⁄°TickCou¡
 + 
xTicksToWaô
;

5370 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xSèãLi°Iãm
 ), 
xTimeToWake
 );

5372 if–
xTimeToWake
 < 
xC⁄°TickCou¡
 )

5375 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5380 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xSèãLi°Iãm
 ) );

5385 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

5387 
xNextTaskUnblockTime
 = 
xTimeToWake
;

5391 
	`mtCOVERAGE_TEST_MARKER
();

5396 –Ë
xC™BlockIndeföôñy
;

5399 
	}
}

5405 #ifde‡
FREERTOS_MODULE_TEST


5406 
	~"èsks_ã°_ac˚ss_fun˘i⁄s.h
"

5410 #i‡–
c⁄figINCLUDE_FREERTOS_TASK_C_ADDITIONS_H
 == 1 )

5412 
	~"‰ìπos_èsks_c_addôi⁄s.h
"

5414 #ifde‡
FREERTOS_TASKS_C_ADDITIONS_INIT


5415 
	$‰ìπos_èsks_c_addôi⁄s_öô
( )

5417 
	`FREERTOS_TASKS_C_ADDITIONS_INIT
();

5418 
	}
}

	@timers.c

30 
	~<°dlib.h
>

35 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

37 
	~"FªeRTOS.h
"

38 
	~"èsk.h
"

39 
	~"queue.h
"

40 
	~"timîs.h
"

42 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 0 )

43 #îr‹ 
c⁄figUSE_TIMERS
 
mu°
 
be
 
£t
 
to
 1Åÿ
make
 
the
 
xTimîPídFun˘i⁄CÆl
(Ë
fun˘i⁄
 
avaûabÀ
.

50 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


57 #i‡–
c⁄figUSE_TIMERS
 == 1 )

60 
	#tmrNO_DELAY
 ( ( 
TickTy≥_t
 ) 0U )

	)

61 
	#tmrMAX_TIME_BEFORE_OVERFLOW
 ( ( 
TickTy≥_t
 ) -1 )

	)

65 #i‚de‡
c⁄figTIMER_SERVICE_TASK_NAME


66 
	#c⁄figTIMER_SERVICE_TASK_NAME
 "Tm∏Svc"

	)

70 
	#tmrSTATUS_IS_ACTIVE
 ( ( 
uöt8_t
 ) 0x01 )

	)

71 
	#tmrSTATUS_IS_STATICALLY_ALLOCATED
 ( ( 
uöt8_t
 ) 0x02 )

	)

72 
	#tmrSTATUS_IS_AUTORELOAD
 ( ( 
uöt8_t
 ) 0x04 )

	)

75 
	stmrTimîC⁄åﬁ


77 c⁄° * 
	mpcTimîName
;

78 
Li°Iãm_t
 
	mxTimîLi°Iãm
;

79 
TickTy≥_t
 
	mxTimîPîiodInTicks
;

80 * 
	mpvTimîID
;

81 
TimîCÆlbackFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

82 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

83 
UBa£Ty≥_t
 
	muxTimîNumbî
;

85 
uöt8_t
 
	mucSètus
;

86 } 
	txTIMER
;

90 
xTIMER
 
	tTimî_t
;

97 
	stmrTimîP¨amëîs


99 
TickTy≥_t
 
	mxMesßgeVÆue
;

100 
Timî_t
 * 
	mpxTimî
;

101 } 
	tTimîP¨amëî_t
;

104 
	stmrCÆlbackP¨amëîs


106 
PídedFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

107 * 
	mpvP¨amëî1
;

108 
uöt32_t
 
	mulP¨amëî2
;

109 } 
	tCÆlbackP¨amëîs_t
;

113 
	stmrTimîQueueMesßge


115 
Ba£Ty≥_t
 
	mxMesßgeID
;

118 
TimîP¨amëî_t
 
	mxTimîP¨amëîs
;

122 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

123 
CÆlbackP¨amëîs_t
 
	mxCÆlbackP¨amëîs
;

125 } 
	mu
;

126 } 
	tD´m⁄TaskMesßge_t
;

137 
PRIVILEGED_DATA
 
Li°_t
 
	gxA˘iveTimîLi°1
;

138 
PRIVILEGED_DATA
 
Li°_t
 
	gxA˘iveTimîLi°2
;

139 
PRIVILEGED_DATA
 
Li°_t
 * 
	gpxCuºítTimîLi°
;

140 
PRIVILEGED_DATA
 
Li°_t
 * 
	gpxOvîÊowTimîLi°
;

143 
PRIVILEGED_DATA
 
QueueH™dÀ_t
 
	gxTimîQueue
 = 
NULL
;

144 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
	gxTimîTaskH™dÀ
 = 
NULL
;

154 
	$¥vCheckF‹VÆidLi°AndQueue
–Ë
PRIVILEGED_FUNCTION
;

161 
	$p‹tTASK_FUNCTION_PROTO
–
¥vTimîTask
, 
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

167 
	$¥vPro˚ssRe˚ivedComm™ds
–Ë
PRIVILEGED_FUNCTION
;

173 
Ba£Ty≥_t
 
	$¥vIn£πTimîInA˘iveLi°
–
Timî_t
 * c⁄° 
pxTimî
,

174 c⁄° 
TickTy≥_t
 
xNextExpúyTime
,

175 c⁄° 
TickTy≥_t
 
xTimeNow
,

176 c⁄° 
TickTy≥_t
 
xComm™dTime
 ) 
PRIVILEGED_FUNCTION
;

183 
	$¥vRñﬂdTimî
–
Timî_t
 * c⁄° 
pxTimî
,

184 
TickTy≥_t
 
xExpúedTime
,

185 c⁄° 
TickTy≥_t
 
xTimeNow
 ) 
PRIVILEGED_FUNCTION
;

191 
	$¥vPro˚ssExpúedTimî
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
,

192 c⁄° 
TickTy≥_t
 
xTimeNow
 ) 
PRIVILEGED_FUNCTION
;

198 
	$¥vSwôchTimîLi°s
–Ë
PRIVILEGED_FUNCTION
;

204 
TickTy≥_t
 
	$¥vSam∂eTimeNow
–
Ba£Ty≥_t
 * c⁄° 
pxTimîLi°sWîeSwôched
 ) 
PRIVILEGED_FUNCTION
;

212 
TickTy≥_t
 
	$¥vGëNextExpúeTime
–
Ba£Ty≥_t
 * c⁄° 
pxLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

218 
	$¥vPro˚ssTimîOrBlockTask
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
,

219 
Ba£Ty≥_t
 
xLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

225 
	$¥vInôüli£NewTimî
–c⁄° * c⁄° 
pcTimîName
,

226 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

227 c⁄° 
Ba£Ty≥_t
 
xAutoRñﬂd
,

228 * c⁄° 
pvTimîID
,

229 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

230 
Timî_t
 * 
pxNewTimî
 ) 
PRIVILEGED_FUNCTION
;

233 
Ba£Ty≥_t
 
	$xTimîCª©eTimîTask
( )

235 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

241 
	`¥vCheckF‹VÆidLi°AndQueue
();

243 if–
xTimîQueue
 !
NULL
 )

245 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

247 
SèticTask_t
 * 
pxTimîTaskTCBBuf„r
 = 
NULL
;

248 
SèckTy≥_t
 * 
pxTimîTaskSèckBuf„r
 = 
NULL
;

249 
uöt32_t
 
ulTimîTaskSèckSize
;

251 
	`vAµliˇti⁄GëTimîTaskMem‹y
–&
pxTimîTaskTCBBuf„r
, &
pxTimîTaskSèckBuf„r
, &
ulTimîTaskSèckSize
 );

252 
xTimîTaskH™dÀ
 = 
	`xTaskCª©eSètic
–
¥vTimîTask
,

253 
c⁄figTIMER_SERVICE_TASK_NAME
,

254 
ulTimîTaskSèckSize
,

255 
NULL
,

256 ––
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
,

257 
pxTimîTaskSèckBuf„r
,

258 
pxTimîTaskTCBBuf„r
 );

260 if–
xTimîTaskH™dÀ
 !
NULL
 )

262 
xRëu∫
 = 
pdPASS
;

267 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
,

268 
c⁄figTIMER_SERVICE_TASK_NAME
,

269 
c⁄figTIMER_TASK_STACK_DEPTH
,

270 
NULL
,

271 ––
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
,

272 &
xTimîTaskH™dÀ
 );

278 
	`mtCOVERAGE_TEST_MARKER
();

281 
	`c⁄figASSERT
–
xRëu∫
 );

282  
xRëu∫
;

283 
	}
}

286 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

288 
TimîH™dÀ_t
 
	$xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
,

289 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

290 c⁄° 
Ba£Ty≥_t
 
xAutoRñﬂd
,

291 * c⁄° 
pvTimîID
,

292 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 )

294 
Timî_t
 * 
pxNewTimî
;

296 
pxNewTimî
 = ( 
Timî_t
 * ) 
	`pvP‹tMÆloc
( ( Timer_t ) );

298 if–
pxNewTimî
 !
NULL
 )

303 
pxNewTimî
->
ucSètus
 = 0x00;

304 
	`¥vInôüli£NewTimî
–
pcTimîName
, 
xTimîPîiodInTicks
, 
xAutoRñﬂd
, 
pvTimîID
, 
pxCÆlbackFun˘i⁄
, 
pxNewTimî
 );

307  
pxNewTimî
;

308 
	}
}

313 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

315 
TimîH™dÀ_t
 
	$xTimîCª©eSètic
–c⁄° * c⁄° 
pcTimîName
,

316 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

317 c⁄° 
Ba£Ty≥_t
 
xAutoRñﬂd
,

318 * c⁄° 
pvTimîID
,

319 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

320 
SèticTimî_t
 * 
pxTimîBuf„r
 )

322 
Timî_t
 * 
pxNewTimî
;

324 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

329 vﬁ©ûê
size_t
 
xSize
 = –
SèticTimî_t
 );

330 
	`c⁄figASSERT
–
xSize
 =–
Timî_t
 ) );

331 –Ë
xSize
;

336 
	`c⁄figASSERT
–
pxTimîBuf„r
 );

337 
pxNewTimî
 = ( 
Timî_t
 * ) 
pxTimîBuf„r
;

339 if–
pxNewTimî
 !
NULL
 )

344 
pxNewTimî
->
ucSètus
 = 
tmrSTATUS_IS_STATICALLY_ALLOCATED
;

346 
	`¥vInôüli£NewTimî
–
pcTimîName
, 
xTimîPîiodInTicks
, 
xAutoRñﬂd
, 
pvTimîID
, 
pxCÆlbackFun˘i⁄
, 
pxNewTimî
 );

349  
pxNewTimî
;

350 
	}
}

355 
	$¥vInôüli£NewTimî
–c⁄° * c⁄° 
pcTimîName
,

356 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

357 c⁄° 
Ba£Ty≥_t
 
xAutoRñﬂd
,

358 * c⁄° 
pvTimîID
,

359 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

360 
Timî_t
 * 
pxNewTimî
 )

363 
	`c⁄figASSERT
––
xTimîPîiodInTicks
 > 0 ) );

367 
	`¥vCheckF‹VÆidLi°AndQueue
();

371 
pxNewTimî
->
pcTimîName
 =ÖcTimerName;

372 
pxNewTimî
->
xTimîPîiodInTicks
 = xTimerPeriodInTicks;

373 
pxNewTimî
->
pvTimîID
 =ÖvTimerID;

374 
pxNewTimî
->
pxCÆlbackFun˘i⁄
 =ÖxCallbackFunction;

375 
	`vLi°Inôüli£Iãm
–&–
pxNewTimî
->
xTimîLi°Iãm
 ) );

377 if–
xAutoRñﬂd
 !
pdFALSE
 )

379 
pxNewTimî
->
ucSètus
 |
tmrSTATUS_IS_AUTORELOAD
;

382 
	`åa˚TIMER_CREATE
–
pxNewTimî
 );

383 
	}
}

386 
Ba£Ty≥_t
 
	$xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
,

387 c⁄° 
Ba£Ty≥_t
 
xComm™dID
,

388 c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
,

389 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
,

390 c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

392 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

393 
D´m⁄TaskMesßge_t
 
xMesßge
;

395 
	`c⁄figASSERT
–
xTimî
 );

399 if–
xTimîQueue
 !
NULL
 )

402 
xMesßge
.
xMesßgeID
 = 
xComm™dID
;

403 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 = 
xO±i⁄ÆVÆue
;

404 
xMesßge
.
u
.
xTimîP¨amëîs
.
pxTimî
 = 
xTimî
;

406 if–
xComm™dID
 < 
tmrFIRST_FROM_ISR_COMMAND
 )

408 if–
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_RUNNING
 )

410 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xTicksToWaô
 );

414 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 );

419 
xRëu∫
 = 
	`xQueueSídToBackFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

422 
	`åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xComm™dID
, 
xO±i⁄ÆVÆue
, 
xRëu∫
 );

426 
	`mtCOVERAGE_TEST_MARKER
();

429  
xRëu∫
;

430 
	}
}

433 
TaskH™dÀ_t
 
	$xTimîGëTimîD´m⁄TaskH™dÀ
( )

437 
	`c⁄figASSERT
––
xTimîTaskH™dÀ
 !
NULL
 ) );

438  
xTimîTaskH™dÀ
;

439 
	}
}

442 
TickTy≥_t
 
	$xTimîGëPîiod
–
TimîH™dÀ_t
 
xTimî
 )

444 
Timî_t
 * 
pxTimî
 = 
xTimî
;

446 
	`c⁄figASSERT
–
xTimî
 );

447  
pxTimî
->
xTimîPîiodInTicks
;

448 
	}
}

451 
	$vTimîSëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
,

452 c⁄° 
Ba£Ty≥_t
 
xAutoRñﬂd
 )

454 
Timî_t
 * 
pxTimî
 = 
xTimî
;

456 
	`c⁄figASSERT
–
xTimî
 );

457 
	`èskENTER_CRITICAL
();

459 if–
xAutoRñﬂd
 !
pdFALSE
 )

461 
pxTimî
->
ucSètus
 |
tmrSTATUS_IS_AUTORELOAD
;

465 
pxTimî
->
ucSètus
 &––
uöt8_t
 ) ~
tmrSTATUS_IS_AUTORELOAD
 );

468 
	`èskEXIT_CRITICAL
();

469 
	}
}

472 
Ba£Ty≥_t
 
	$xTimîGëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
 )

474 
Timî_t
 * 
pxTimî
 = 
xTimî
;

475 
Ba£Ty≥_t
 
xRëu∫
;

477 
	`c⁄figASSERT
–
xTimî
 );

478 
	`èskENTER_CRITICAL
();

480 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) == 0 )

483 
xRëu∫
 = 
pdFALSE
;

488 
xRëu∫
 = 
pdTRUE
;

491 
	`èskEXIT_CRITICAL
();

493  
xRëu∫
;

494 
	}
}

496 
UBa£Ty≥_t
 
	$uxTimîGëRñﬂdMode
–
TimîH™dÀ_t
 
xTimî
 )

498  ( 
UBa£Ty≥_t
 ) 
	`xTimîGëRñﬂdMode
–
xTimî
 );

499 
	}
}

502 
TickTy≥_t
 
	$xTimîGëExpúyTime
–
TimîH™dÀ_t
 
xTimî
 )

504 
Timî_t
 * 
pxTimî
 = 
xTimî
;

505 
TickTy≥_t
 
xRëu∫
;

507 
	`c⁄figASSERT
–
xTimî
 );

508 
xRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

509  
xRëu∫
;

510 
	}
}

513 c⁄° * 
	$pcTimîGëName
–
TimîH™dÀ_t
 
xTimî
 )

515 
Timî_t
 * 
pxTimî
 = 
xTimî
;

517 
	`c⁄figASSERT
–
xTimî
 );

518  
pxTimî
->
pcTimîName
;

519 
	}
}

522 
	$¥vRñﬂdTimî
–
Timî_t
 * c⁄° 
pxTimî
,

523 
TickTy≥_t
 
xExpúedTime
,

524 c⁄° 
TickTy≥_t
 
xTimeNow
 )

529  
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xExpúedTime
 +ÖxTimî->
xTimîPîiodInTicks
 ), 
xTimeNow
, xExpúedTimêË!
pdFALSE
 )

532 
xExpúedTime
 +
pxTimî
->
xTimîPîiodInTicks
;

535 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

536 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

538 
	}
}

541 
	$¥vPro˚ssExpúedTimî
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
,

542 c⁄° 
TickTy≥_t
 
xTimeNow
 )

544 
Timî_t
 * c⁄° 
pxTimî
 = ( Timî_à* ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

549 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

553 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) != 0 )

555 
	`¥vRñﬂdTimî
–
pxTimî
, 
xNextExpúeTime
, 
xTimeNow
 );

559 
pxTimî
->
ucSètus
 &––
uöt8_t
 ) ~
tmrSTATUS_IS_ACTIVE
 );

563 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

564 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

565 
	}
}

568 
	$p‹tTASK_FUNCTION
–
¥vTimîTask
, 
pvP¨amëîs
 )

570 
TickTy≥_t
 
xNextExpúeTime
;

571 
Ba£Ty≥_t
 
xLi°WasEm±y
;

574 –Ë
pvP¨amëîs
;

576 #i‡–
c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 == 1 )

578 
	`vAµliˇti⁄D´m⁄TaskSèπupHook
( );

584 
	`vAµliˇti⁄D´m⁄TaskSèπupHook
();

592 
xNextExpúeTime
 = 
	`¥vGëNextExpúeTime
–&
xLi°WasEm±y
 );

596 
	`¥vPro˚ssTimîOrBlockTask
–
xNextExpúeTime
, 
xLi°WasEm±y
 );

599 
	`¥vPro˚ssRe˚ivedComm™ds
();

601 
	}
}

604 
	$¥vPro˚ssTimîOrBlockTask
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
,

605 
Ba£Ty≥_t
 
xLi°WasEm±y
 )

607 
TickTy≥_t
 
xTimeNow
;

608 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
;

610 
	`vTaskSu•ídAŒ
();

617 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

619 if–
xTimîLi°sWîeSwôched
 =
pdFALSE
 )

622 if––
xLi°WasEm±y
 =
pdFALSE
 ) && ( 
xNextExpúeTime
 <
xTimeNow
 ) )

624 –Ë
	`xTaskResumeAŒ
();

625 
	`¥vPro˚ssExpúedTimî
–
xNextExpúeTime
, 
xTimeNow
 );

635 if–
xLi°WasEm±y
 !
pdFALSE
 )

639 
xLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxOvîÊowTimîLi°
 );

642 
	`vQueueWaôF‹MesßgeRe°ri˘ed
–
xTimîQueue
, ( 
xNextExpúeTime
 - 
xTimeNow
 ), 
xLi°WasEm±y
 );

644 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

650 
	`p‹tYIELD_WITHIN_API
();

654 
	`mtCOVERAGE_TEST_MARKER
();

660 –Ë
	`xTaskResumeAŒ
();

663 
	}
}

666 
TickTy≥_t
 
	$¥vGëNextExpúeTime
–
Ba£Ty≥_t
 * c⁄° 
pxLi°WasEm±y
 )

668 
TickTy≥_t
 
xNextExpúeTime
;

677 *
pxLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 );

679 if–*
pxLi°WasEm±y
 =
pdFALSE
 )

681 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

686 
xNextExpúeTime
 = ( 
TickTy≥_t
 ) 0U;

689  
xNextExpúeTime
;

690 
	}
}

693 
TickTy≥_t
 
	$¥vSam∂eTimeNow
–
Ba£Ty≥_t
 * c⁄° 
pxTimîLi°sWîeSwôched
 )

695 
TickTy≥_t
 
xTimeNow
;

696 
PRIVILEGED_DATA
 
TickTy≥_t
 
xLa°Time
 = ( TickType_t ) 0U;

698 
xTimeNow
 = 
	`xTaskGëTickCou¡
();

700 if–
xTimeNow
 < 
xLa°Time
 )

702 
	`¥vSwôchTimîLi°s
();

703 *
pxTimîLi°sWîeSwôched
 = 
pdTRUE
;

707 *
pxTimîLi°sWîeSwôched
 = 
pdFALSE
;

710 
xLa°Time
 = 
xTimeNow
;

712  
xTimeNow
;

713 
	}
}

716 
Ba£Ty≥_t
 
	$¥vIn£πTimîInA˘iveLi°
–
Timî_t
 * c⁄° 
pxTimî
,

717 c⁄° 
TickTy≥_t
 
xNextExpúyTime
,

718 c⁄° 
TickTy≥_t
 
xTimeNow
,

719 c⁄° 
TickTy≥_t
 
xComm™dTime
 )

721 
Ba£Ty≥_t
 
xPro˚ssTimîNow
 = 
pdFALSE
;

723 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xNextExpúyTime
 );

724 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

726 if–
xNextExpúyTime
 <
xTimeNow
 )

730 if–––
TickTy≥_t
 ) ( 
xTimeNow
 - 
xComm™dTime
 ) ) >
pxTimî
->
xTimîPîiodInTicks
 )

734 
xPro˚ssTimîNow
 = 
pdTRUE
;

738 
	`vLi°In£π
–
pxOvîÊowTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

743 if––
xTimeNow
 < 
xComm™dTime
 ) && ( 
xNextExpúyTime
 >= xCommandTime ) )

748 
xPro˚ssTimîNow
 = 
pdTRUE
;

752 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

756  
xPro˚ssTimîNow
;

757 
	}
}

760 
	$¥vPro˚ssRe˚ivedComm™ds
( )

762 
D´m⁄TaskMesßge_t
 
xMesßge
;

763 
Timî_t
 * 
pxTimî
;

764 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
;

765 
TickTy≥_t
 
xTimeNow
;

767  
	`xQueueRe˚ive
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 ) !
pdFAIL
 )

769 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

773 if–
xMesßge
.
xMesßgeID
 < ( 
Ba£Ty≥_t
 ) 0 )

775 c⁄° 
CÆlbackP¨amëîs_t
 * c⁄° 
pxCÆlback
 = &–
xMesßge
.
u
.
xCÆlbackP¨amëîs
 );

779 
	`c⁄figASSERT
–
pxCÆlback
 );

782 
pxCÆlback
->
	`pxCÆlbackFun˘i⁄
–pxCÆlback->
pvP¨amëî1
,ÖxCÆlback->
ulP¨amëî2
 );

786 
	`mtCOVERAGE_TEST_MARKER
();

793 if–
xMesßge
.
xMesßgeID
 >–
Ba£Ty≥_t
 ) 0 )

797 
pxTimî
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.pxTimer;

799 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) =
pdFALSE
 )

802 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

806 
	`mtCOVERAGE_TEST_MARKER
();

809 
	`åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßge
.
xMesßgeID
, xMesßge.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 );

817 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

819  
xMesßge
.
xMesßgeID
 )

821 
tmrCOMMAND_START
:

822 
tmrCOMMAND_START_FROM_ISR
:

823 
tmrCOMMAND_RESET
:

824 
tmrCOMMAND_RESET_FROM_ISR
:

826 
pxTimî
->
ucSètus
 |
tmrSTATUS_IS_ACTIVE
;

828 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
xTimeNow
, xMesßge.u.xTimîP¨amëîs.xMesßgeVÆuêË!
pdFALSE
 )

832 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_AUTORELOAD
 ) != 0 )

834 
	`¥vRñﬂdTimî
–
pxTimî
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
xTimeNow
 );

838 
pxTimî
->
ucSètus
 &––
uöt8_t
 ) ~
tmrSTATUS_IS_ACTIVE
 );

842 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

843 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

847 
	`mtCOVERAGE_TEST_MARKER
();

852 
tmrCOMMAND_STOP
:

853 
tmrCOMMAND_STOP_FROM_ISR
:

855 
pxTimî
->
ucSètus
 &––
uöt8_t
 ) ~
tmrSTATUS_IS_ACTIVE
 );

858 
tmrCOMMAND_CHANGE_PERIOD
:

859 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
:

860 
pxTimî
->
ucSètus
 |
tmrSTATUS_IS_ACTIVE
;

861 
pxTimî
->
xTimîPîiodInTicks
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
;

862 
	`c⁄figASSERT
––
pxTimî
->
xTimîPîiodInTicks
 > 0 ) );

870 –Ë
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xTimeNow
 +ÖxTimî->
xTimîPîiodInTicks
 ), xTimeNow, xTimeNow );

873 
tmrCOMMAND_DELETE
:

874 #i‡–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

879 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_STATICALLY_ALLOCATED
 ) =–
uöt8_t
 ) 0 )

881 
	`vP‹tFªe
–
pxTimî
 );

885 
pxTimî
->
ucSètus
 &––
uöt8_t
 ) ~
tmrSTATUS_IS_ACTIVE
 );

894 
pxTimî
->
ucSètus
 &––
uöt8_t
 ) ~
tmrSTATUS_IS_ACTIVE
 );

905 
	}
}

908 
	$¥vSwôchTimîLi°s
( )

910 
TickTy≥_t
 
xNextExpúeTime
;

911 
Li°_t
 * 
pxTemp
;

917  
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 ) =
pdFALSE
 )

919 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

924 
	`¥vPro˚ssExpúedTimî
–
xNextExpúeTime
, 
tmrMAX_TIME_BEFORE_OVERFLOW
 );

927 
pxTemp
 = 
pxCuºítTimîLi°
;

928 
pxCuºítTimîLi°
 = 
pxOvîÊowTimîLi°
;

929 
pxOvîÊowTimîLi°
 = 
pxTemp
;

930 
	}
}

933 
	$¥vCheckF‹VÆidLi°AndQueue
( )

938 
	`èskENTER_CRITICAL
();

940 if–
xTimîQueue
 =
NULL
 )

942 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°1
 );

943 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°2
 );

944 
pxCuºítTimîLi°
 = &
xA˘iveTimîLi°1
;

945 
pxOvîÊowTimîLi°
 = &
xA˘iveTimîLi°2
;

947 #i‡–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

951 
PRIVILEGED_DATA
 
SèticQueue_t
 
xSèticTimîQueue
;

952 
PRIVILEGED_DATA
 
uöt8_t
 
ucSèticTimîQueueSt‹age
[ ( 
size_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
 * –
D´m⁄TaskMesßge_t
 ) ];

954 
xTimîQueue
 = 
	`xQueueCª©eSètic
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, ( UBa£Ty≥_àË–
D´m⁄TaskMesßge_t
 ), &–
ucSèticTimîQueueSt‹age
[ 0 ] ), &
xSèticTimîQueue
 );

958 
xTimîQueue
 = 
	`xQueueCª©e
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, –
D´m⁄TaskMesßge_t
 ) );

962 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

964 if–
xTimîQueue
 !
NULL
 )

966 
	`vQueueAddToRegi°ry
–
xTimîQueue
, "TmrQ" );

970 
	`mtCOVERAGE_TEST_MARKER
();

977 
	`mtCOVERAGE_TEST_MARKER
();

980 
	`èskEXIT_CRITICAL
();

981 
	}
}

984 
Ba£Ty≥_t
 
	$xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 )

986 
Ba£Ty≥_t
 
xRëu∫
;

987 
Timî_t
 * 
pxTimî
 = 
xTimî
;

989 
	`c⁄figASSERT
–
xTimî
 );

992 
	`èskENTER_CRITICAL
();

994 if––
pxTimî
->
ucSètus
 & 
tmrSTATUS_IS_ACTIVE
 ) == 0 )

996 
xRëu∫
 = 
pdFALSE
;

1000 
xRëu∫
 = 
pdTRUE
;

1003 
	`èskEXIT_CRITICAL
();

1005  
xRëu∫
;

1006 
	}
}

1009 * 
	$pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 )

1011 
Timî_t
 * c⁄° 
pxTimî
 = 
xTimî
;

1012 * 
pvRëu∫
;

1014 
	`c⁄figASSERT
–
xTimî
 );

1016 
	`èskENTER_CRITICAL
();

1018 
pvRëu∫
 = 
pxTimî
->
pvTimîID
;

1020 
	`èskEXIT_CRITICAL
();

1022  
pvRëu∫
;

1023 
	}
}

1026 
	$vTimîSëTimîID
–
TimîH™dÀ_t
 
xTimî
,

1027 * 
pvNewID
 )

1029 
Timî_t
 * c⁄° 
pxTimî
 = 
xTimî
;

1031 
	`c⁄figASSERT
–
xTimî
 );

1033 
	`èskENTER_CRITICAL
();

1035 
pxTimî
->
pvTimîID
 = 
pvNewID
;

1037 
	`èskEXIT_CRITICAL
();

1038 
	}
}

1041 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

1043 
Ba£Ty≥_t
 
	$xTimîPídFun˘i⁄CÆlFromISR
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
,

1044 * 
pvP¨amëî1
,

1045 
uöt32_t
 
ulP¨amëî2
,

1046 
Ba£Ty≥_t
 * 
pxHighîPri‹ôyTaskWokí
 )

1048 
D´m⁄TaskMesßge_t
 
xMesßge
;

1049 
Ba£Ty≥_t
 
xRëu∫
;

1053 
xMesßge
.
xMesßgeID
 = 
tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
;

1054 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pxCÆlbackFun˘i⁄
 = 
xFun˘i⁄ToPíd
;

1055 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pvP¨amëî1
 =ÖvParameter1;

1056 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
ulP¨amëî2
 = ulParameter2;

1058 
xRëu∫
 = 
	`xQueueSídFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

1060 
	`åa˚PEND_FUNC_CALL_FROM_ISR
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
xRëu∫
 );

1062  
xRëu∫
;

1063 
	}
}

1068 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

1070 
Ba£Ty≥_t
 
	$xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
,

1071 * 
pvP¨amëî1
,

1072 
uöt32_t
 
ulP¨amëî2
,

1073 
TickTy≥_t
 
xTicksToWaô
 )

1075 
D´m⁄TaskMesßge_t
 
xMesßge
;

1076 
Ba£Ty≥_t
 
xRëu∫
;

1081 
	`c⁄figASSERT
–
xTimîQueue
 );

1085 
xMesßge
.
xMesßgeID
 = 
tmrCOMMAND_EXECUTE_CALLBACK
;

1086 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pxCÆlbackFun˘i⁄
 = 
xFun˘i⁄ToPíd
;

1087 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pvP¨amëî1
 =ÖvParameter1;

1088 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
ulP¨amëî2
 = ulParameter2;

1090 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xTicksToWaô
 );

1092 
	`åa˚PEND_FUNC_CALL
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
xRëu∫
 );

1094  
xRëu∫
;

1095 
	}
}

1100 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1102 
UBa£Ty≥_t
 
	$uxTimîGëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
 )

1104  ( ( 
Timî_t
 * ) 
xTimî
 )->
uxTimîNumbî
;

1105 
	}
}

1110 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1112 
	$vTimîSëTimîNumbî
–
TimîH™dÀ_t
 
xTimî
,

1113 
UBa£Ty≥_t
 
uxTimîNumbî
 )

1115 ––
Timî_t
 * ) 
xTimî
 )->
uxTimîNumbî
 = uxTimerNumber;

1116 
	}
}

	@
1
.
0
7
74
croutine.c
event_groups.c
list.c
queue.c
stream_buffer.c
tasks.c
timers.c
